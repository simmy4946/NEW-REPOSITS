{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/simmy4946/NEW-REPOSITS-LaTesT-PrOjeCtS-/blob/main/melhouse_data.ipynb%20(final)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "h1mvIyHpdJ70"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import seaborn as sns\n",
        "sns.set(color_codes = True)\n",
        "import scipy.stats as stats\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "9O6QnF9DdZkR"
      },
      "outputs": [],
      "source": [
        "# Import data\n",
        "melhous_data= pd.read_csv(\"/content/melb_data.csv\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 377
        },
        "id": "tB3Sonreej94",
        "outputId": "e70c915b-bf04-4e23-c007-247a0d2da5b6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Suburb           Address  Rooms Type      Price Method SellerG  \\\n",
              "0  Abbotsford      85 Turner St      2    h  1480000.0      S  Biggin   \n",
              "1  Abbotsford   25 Bloomburg St      2    h  1035000.0      S  Biggin   \n",
              "2  Abbotsford      5 Charles St      3    h  1465000.0     SP  Biggin   \n",
              "3  Abbotsford  40 Federation La      3    h   850000.0     PI  Biggin   \n",
              "4  Abbotsford       55a Park St      4    h  1600000.0     VB  Nelson   \n",
              "\n",
              "        Date  Distance  Postcode  ...  Bathroom  Car  Landsize  BuildingArea  \\\n",
              "0  3/12/2016       2.5    3067.0  ...       1.0  1.0     202.0           NaN   \n",
              "1  4/02/2016       2.5    3067.0  ...       1.0  0.0     156.0          79.0   \n",
              "2  4/03/2017       2.5    3067.0  ...       2.0  0.0     134.0         150.0   \n",
              "3  4/03/2017       2.5    3067.0  ...       2.0  1.0      94.0           NaN   \n",
              "4  4/06/2016       2.5    3067.0  ...       1.0  2.0     120.0         142.0   \n",
              "\n",
              "   YearBuilt  CouncilArea Lattitude  Longtitude             Regionname  \\\n",
              "0        NaN        Yarra  -37.7996    144.9984  Northern Metropolitan   \n",
              "1     1900.0        Yarra  -37.8079    144.9934  Northern Metropolitan   \n",
              "2     1900.0        Yarra  -37.8093    144.9944  Northern Metropolitan   \n",
              "3        NaN        Yarra  -37.7969    144.9969  Northern Metropolitan   \n",
              "4     2014.0        Yarra  -37.8072    144.9941  Northern Metropolitan   \n",
              "\n",
              "  Propertycount  \n",
              "0        4019.0  \n",
              "1        4019.0  \n",
              "2        4019.0  \n",
              "3        4019.0  \n",
              "4        4019.0  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-689e269a-27b4-4bf6-9c00-2450940f9136\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Suburb</th>\n",
              "      <th>Address</th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Type</th>\n",
              "      <th>Price</th>\n",
              "      <th>Method</th>\n",
              "      <th>SellerG</th>\n",
              "      <th>Date</th>\n",
              "      <th>Distance</th>\n",
              "      <th>Postcode</th>\n",
              "      <th>...</th>\n",
              "      <th>Bathroom</th>\n",
              "      <th>Car</th>\n",
              "      <th>Landsize</th>\n",
              "      <th>BuildingArea</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>CouncilArea</th>\n",
              "      <th>Lattitude</th>\n",
              "      <th>Longtitude</th>\n",
              "      <th>Regionname</th>\n",
              "      <th>Propertycount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>85 Turner St</td>\n",
              "      <td>2</td>\n",
              "      <td>h</td>\n",
              "      <td>1480000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>3/12/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3067.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>202.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.7996</td>\n",
              "      <td>144.9984</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>4019.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>25 Bloomburg St</td>\n",
              "      <td>2</td>\n",
              "      <td>h</td>\n",
              "      <td>1035000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>4/02/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3067.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1900.0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.8079</td>\n",
              "      <td>144.9934</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>4019.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>5 Charles St</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>1465000.0</td>\n",
              "      <td>SP</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>4/03/2017</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3067.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>134.0</td>\n",
              "      <td>150.0</td>\n",
              "      <td>1900.0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.8093</td>\n",
              "      <td>144.9944</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>4019.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>40 Federation La</td>\n",
              "      <td>3</td>\n",
              "      <td>h</td>\n",
              "      <td>850000.0</td>\n",
              "      <td>PI</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>4/03/2017</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3067.0</td>\n",
              "      <td>...</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>94.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.7969</td>\n",
              "      <td>144.9969</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>4019.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>55a Park St</td>\n",
              "      <td>4</td>\n",
              "      <td>h</td>\n",
              "      <td>1600000.0</td>\n",
              "      <td>VB</td>\n",
              "      <td>Nelson</td>\n",
              "      <td>4/06/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3067.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>142.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.8072</td>\n",
              "      <td>144.9941</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>4019.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-689e269a-27b4-4bf6-9c00-2450940f9136')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-689e269a-27b4-4bf6-9c00-2450940f9136 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-689e269a-27b4-4bf6-9c00-2450940f9136');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ae1bd806-e27b-4530-a433-819e794fa25a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae1bd806-e27b-4530-a433-819e794fa25a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ae1bd806-e27b-4530-a433-819e794fa25a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "melhous_data"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "# see the heads\n",
        "melhous_data.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oi4p4C3Uet0X",
        "outputId": "a8b4f14f-0035-4ea3-85c4-8c0de59e66f5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Suburb', 'Address', 'Rooms', 'Type', 'Price', 'Method', 'SellerG',\n",
              "       'Date', 'Distance', 'Postcode', 'Bedroom2', 'Bathroom', 'Car',\n",
              "       'Landsize', 'BuildingArea', 'YearBuilt', 'CouncilArea', 'Lattitude',\n",
              "       'Longtitude', 'Regionname', 'Propertycount'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "# see the columns\n",
        "melhous_data.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yZKGAJCZgvhM",
        "outputId": "e52e48db-cd33-43a1-ec3b-aa16ac6bf7ca"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13580, 21)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "source": [
        "# see the shape\n",
        "melhous_data.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OSUzensde4Pm",
        "outputId": "d25f69a1-cba9-49bd-ae22-44168a229f48"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 13580 entries, 0 to 13579\n",
            "Data columns (total 21 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   Suburb         13580 non-null  object \n",
            " 1   Address        13580 non-null  object \n",
            " 2   Rooms          13580 non-null  int64  \n",
            " 3   Type           13580 non-null  object \n",
            " 4   Price          13580 non-null  float64\n",
            " 5   Method         13580 non-null  object \n",
            " 6   SellerG        13580 non-null  object \n",
            " 7   Date           13580 non-null  object \n",
            " 8   Distance       13580 non-null  float64\n",
            " 9   Postcode       13580 non-null  float64\n",
            " 10  Bedroom2       13580 non-null  float64\n",
            " 11  Bathroom       13580 non-null  float64\n",
            " 12  Car            13518 non-null  float64\n",
            " 13  Landsize       13580 non-null  float64\n",
            " 14  BuildingArea   7130 non-null   float64\n",
            " 15  YearBuilt      8205 non-null   float64\n",
            " 16  CouncilArea    12211 non-null  object \n",
            " 17  Lattitude      13580 non-null  float64\n",
            " 18  Longtitude     13580 non-null  float64\n",
            " 19  Regionname     13580 non-null  object \n",
            " 20  Propertycount  13580 non-null  float64\n",
            "dtypes: float64(12), int64(1), object(8)\n",
            "memory usage: 2.2+ MB\n"
          ]
        }
      ],
      "source": [
        "# see the info of this data\n",
        "melhous_data.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "6LxJGwiufA13",
        "outputId": "1d0c9d4c-4e80-4d4e-e599-d01b99831c70"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Rooms         Price      Distance      Postcode      Bedroom2  \\\n",
              "count  13580.000000  1.358000e+04  13580.000000  13580.000000  13580.000000   \n",
              "mean       2.937997  1.075684e+06     10.137776   3105.301915      2.914728   \n",
              "std        0.955748  6.393107e+05      5.868725     90.676964      0.965921   \n",
              "min        1.000000  8.500000e+04      0.000000   3000.000000      0.000000   \n",
              "25%        2.000000  6.500000e+05      6.100000   3044.000000      2.000000   \n",
              "50%        3.000000  9.030000e+05      9.200000   3084.000000      3.000000   \n",
              "75%        3.000000  1.330000e+06     13.000000   3148.000000      3.000000   \n",
              "max       10.000000  9.000000e+06     48.100000   3977.000000     20.000000   \n",
              "\n",
              "           Bathroom           Car       Landsize  BuildingArea    YearBuilt  \\\n",
              "count  13580.000000  13518.000000   13580.000000   7130.000000  8205.000000   \n",
              "mean       1.534242      1.610075     558.416127    151.967650  1964.684217   \n",
              "std        0.691712      0.962634    3990.669241    541.014538    37.273762   \n",
              "min        0.000000      0.000000       0.000000      0.000000  1196.000000   \n",
              "25%        1.000000      1.000000     177.000000     93.000000  1940.000000   \n",
              "50%        1.000000      2.000000     440.000000    126.000000  1970.000000   \n",
              "75%        2.000000      2.000000     651.000000    174.000000  1999.000000   \n",
              "max        8.000000     10.000000  433014.000000  44515.000000  2018.000000   \n",
              "\n",
              "          Lattitude    Longtitude  Propertycount  \n",
              "count  13580.000000  13580.000000   13580.000000  \n",
              "mean     -37.809203    144.995216    7454.417378  \n",
              "std        0.079260      0.103916    4378.581772  \n",
              "min      -38.182550    144.431810     249.000000  \n",
              "25%      -37.856822    144.929600    4380.000000  \n",
              "50%      -37.802355    145.000100    6555.000000  \n",
              "75%      -37.756400    145.058305   10331.000000  \n",
              "max      -37.408530    145.526350   21650.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7ce7a3b3-bc1e-4ea4-9b0c-c54599678a7b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Price</th>\n",
              "      <th>Distance</th>\n",
              "      <th>Postcode</th>\n",
              "      <th>Bedroom2</th>\n",
              "      <th>Bathroom</th>\n",
              "      <th>Car</th>\n",
              "      <th>Landsize</th>\n",
              "      <th>BuildingArea</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>Lattitude</th>\n",
              "      <th>Longtitude</th>\n",
              "      <th>Propertycount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>13580.000000</td>\n",
              "      <td>1.358000e+04</td>\n",
              "      <td>13580.000000</td>\n",
              "      <td>13580.000000</td>\n",
              "      <td>13580.000000</td>\n",
              "      <td>13580.000000</td>\n",
              "      <td>13518.000000</td>\n",
              "      <td>13580.000000</td>\n",
              "      <td>7130.000000</td>\n",
              "      <td>8205.000000</td>\n",
              "      <td>13580.000000</td>\n",
              "      <td>13580.000000</td>\n",
              "      <td>13580.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2.937997</td>\n",
              "      <td>1.075684e+06</td>\n",
              "      <td>10.137776</td>\n",
              "      <td>3105.301915</td>\n",
              "      <td>2.914728</td>\n",
              "      <td>1.534242</td>\n",
              "      <td>1.610075</td>\n",
              "      <td>558.416127</td>\n",
              "      <td>151.967650</td>\n",
              "      <td>1964.684217</td>\n",
              "      <td>-37.809203</td>\n",
              "      <td>144.995216</td>\n",
              "      <td>7454.417378</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.955748</td>\n",
              "      <td>6.393107e+05</td>\n",
              "      <td>5.868725</td>\n",
              "      <td>90.676964</td>\n",
              "      <td>0.965921</td>\n",
              "      <td>0.691712</td>\n",
              "      <td>0.962634</td>\n",
              "      <td>3990.669241</td>\n",
              "      <td>541.014538</td>\n",
              "      <td>37.273762</td>\n",
              "      <td>0.079260</td>\n",
              "      <td>0.103916</td>\n",
              "      <td>4378.581772</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>8.500000e+04</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>3000.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1196.000000</td>\n",
              "      <td>-38.182550</td>\n",
              "      <td>144.431810</td>\n",
              "      <td>249.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.000000</td>\n",
              "      <td>6.500000e+05</td>\n",
              "      <td>6.100000</td>\n",
              "      <td>3044.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>177.000000</td>\n",
              "      <td>93.000000</td>\n",
              "      <td>1940.000000</td>\n",
              "      <td>-37.856822</td>\n",
              "      <td>144.929600</td>\n",
              "      <td>4380.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>9.030000e+05</td>\n",
              "      <td>9.200000</td>\n",
              "      <td>3084.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>440.000000</td>\n",
              "      <td>126.000000</td>\n",
              "      <td>1970.000000</td>\n",
              "      <td>-37.802355</td>\n",
              "      <td>145.000100</td>\n",
              "      <td>6555.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.330000e+06</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>3148.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>651.000000</td>\n",
              "      <td>174.000000</td>\n",
              "      <td>1999.000000</td>\n",
              "      <td>-37.756400</td>\n",
              "      <td>145.058305</td>\n",
              "      <td>10331.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>10.000000</td>\n",
              "      <td>9.000000e+06</td>\n",
              "      <td>48.100000</td>\n",
              "      <td>3977.000000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>433014.000000</td>\n",
              "      <td>44515.000000</td>\n",
              "      <td>2018.000000</td>\n",
              "      <td>-37.408530</td>\n",
              "      <td>145.526350</td>\n",
              "      <td>21650.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7ce7a3b3-bc1e-4ea4-9b0c-c54599678a7b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7ce7a3b3-bc1e-4ea4-9b0c-c54599678a7b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7ce7a3b3-bc1e-4ea4-9b0c-c54599678a7b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-58d424fd-98eb-4f7f-a888-4712df87b520\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-58d424fd-98eb-4f7f-a888-4712df87b520')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-58d424fd-98eb-4f7f-a888-4712df87b520 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"melhous_data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Rooms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4800.099593692747,\n        \"min\": 0.9557479384215551,\n        \"max\": 13580.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          13580.0,\n          2.9379970544919,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2979225.99459393,\n        \"min\": 13580.0,\n        \"max\": 9000000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1075684.079455081,\n          903000.0,\n          13580.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4796.610473405383,\n        \"min\": 0.0,\n        \"max\": 13580.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.13777614138439,\n          9.2,\n          13580.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Postcode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3985.809947651435,\n        \"min\": 90.67696408711389,\n        \"max\": 13580.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3105.301914580265,\n          3084.0,\n          13580.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bedroom2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4799.649088060891,\n        \"min\": 0.0,\n        \"max\": 13580.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          13580.0,\n          2.9147275405007362,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bathroom\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4800.537178629762,\n        \"min\": 0.0,\n        \"max\": 13580.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          13580.0,\n          1.5342415316642122,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Car\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4778.448200723975,\n        \"min\": 0.0,\n        \"max\": 13518.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          13518.0,\n          1.6100754549489569,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Landsize\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 152183.13818043025,\n        \"min\": 0.0,\n        \"max\": 433014.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          558.4161266568483,\n          440.0,\n          13580.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BuildingArea\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15515.997074858136,\n        \"min\": 0.0,\n        \"max\": 44515.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          151.96764988779805,\n          126.0,\n          7130.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YearBuilt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2438.4049227521114,\n        \"min\": 37.273762223960674,\n        \"max\": 8205.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1964.6842169408897,\n          1970.0,\n          8205.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lattitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4812.725232173229,\n        \"min\": -38.18255,\n        \"max\": 13580.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -37.80920273343152,\n          -37.802355,\n          13580.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longtitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4757.58128051343,\n        \"min\": 0.10391556140737544,\n        \"max\": 13580.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          144.99521618777615,\n          145.0001,\n          13580.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Propertycount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6643.530234671347,\n        \"min\": 249.0,\n        \"max\": 21650.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7454.417378497791,\n          6555.0,\n          13580.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "# see the description..\n",
        "melhous_data.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hpS--vkffFoS",
        "outputId": "3ff760ab-9b02-4104-841c-b2eb01e380d8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Suburb              0\n",
              "Address             0\n",
              "Rooms               0\n",
              "Type                0\n",
              "Price               0\n",
              "Method              0\n",
              "SellerG             0\n",
              "Date                0\n",
              "Distance            0\n",
              "Postcode            0\n",
              "Bedroom2            0\n",
              "Bathroom            0\n",
              "Car                62\n",
              "Landsize            0\n",
              "BuildingArea     6450\n",
              "YearBuilt        5375\n",
              "CouncilArea      1369\n",
              "Lattitude           0\n",
              "Longtitude          0\n",
              "Regionname          0\n",
              "Propertycount       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "# check the null values , there is no null values in the dataset...\n",
        "melhous_data.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "rvb7r56mqzSE"
      },
      "outputs": [],
      "source": [
        "# Treat the null values by using fillna...\n",
        "melhous_data[\"Car\"].fillna(\"0\", inplace = True)\n",
        "melhous_data[\"BuildingArea\"].fillna(\"0\", inplace = True)\n",
        "melhous_data[\"YearBuilt\"].fillna(\"0\", inplace = True)\n",
        "melhous_data[\"CouncilArea\"].fillna(\"zero\", inplace = True)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 214
        },
        "id": "LJxC8QdlgYdv",
        "outputId": "14ea9ff3-4ae7-42d0-c457-28f1303e5bde"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Suburb          Address  Rooms Type      Price Method SellerG  \\\n",
              "0  Abbotsford     85 Turner St      2    h  1480000.0      S  Biggin   \n",
              "1  Abbotsford  25 Bloomburg St      2    h  1035000.0      S  Biggin   \n",
              "\n",
              "        Date  Distance  Postcode  ...  Bathroom  Car Landsize  BuildingArea  \\\n",
              "0  3/12/2016       2.5    3067.0  ...       1.0  1.0    202.0             0   \n",
              "1  4/02/2016       2.5    3067.0  ...       1.0  0.0    156.0          79.0   \n",
              "\n",
              "  YearBuilt CouncilArea Lattitude  Longtitude             Regionname  \\\n",
              "0         0       Yarra  -37.7996    144.9984  Northern Metropolitan   \n",
              "1    1900.0       Yarra  -37.8079    144.9934  Northern Metropolitan   \n",
              "\n",
              "  Propertycount  \n",
              "0        4019.0  \n",
              "1        4019.0  \n",
              "\n",
              "[2 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cd42708d-0c69-493d-8f62-11a593a82296\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Suburb</th>\n",
              "      <th>Address</th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Type</th>\n",
              "      <th>Price</th>\n",
              "      <th>Method</th>\n",
              "      <th>SellerG</th>\n",
              "      <th>Date</th>\n",
              "      <th>Distance</th>\n",
              "      <th>Postcode</th>\n",
              "      <th>...</th>\n",
              "      <th>Bathroom</th>\n",
              "      <th>Car</th>\n",
              "      <th>Landsize</th>\n",
              "      <th>BuildingArea</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>CouncilArea</th>\n",
              "      <th>Lattitude</th>\n",
              "      <th>Longtitude</th>\n",
              "      <th>Regionname</th>\n",
              "      <th>Propertycount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>85 Turner St</td>\n",
              "      <td>2</td>\n",
              "      <td>h</td>\n",
              "      <td>1480000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>3/12/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3067.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>202.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.7996</td>\n",
              "      <td>144.9984</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>4019.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>25 Bloomburg St</td>\n",
              "      <td>2</td>\n",
              "      <td>h</td>\n",
              "      <td>1035000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>4/02/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3067.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1900.0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.8079</td>\n",
              "      <td>144.9934</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>4019.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cd42708d-0c69-493d-8f62-11a593a82296')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cd42708d-0c69-493d-8f62-11a593a82296 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cd42708d-0c69-493d-8f62-11a593a82296');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-15e5a803-9982-42c2-ac5c-46176836b113\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-15e5a803-9982-42c2-ac5c-46176836b113')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-15e5a803-9982-42c2-ac5c-46176836b113 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "melhous_data"
            }
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "melhous_data.head(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SIuSoZ7QqzUo",
        "outputId": "97550fa3-293c-4d46-f1e7-996f4d15a310"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Suburb           0\n",
              "Address          0\n",
              "Rooms            0\n",
              "Type             0\n",
              "Price            0\n",
              "Method           0\n",
              "SellerG          0\n",
              "Date             0\n",
              "Distance         0\n",
              "Postcode         0\n",
              "Bedroom2         0\n",
              "Bathroom         0\n",
              "Car              0\n",
              "Landsize         0\n",
              "BuildingArea     0\n",
              "YearBuilt        0\n",
              "CouncilArea      0\n",
              "Lattitude        0\n",
              "Longtitude       0\n",
              "Regionname       0\n",
              "Propertycount    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "# check the null values again, now null values have been treated, no null values in the data\n",
        "melhous_data.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4Sz08jT4fPXt"
      },
      "source": [
        "General Statistics:\n",
        "\n",
        "What is the range, mean, median, and standard deviation of numerical columns like 'Price', 'Rooms', 'Distance', 'Bedroom2', 'Bathroom', 'Car', 'Landsize', 'BuildingArea', 'YearBuilt', and 'Propertycount'?\n",
        "What are the most common values and their frequencies for categorical columns like 'Suburb', 'Type', 'Method', 'SellerG', 'CouncilArea', and 'Regionname'?\n",
        "Data Integrity:\n",
        "\n",
        "Are there any missing values in the dataset? How are they distributed across columns?\n",
        "Are there any outliers in numerical columns? How do they affect the distribution?\n",
        "Correlation Analysis:\n",
        "\n",
        "What is the correlation between numerical columns like 'Price', 'Rooms', 'Distance', 'Bedroom2', 'Bathroom', 'Car', 'Landsize', 'BuildingArea', 'YearBuilt', and 'Propertycount'?\n",
        "How does 'Price' correlate with other numerical columns?\n",
        "Temporal Analysis:\n",
        "\n",
        "How does 'Price' vary over time (using 'Date')? Are there any seasonal trends?\n",
        "Is there any correlation between 'YearBuilt' and 'Price'?\n",
        "Spatial Analysis:\n",
        "\n",
        "How are property prices distributed spatially? Are there any geographical patterns?\n",
        "Are there any correlations between geographical features like 'Lattitude', 'Longtitude', and 'Distance' with 'Price'?\n",
        "Feature Engineering:\n",
        "\n",
        "Can new features be derived from existing ones? For example, can a 'Price per square meter' feature be created using 'Price' and 'Landsize'?\n",
        "Visualization:\n",
        "\n",
        "Create histograms or box plots to visualize the distribution of numerical variables.\n",
        "Create bar plots or count plots to visualize the distribution of categorical variables.\n",
        "Plot scatter plots to visualize relationships between numerical variables like 'Price' and 'Rooms'.\n",
        "Comparative Analysis:\n",
        "\n",
        "How do different 'Type' of properties vary in terms of 'Price', 'Rooms', 'Landsize', and 'BuildingArea'?\n",
        "Are there differences in property prices based on 'Method' of sale or 'Regionname'? **bold text**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 214
        },
        "id": "uSVoUutrqzYP",
        "outputId": "67b29e6e-3436-44a9-9f57-bffaaf22359f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Suburb          Address  Rooms Type      Price Method SellerG  \\\n",
              "0  Abbotsford     85 Turner St      2    h  1480000.0      S  Biggin   \n",
              "1  Abbotsford  25 Bloomburg St      2    h  1035000.0      S  Biggin   \n",
              "\n",
              "        Date  Distance  Postcode  ...  Bathroom  Car Landsize  BuildingArea  \\\n",
              "0  3/12/2016       2.5    3067.0  ...       1.0  1.0    202.0             0   \n",
              "1  4/02/2016       2.5    3067.0  ...       1.0  0.0    156.0          79.0   \n",
              "\n",
              "  YearBuilt CouncilArea Lattitude  Longtitude             Regionname  \\\n",
              "0         0       Yarra  -37.7996    144.9984  Northern Metropolitan   \n",
              "1    1900.0       Yarra  -37.8079    144.9934  Northern Metropolitan   \n",
              "\n",
              "  Propertycount  \n",
              "0        4019.0  \n",
              "1        4019.0  \n",
              "\n",
              "[2 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3bd2896f-c89c-4bf2-8204-510acb874a7f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Suburb</th>\n",
              "      <th>Address</th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Type</th>\n",
              "      <th>Price</th>\n",
              "      <th>Method</th>\n",
              "      <th>SellerG</th>\n",
              "      <th>Date</th>\n",
              "      <th>Distance</th>\n",
              "      <th>Postcode</th>\n",
              "      <th>...</th>\n",
              "      <th>Bathroom</th>\n",
              "      <th>Car</th>\n",
              "      <th>Landsize</th>\n",
              "      <th>BuildingArea</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>CouncilArea</th>\n",
              "      <th>Lattitude</th>\n",
              "      <th>Longtitude</th>\n",
              "      <th>Regionname</th>\n",
              "      <th>Propertycount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>85 Turner St</td>\n",
              "      <td>2</td>\n",
              "      <td>h</td>\n",
              "      <td>1480000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>3/12/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3067.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>202.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.7996</td>\n",
              "      <td>144.9984</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>4019.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>25 Bloomburg St</td>\n",
              "      <td>2</td>\n",
              "      <td>h</td>\n",
              "      <td>1035000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>4/02/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3067.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1900.0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.8079</td>\n",
              "      <td>144.9934</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>4019.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3bd2896f-c89c-4bf2-8204-510acb874a7f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3bd2896f-c89c-4bf2-8204-510acb874a7f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3bd2896f-c89c-4bf2-8204-510acb874a7f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-deeded7a-ab9d-4a62-8946-96fd6bee5993\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-deeded7a-ab9d-4a62-8946-96fd6bee5993')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-deeded7a-ab9d-4a62-8946-96fd6bee5993 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "melhous_data"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "melhous_data.head(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nixZon63flG9",
        "outputId": "83a364d5-e8d5-4b28-8c88-cbc0a92ff581"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Suburb', 'Address', 'Rooms', 'Type', 'Price', 'Method', 'SellerG',\n",
              "       'Date', 'Distance', 'Postcode', 'Bedroom2', 'Bathroom', 'Car',\n",
              "       'Landsize', 'BuildingArea', 'YearBuilt', 'CouncilArea', 'Lattitude',\n",
              "       'Longtitude', 'Regionname', 'Propertycount'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "melhous_data.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eBRHbx3zgkMz",
        "outputId": "77cb2336-0004-4cdd-d62a-bea86d8284bb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(13580, 21)"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "# check the duplicates:\n",
        "melhous_data_no_duplicates = melhous_data.drop_duplicates() # there is no duplicates in this dataset\n",
        "melhous_data.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "56bc9LVMpZqo"
      },
      "outputs": [],
      "source": [
        "columns_to_drop = ['Postcode', 'Address', 'Propertycount']  # Specify the columns you want to drop\n",
        "melhous_data.drop(columns=columns_to_drop, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 167
        },
        "id": "cSRqlXR3p3qU",
        "outputId": "7ec0af4d-1623-48da-9d95-3ad18c457dc7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Suburb  Rooms Type      Price Method SellerG       Date  Distance  \\\n",
              "0  Abbotsford      2    h  1480000.0      S  Biggin  3/12/2016       2.5   \n",
              "1  Abbotsford      2    h  1035000.0      S  Biggin  4/02/2016       2.5   \n",
              "\n",
              "   Bedroom2  Bathroom  Car  Landsize BuildingArea YearBuilt CouncilArea  \\\n",
              "0       2.0       1.0  1.0     202.0            0         0       Yarra   \n",
              "1       2.0       1.0  0.0     156.0         79.0    1900.0       Yarra   \n",
              "\n",
              "   Lattitude  Longtitude             Regionname  \n",
              "0   -37.7996    144.9984  Northern Metropolitan  \n",
              "1   -37.8079    144.9934  Northern Metropolitan  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9afc5b84-7daf-424d-bff1-4874ffcf935a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Suburb</th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Type</th>\n",
              "      <th>Price</th>\n",
              "      <th>Method</th>\n",
              "      <th>SellerG</th>\n",
              "      <th>Date</th>\n",
              "      <th>Distance</th>\n",
              "      <th>Bedroom2</th>\n",
              "      <th>Bathroom</th>\n",
              "      <th>Car</th>\n",
              "      <th>Landsize</th>\n",
              "      <th>BuildingArea</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>CouncilArea</th>\n",
              "      <th>Lattitude</th>\n",
              "      <th>Longtitude</th>\n",
              "      <th>Regionname</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>2</td>\n",
              "      <td>h</td>\n",
              "      <td>1480000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>3/12/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>202.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.7996</td>\n",
              "      <td>144.9984</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>2</td>\n",
              "      <td>h</td>\n",
              "      <td>1035000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>4/02/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1900.0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.8079</td>\n",
              "      <td>144.9934</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9afc5b84-7daf-424d-bff1-4874ffcf935a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9afc5b84-7daf-424d-bff1-4874ffcf935a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9afc5b84-7daf-424d-bff1-4874ffcf935a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7aaad32a-cd6e-4d69-b4b3-6a9656b80779\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7aaad32a-cd6e-4d69-b4b3-6a9656b80779')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7aaad32a-cd6e-4d69-b4b3-6a9656b80779 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "melhous_data",
              "summary": "{\n  \"name\": \"melhous_data\",\n  \"rows\": 13580,\n  \"fields\": [\n    {\n      \"column\": \"Suburb\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 314,\n        \"samples\": [\n          \"Cremorne\",\n          \"Coburg\",\n          \"Black Rock\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rooms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 10,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7,\n          3,\n          5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"h\",\n          \"u\",\n          \"t\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 639310.724296018,\n        \"min\": 85000.0,\n        \"max\": 9000000.0,\n        \"num_unique_values\": 2204,\n        \"samples\": [\n          632500.0,\n          2640000.0,\n          1462000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Method\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"SP\",\n          \"SA\",\n          \"PI\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SellerG\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 268,\n        \"samples\": [\n          \"Owen\",\n          \"Triwest\",\n          \"Sotheby's\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 58,\n        \"samples\": [\n          \"3/12/2016\",\n          \"8/10/2016\",\n          \"11/03/2017\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.868724943071711,\n        \"min\": 0.0,\n        \"max\": 48.1,\n        \"num_unique_values\": 202,\n        \"samples\": [\n          10.2,\n          13.9,\n          13.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bedroom2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9659210617084282,\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          20.0,\n          7.0,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bathroom\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6917117224588402,\n        \"min\": 0.0,\n        \"max\": 8.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          6.0,\n          2.0,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Car\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          10.0,\n          9.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Landsize\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3990.6692411090316,\n        \"min\": 0.0,\n        \"max\": 433014.0,\n        \"num_unique_values\": 1448,\n        \"samples\": [\n          3037.0,\n          517.0,\n          59.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BuildingArea\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 603,\n        \"samples\": [\n          285.0,\n          266.53,\n          105.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"YearBuilt\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 145,\n        \"samples\": [\n          1943.0,\n          1196.0,\n          1996.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CouncilArea\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 34,\n        \"samples\": [\n          \"Melbourne\",\n          \"zero\",\n          \"Frankston\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lattitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07925982260355399,\n        \"min\": -38.18255,\n        \"max\": -37.40853,\n        \"num_unique_values\": 6503,\n        \"samples\": [\n          -37.74192,\n          -37.7828,\n          -37.83015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longtitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10391556140737544,\n        \"min\": 144.43181,\n        \"max\": 145.52635,\n        \"num_unique_values\": 7063,\n        \"samples\": [\n          144.72492,\n          145.0138,\n          144.9326\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Regionname\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Western Metropolitan\",\n          \"Eastern Victoria\",\n          \"Northern Metropolitan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "melhous_data.head(2)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nZwQ0XzxlA0J"
      },
      "source": [
        "**What is the range, mean, median, and standard deviation of numerical columns like 'Price', 'Rooms', 'Distance', 'Bedroom2', 'Bathroom', 'Car', 'Landsize', 'BuildingArea', 'YearBuilt', and 'Propertycount'? What are the most common values and their frequencies for categorical columns like 'Suburb', 'Type', 'Method', 'SellerG', 'CouncilArea', and 'Regionname'?**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "PbaLtMHQj1VD"
      },
      "outputs": [],
      "source": [
        "numerical_columns = ['Price', 'Rooms', 'Distance', 'Bedroom2', 'Bathroom', 'Car', 'Landsize', 'BuildingArea', 'YearBuilt']\n",
        "statistics = melhous_data[numerical_columns].describe()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "DvhuxGzcj1Xl",
        "outputId": "a667ac81-a626-4a4a-999b-e6b0b88daeeb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Price      Rooms   Distance   Bedroom2  Bathroom       Landsize\n",
              "mean    1.075684e+06   2.937997  10.137776   2.914728  1.534242     558.416127\n",
              "median  9.030000e+05   3.000000   9.200000   3.000000  1.000000     440.000000\n",
              "std     6.393107e+05   0.955748   5.868725   0.965921  0.691712    3990.669241\n",
              "min     8.500000e+04   1.000000   0.000000   0.000000  0.000000       0.000000\n",
              "max     9.000000e+06  10.000000  48.100000  20.000000  8.000000  433014.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9ce198f4-3b7c-4ee0-9b70-b12671cd14a2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Distance</th>\n",
              "      <th>Bedroom2</th>\n",
              "      <th>Bathroom</th>\n",
              "      <th>Landsize</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.075684e+06</td>\n",
              "      <td>2.937997</td>\n",
              "      <td>10.137776</td>\n",
              "      <td>2.914728</td>\n",
              "      <td>1.534242</td>\n",
              "      <td>558.416127</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>median</th>\n",
              "      <td>9.030000e+05</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>9.200000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>440.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>6.393107e+05</td>\n",
              "      <td>0.955748</td>\n",
              "      <td>5.868725</td>\n",
              "      <td>0.965921</td>\n",
              "      <td>0.691712</td>\n",
              "      <td>3990.669241</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>8.500000e+04</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>9.000000e+06</td>\n",
              "      <td>10.000000</td>\n",
              "      <td>48.100000</td>\n",
              "      <td>20.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>433014.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ce198f4-3b7c-4ee0-9b70-b12671cd14a2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9ce198f4-3b7c-4ee0-9b70-b12671cd14a2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9ce198f4-3b7c-4ee0-9b70-b12671cd14a2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-512c6ca8-e218-4683-b8fe-2a3cadcc2226\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-512c6ca8-e218-4683-b8fe-2a3cadcc2226')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-512c6ca8-e218-4683-b8fe-2a3cadcc2226 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_61c2eb7a-beb5-404f-80de-affeed5e322c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('required_statistics')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_61c2eb7a-beb5-404f-80de-affeed5e322c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('required_statistics');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "required_statistics",
              "summary": "{\n  \"name\": \"required_statistics\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3741538.1518056174,\n        \"min\": 85000.0,\n        \"max\": 9000000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          903000.0,\n          9000000.0,\n          639310.724296018\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rooms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.7251865335750995,\n        \"min\": 0.9557479384215551,\n        \"max\": 10.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3.0,\n          10.0,\n          0.9557479384215551\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19.109538307486538,\n        \"min\": 0.0,\n        \"max\": 48.1,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          9.2,\n          48.1,\n          5.868724943071711\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bedroom2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.27518559123775,\n        \"min\": 0.0,\n        \"max\": 20.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          3.0,\n          20.0,\n          0.9659210617084282\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bathroom\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.2645044375723833,\n        \"min\": 0.0,\n        \"max\": 8.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.0,\n          8.0,\n          0.6917117224588402\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Landsize\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 193098.5593597386,\n        \"min\": 0.0,\n        \"max\": 433014.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          440.0,\n          433014.0,\n          3990.6692411090316\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ],
      "source": [
        "required_statistics = statistics.loc[['mean', '50%', 'std', 'min', 'max']]\n",
        "required_statistics.rename(index={'50%': 'median'}, inplace=True)\n",
        "required_statistics"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Dg9nNnpBldy8"
      },
      "source": [
        "from above we are getting the information about the statistics,where all measures like mean, median, mode, std, min, max of the given variables.."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XnBvyQ21tHhT"
      },
      "source": [
        " ***What are the most common values and their frequencies for categorical columns like 'Suburb', 'Type', 'Method', 'SellerG', 'CouncilArea', and 'Regionname'? ***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "XFqgFVkIuxJH",
        "outputId": "f79de8bd-9624-435f-e8f9-f372911b9d03"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           Suburb  count\n",
              "0       Reservoir    359\n",
              "1        Richmond    260\n",
              "2  Bentleigh East    249\n",
              "3         Preston    239\n",
              "4       Brunswick    222"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-adf969aa-d38c-4031-8d26-b94298db5cad\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Suburb</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Reservoir</td>\n",
              "      <td>359</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Richmond</td>\n",
              "      <td>260</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Bentleigh East</td>\n",
              "      <td>249</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Preston</td>\n",
              "      <td>239</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Brunswick</td>\n",
              "      <td>222</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-adf969aa-d38c-4031-8d26-b94298db5cad')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-adf969aa-d38c-4031-8d26-b94298db5cad button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-adf969aa-d38c-4031-8d26-b94298db5cad');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d9c1e0d8-d18a-4d06-9261-52dc161d2518\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d9c1e0d8-d18a-4d06-9261-52dc161d2518')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d9c1e0d8-d18a-4d06-9261-52dc161d2518 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"melhous_data['Suburb']\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Suburb\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Richmond\",\n          \"Brunswick\",\n          \"Bentleigh East\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 53,\n        \"min\": 222,\n        \"max\": 359,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          260,\n          222,\n          249\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "#What are the top 5 most common suburbs in the dataset?\n",
        "# value counts of suburb:\n",
        "melhous_data['Suburb'].value_counts().sort_values(ascending=False).reset_index().head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KYmwEews0K5d"
      },
      "source": [
        "*Reservoir **Suburb** has highest count with **359** and the lowest is one with other suburb like Emerald, Brookfield, Whittlesea, Monbulk etc.*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "itdV9MY5vJcC",
        "outputId": "b0533497-1e9f-4eac-9d2d-7699ae83bd8c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Type  count\n",
              "0    h   9449\n",
              "1    u   3017\n",
              "2    t   1114"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-287ce90d-902b-4722-a915-c47dcd76028d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Type</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>h</td>\n",
              "      <td>9449</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>u</td>\n",
              "      <td>3017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>t</td>\n",
              "      <td>1114</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-287ce90d-902b-4722-a915-c47dcd76028d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-287ce90d-902b-4722-a915-c47dcd76028d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-287ce90d-902b-4722-a915-c47dcd76028d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-57e93f92-05e4-4fa3-9488-073ce630a550\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-57e93f92-05e4-4fa3-9488-073ce630a550')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-57e93f92-05e4-4fa3-9488-073ce630a550 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"melhous_data['Type']\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Type\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"h\",\n          \"u\",\n          \"t\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4367,\n        \"min\": 1114,\n        \"max\": 9449,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          9449,\n          3017,\n          1114\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "# value counts of Type:\n",
        "melhous_data['Type'].value_counts().sort_values(ascending=False).reset_index()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "asIvb3kC3oaO"
      },
      "source": [
        "*h **bold text** type is highest type of houses with value **9449** which is mostly sold ..and the '**t**' is the lowest type of house with value **1114** is less sold.*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "UccSZeRgvJe-",
        "outputId": "6d036b7b-3adb-486c-8aa5-1eb0d385c744"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Method  count\n",
              "0      S   9022\n",
              "1     SP   1703\n",
              "2     PI   1564\n",
              "3     VB   1199\n",
              "4     SA     92"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4066dffa-834e-4724-957e-c829d05eb4a3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Method</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>S</td>\n",
              "      <td>9022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>SP</td>\n",
              "      <td>1703</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>PI</td>\n",
              "      <td>1564</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>VB</td>\n",
              "      <td>1199</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>SA</td>\n",
              "      <td>92</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4066dffa-834e-4724-957e-c829d05eb4a3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4066dffa-834e-4724-957e-c829d05eb4a3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4066dffa-834e-4724-957e-c829d05eb4a3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1185d890-f4a1-4052-885b-329f7e67f0c5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1185d890-f4a1-4052-885b-329f7e67f0c5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1185d890-f4a1-4052-885b-329f7e67f0c5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"melhous_data['Method']\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Method\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"SP\",\n          \"SA\",\n          \"PI\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3581,\n        \"min\": 92,\n        \"max\": 9022,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1703,\n          92,\n          1564\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "# value counts of suburb:\n",
        "melhous_data['Method'].value_counts().sort_values(ascending=False).reset_index()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gfem9sGQ5Jwk"
      },
      "source": [
        "*Method: S - property sold; SP - property sold prior; PI - property passed in; PN - sold prior not disclosed; SN - sold not disclosed; NB - no bid; VB - vendor bid; W - withdrawn prior to auction; SA - sold after auction; SS - sold after auction price not disclosed. N/A - price or highest bid not available.\n",
        "1.The status or method of the property 'S' means property sold is highest and the 'SA' means sold after auction is the lowest in numbers.* *italicized text*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "3nxkZjDWvJim",
        "outputId": "c43ee3a9-6204-46d3-8fc8-ee305843280d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           SellerG  count\n",
              "0           Nelson   1565\n",
              "1           Jellis   1316\n",
              "2    hockingstuart   1167\n",
              "3            Barry   1011\n",
              "4              Ray    701\n",
              "..             ...    ...\n",
              "263          Prime      1\n",
              "264           Area      1\n",
              "265      Community      1\n",
              "266         Bowman      1\n",
              "267          Point      1\n",
              "\n",
              "[268 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6c87a37b-5eee-4371-88e4-9daa77488537\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SellerG</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Nelson</td>\n",
              "      <td>1565</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Jellis</td>\n",
              "      <td>1316</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>hockingstuart</td>\n",
              "      <td>1167</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Barry</td>\n",
              "      <td>1011</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Ray</td>\n",
              "      <td>701</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>263</th>\n",
              "      <td>Prime</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>264</th>\n",
              "      <td>Area</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>265</th>\n",
              "      <td>Community</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>266</th>\n",
              "      <td>Bowman</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>267</th>\n",
              "      <td>Point</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>268 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c87a37b-5eee-4371-88e4-9daa77488537')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6c87a37b-5eee-4371-88e4-9daa77488537 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6c87a37b-5eee-4371-88e4-9daa77488537');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fb9ea804-5fd1-4938-924e-c12d42a7f811\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fb9ea804-5fd1-4938-924e-c12d42a7f811')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fb9ea804-5fd1-4938-924e-c12d42a7f811 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"melhous_data['SellerG']\",\n  \"rows\": 268,\n  \"fields\": [\n    {\n      \"column\": \"SellerG\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 268,\n        \"samples\": [\n          \"Matthew\",\n          \"Zahn\",\n          \"Stockdale\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 175,\n        \"min\": 1,\n        \"max\": 1565,\n        \"num_unique_values\": 74,\n        \"samples\": [\n          701,\n          11,\n          168\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "# value counts of suburb:\n",
        "melhous_data['SellerG'].value_counts().sort_values(ascending=False).reset_index()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xKHhxyeJ6dJt"
      },
      "source": [
        "*sellerG **bold text** is the real estate agent, where '**Nelson**' is the most common agent of the real estate who is selling porperties,and top 3 agents are '**Nelson**' with value **1565**, **Jellis** with 1316 and hockingstuart with **1167**.*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ADbQH8r3vJlV",
        "outputId": "e3b845fa-0a7d-4261-979b-675387c1e833"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          CouncilArea  count\n",
              "0                zero   1369\n",
              "1            Moreland   1163\n",
              "2          Boroondara   1160\n",
              "3       Moonee Valley    997\n",
              "4             Darebin    934\n",
              "5           Glen Eira    848\n",
              "6         Stonnington    719\n",
              "7         Maribyrnong    692\n",
              "8               Yarra    647\n",
              "9        Port Phillip    628\n",
              "10            Banyule    594\n",
              "11            Bayside    489\n",
              "12          Melbourne    470\n",
              "13        Hobsons Bay    434\n",
              "14           Brimbank    424\n",
              "15             Monash    333\n",
              "16         Manningham    311\n",
              "17         Whitehorse    304\n",
              "18           Kingston    207\n",
              "19         Whittlesea    167\n",
              "20               Hume    164\n",
              "21            Wyndham     86\n",
              "22               Knox     80\n",
              "23          Maroondah     80\n",
              "24             Melton     66\n",
              "25          Frankston     53\n",
              "26  Greater Dandenong     52\n",
              "27              Casey     38\n",
              "28          Nillumbik     36\n",
              "29       Yarra Ranges     18\n",
              "30           Cardinia      8\n",
              "31     Macedon Ranges      7\n",
              "32        Unavailable      1\n",
              "33          Moorabool      1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9e12825c-eb9c-4894-8a4a-b4dc2a76d483\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CouncilArea</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>zero</td>\n",
              "      <td>1369</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Moreland</td>\n",
              "      <td>1163</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Boroondara</td>\n",
              "      <td>1160</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Moonee Valley</td>\n",
              "      <td>997</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Darebin</td>\n",
              "      <td>934</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Glen Eira</td>\n",
              "      <td>848</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Stonnington</td>\n",
              "      <td>719</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Maribyrnong</td>\n",
              "      <td>692</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Yarra</td>\n",
              "      <td>647</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Port Phillip</td>\n",
              "      <td>628</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Banyule</td>\n",
              "      <td>594</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Bayside</td>\n",
              "      <td>489</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Melbourne</td>\n",
              "      <td>470</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Hobsons Bay</td>\n",
              "      <td>434</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Brimbank</td>\n",
              "      <td>424</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Monash</td>\n",
              "      <td>333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Manningham</td>\n",
              "      <td>311</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Whitehorse</td>\n",
              "      <td>304</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Kingston</td>\n",
              "      <td>207</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Whittlesea</td>\n",
              "      <td>167</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Hume</td>\n",
              "      <td>164</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Wyndham</td>\n",
              "      <td>86</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Knox</td>\n",
              "      <td>80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Maroondah</td>\n",
              "      <td>80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Melton</td>\n",
              "      <td>66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Frankston</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Greater Dandenong</td>\n",
              "      <td>52</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>Casey</td>\n",
              "      <td>38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>Nillumbik</td>\n",
              "      <td>36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>Yarra Ranges</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>Cardinia</td>\n",
              "      <td>8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>Macedon Ranges</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>Unavailable</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>Moorabool</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e12825c-eb9c-4894-8a4a-b4dc2a76d483')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9e12825c-eb9c-4894-8a4a-b4dc2a76d483 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9e12825c-eb9c-4894-8a4a-b4dc2a76d483');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b96b3bba-eef5-4a70-bd49-71f9139e4a30\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b96b3bba-eef5-4a70-bd49-71f9139e4a30')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b96b3bba-eef5-4a70-bd49-71f9139e4a30 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"melhous_data['CouncilArea']\",\n  \"rows\": 34,\n  \"fields\": [\n    {\n      \"column\": \"CouncilArea\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 34,\n        \"samples\": [\n          \"Monash\",\n          \"Whittlesea\",\n          \"Casey\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 395,\n        \"min\": 1,\n        \"max\": 1369,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          8,\n          333,\n          53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "melhous_data['CouncilArea'].value_counts().sort_values(ascending=False).reset_index()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HLzIdnzZ8dWc"
      },
      "source": [
        "*highest values containing council area is filled with null however second higest values containing council area is '**Moreland**'.*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "6wxgmG23vmZM",
        "outputId": "ea7b2ed9-7dff-4ebf-bc9f-376788d6a3b7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   Regionname  count\n",
              "0       Southern Metropolitan   4695\n",
              "1       Northern Metropolitan   3890\n",
              "2        Western Metropolitan   2948\n",
              "3        Eastern Metropolitan   1471\n",
              "4  South-Eastern Metropolitan    450\n",
              "5            Eastern Victoria     53\n",
              "6           Northern Victoria     41\n",
              "7            Western Victoria     32"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a4e9bfda-497b-4827-9625-13a6086a5877\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Regionname</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>4695</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>3890</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Western Metropolitan</td>\n",
              "      <td>2948</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Eastern Metropolitan</td>\n",
              "      <td>1471</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>South-Eastern Metropolitan</td>\n",
              "      <td>450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Eastern Victoria</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Northern Victoria</td>\n",
              "      <td>41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Western Victoria</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a4e9bfda-497b-4827-9625-13a6086a5877')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a4e9bfda-497b-4827-9625-13a6086a5877 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a4e9bfda-497b-4827-9625-13a6086a5877');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f42d83a7-67c1-414b-b9bd-d61cc501f82b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f42d83a7-67c1-414b-b9bd-d61cc501f82b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f42d83a7-67c1-414b-b9bd-d61cc501f82b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"melhous_data['Regionname']\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Regionname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Northern Metropolitan\",\n          \"Eastern Victoria\",\n          \"Southern Metropolitan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1896,\n        \"min\": 32,\n        \"max\": 4695,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3890,\n          53,\n          4695\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "melhous_data['Regionname'].value_counts().sort_values(ascending=False).reset_index()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dFQ8ElCh9ba3"
      },
      "source": [
        "highest value of Region is '**Southern Metropolitan**' with **4695**, and the second is '**Northern Metropolitan**' with **3890**."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MYUeG4Qo-j1s"
      },
      "source": [
        "**Can new features be derived from existing ones? For example, can a 'Price per square meter' feature be created using 'Price' and 'Landsize'?**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "xlYUXP2yvmmV"
      },
      "outputs": [],
      "source": [
        "melhous_data['price_per_sqm']= melhous_data['Price']/melhous_data['Landsize']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "tiL8FPzMj1dA",
        "outputId": "3c25494b-fa07-4b86-df48-98e603ffe6de"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       index  price_per_sqm             Regionname\n",
              "0       6790            inf  Northern Metropolitan\n",
              "1       5607            inf  Southern Metropolitan\n",
              "2       5605            inf  Southern Metropolitan\n",
              "3       5604            inf  Southern Metropolitan\n",
              "4       1711            inf  Southern Metropolitan\n",
              "...      ...            ...                    ...\n",
              "13575   9223      15.810811   Western Metropolitan\n",
              "13576  10504      14.276316       Eastern Victoria\n",
              "13577   5194      13.816425  Northern Metropolitan\n",
              "13578   3942      13.378378   Western Metropolitan\n",
              "13579  11020       6.235364  Northern Metropolitan\n",
              "\n",
              "[13580 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-008a82ab-6ca8-4ec6-9b1a-c61feeac5e19\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>price_per_sqm</th>\n",
              "      <th>Regionname</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6790</td>\n",
              "      <td>inf</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5607</td>\n",
              "      <td>inf</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5605</td>\n",
              "      <td>inf</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5604</td>\n",
              "      <td>inf</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1711</td>\n",
              "      <td>inf</td>\n",
              "      <td>Southern Metropolitan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13575</th>\n",
              "      <td>9223</td>\n",
              "      <td>15.810811</td>\n",
              "      <td>Western Metropolitan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13576</th>\n",
              "      <td>10504</td>\n",
              "      <td>14.276316</td>\n",
              "      <td>Eastern Victoria</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13577</th>\n",
              "      <td>5194</td>\n",
              "      <td>13.816425</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13578</th>\n",
              "      <td>3942</td>\n",
              "      <td>13.378378</td>\n",
              "      <td>Western Metropolitan</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13579</th>\n",
              "      <td>11020</td>\n",
              "      <td>6.235364</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>13580 rows × 3 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-008a82ab-6ca8-4ec6-9b1a-c61feeac5e19')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-008a82ab-6ca8-4ec6-9b1a-c61feeac5e19 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-008a82ab-6ca8-4ec6-9b1a-c61feeac5e19');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c012da1c-7934-4833-a046-ebbf31a0d202\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c012da1c-7934-4833-a046-ebbf31a0d202')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c012da1c-7934-4833-a046-ebbf31a0d202 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "Out of range float values are not JSON compliant: inf"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "melhous_data[['price_per_sqm','Regionname']].sort_values(by='price_per_sqm', ascending=False).reset_index()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8cuDuHXv_Yqd"
      },
      "source": [
        "*from above we are getting the price/sqm for the different regions, where property sold, $**15.8108**... price per sqm has been applied for the 'Western metropolitan' region and others are given in the list as per the price /sqm with the mention Region name.*"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Multivariate Analysis\n",
        "Interactions Between Variables:\n",
        "\n",
        "Are there interaction effects between variables like 'Rooms' and 'Type' on 'Price'?\n",
        "How do combinations of categorical and numerical variables affect 'Price'?"
      ],
      "metadata": {
        "id": "cPpdLjxm1Fc6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(data=melhous_data, x='Rooms', y='Price', hue='Type')\n",
        "plt.title('Scatter Plot of Price vs. Rooms by Type')\n",
        "plt.xlabel('Number of Rooms')\n",
        "plt.ylabel('Price')\n",
        "plt.legend(title='Type')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "qY5mQwbY1Ft2",
        "outputId": "d308e89a-decc-415e-e070-d0ba8c17ebd8"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*This scatter plot provides a clearity about the property prices are influenced by the number of rooms, differentiated by property type, thus offering a comprehensive view of the real estate market data.\n",
        "1.h type are using most by users\n",
        "2.type u has medium sell however, type t is very is very less in sell. italicized text *italicized text*"
      ],
      "metadata": {
        "id": "VXKeoQb714SY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(data=melhous_data,x='Rooms', y='Price', hue='Type', ci=None)\n",
        "plt.title('Average Price by Rooms and Type')\n",
        "plt.xlabel('Number of Rooms')\n",
        "plt.ylabel('Average Price')\n",
        "plt.legend(title='Type')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "XEPihSqE2F2H",
        "outputId": "f1dfc8b4-b021-443b-acd3-e61340fbd30f"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*1.8 rooms with type u is having a highest average price which is more than 2.0.\n",
        "2.8 rooms with type h is second highest average price which is mor than 1.5\n",
        "3.1 room with type u is having lowest average price which is between 0.0 to 0.5. *italicized text*"
      ],
      "metadata": {
        "id": "Eg2RHXbI2bkY"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "51Ej4-q48rMw"
      },
      "source": [
        "***What is the correlation between numerical columns like 'Price', 'Rooms', 'Distance', 'Bedroom2', 'Bathroom', 'Car', 'Landsize', 'BuildingArea', 'YearBuilt', and 'Propertycount'? How does 'Price' correlate with other numerical columns? ***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 379,
      "metadata": {
        "id": "a9L4vXEKvgTr"
      },
      "outputs": [],
      "source": [
        "cols= ['Price','Rooms','Distance','Landsize','Bathroom','Bedroom2']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 380,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "0fDfgjS7-lRk",
        "outputId": "b8f19c2b-b546-4588-f376-c93894ac9f1c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Price     Rooms  Distance  Landsize  Bathroom  Bedroom2\n",
              "Price     1.000000  0.496634 -0.162522  0.037507  0.467038  0.475951\n",
              "Rooms     0.496634  1.000000  0.294203  0.025678  0.592934  0.944190\n",
              "Distance -0.162522  0.294203  1.000000  0.025004  0.127155  0.295927\n",
              "Landsize  0.037507  0.025678  0.025004  1.000000  0.037130  0.025646\n",
              "Bathroom  0.467038  0.592934  0.127155  0.037130  1.000000  0.584685\n",
              "Bedroom2  0.475951  0.944190  0.295927  0.025646  0.584685  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-48d55ca0-34e0-49ab-b297-51459bed9ba2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Distance</th>\n",
              "      <th>Landsize</th>\n",
              "      <th>Bathroom</th>\n",
              "      <th>Bedroom2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.496634</td>\n",
              "      <td>-0.162522</td>\n",
              "      <td>0.037507</td>\n",
              "      <td>0.467038</td>\n",
              "      <td>0.475951</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Rooms</th>\n",
              "      <td>0.496634</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.294203</td>\n",
              "      <td>0.025678</td>\n",
              "      <td>0.592934</td>\n",
              "      <td>0.944190</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Distance</th>\n",
              "      <td>-0.162522</td>\n",
              "      <td>0.294203</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.025004</td>\n",
              "      <td>0.127155</td>\n",
              "      <td>0.295927</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Landsize</th>\n",
              "      <td>0.037507</td>\n",
              "      <td>0.025678</td>\n",
              "      <td>0.025004</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.037130</td>\n",
              "      <td>0.025646</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bathroom</th>\n",
              "      <td>0.467038</td>\n",
              "      <td>0.592934</td>\n",
              "      <td>0.127155</td>\n",
              "      <td>0.037130</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.584685</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bedroom2</th>\n",
              "      <td>0.475951</td>\n",
              "      <td>0.944190</td>\n",
              "      <td>0.295927</td>\n",
              "      <td>0.025646</td>\n",
              "      <td>0.584685</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48d55ca0-34e0-49ab-b297-51459bed9ba2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-48d55ca0-34e0-49ab-b297-51459bed9ba2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-48d55ca0-34e0-49ab-b297-51459bed9ba2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7a1a5933-35e0-4a5a-88fd-bd1a75cdf1c0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7a1a5933-35e0-4a5a-88fd-bd1a75cdf1c0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7a1a5933-35e0-4a5a-88fd-bd1a75cdf1c0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_9a8caf20-ebd7-45dc-a678-6fd574b328e1\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('correlation')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9a8caf20-ebd7-45dc-a678-6fd574b328e1 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('correlation');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "correlation",
              "summary": "{\n  \"name\": \"correlation\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4065014457154663,\n        \"min\": -0.16252183786382476,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1.0,\n          0.49663367618653204,\n          0.47595103237662595\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Rooms\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3748181673274685,\n        \"min\": 0.025678350127669395,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.49663367618653204,\n          1.0,\n          0.9441902739606949\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4003476297530034,\n        \"min\": -0.16252183786382476,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          -0.16252183786382476,\n          0.2942025208843918,\n          0.2959267572515583\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Landsize\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.39596479216059793,\n        \"min\": 0.025003757794200932,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.03750745010299737,\n          0.025678350127669395,\n          0.02564624775415282\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bathroom\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3504490487496337,\n        \"min\": 0.037130357063077914,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.46703818282015225,\n          0.5929340810557551,\n          0.5846854860126541\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bedroom2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3752215922863449,\n        \"min\": 0.02564624775415282,\n        \"max\": 1.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0.47595103237662595,\n          0.9441902739606949,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 380
        }
      ],
      "source": [
        "correlation= melhous_data[cols].corr()\n",
        "correlation"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*From the above , we are getting to know about the correlation between these variables , how they are co-related with each other, especially relationship between the price and other variables, as such price relationship with rooms, landsize, bathroom and bedroom2 is zero , typically see no discernible pattern, resulting in a correlation close to zero.There is no linear relationship between them,If two variables are statistically independent, their correlation will be zero. However, the converse is not always true: a zero correlation does not imply independence. A zero correlation indicates that there is no linear relationship between two variables, but it does not rule out other types of relationships, on the other hand negative relationship of price to distance is in negative , a negative correlation between two variables indicates that as one variable increases, the other variable tends to decrease.A negative correlation coefficient indicates an inverse relationship between two variables. When one variable goes up, the other tends to go down, and vice versa.If distance is far then the price becomes low and the distance is closer then price will become goes down, its inverse relationship of correlation. A negative correlation shows that there is an inverse relationship between two variables: as one increases, the other decreases.*italicized text*"
      ],
      "metadata": {
        "id": "1SX-BcH11rzu"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 381,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 459
        },
        "id": "Kt9pre-sexiO",
        "outputId": "190f153e-cca2-4eb6-f11b-5072fb3f8dfb"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "plt.figure(figsize=(5,4))\n",
        "sns.heatmap(correlation, annot=True, cmap='RdBu', fmt='.2f', linewidth=0.5)\n",
        "plt.title(\"correlation Heatmap\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*This is our heatmap which is showing us the correlation between the variables with each other, how these are connected ,and impacts each other,there easy to see the patterns, correlations and variations in the given data, we are checking out the trends in the data, spot the outliers as well,this shows the density and frequency of the occurrences.Darkers squares are highly correlated and the lighter in colour squares have very less correlation.*"
      ],
      "metadata": {
        "id": "8-8X0Imf4khq"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-Oib3TFfuupu"
      },
      "source": [
        "***How does 'Price' vary over time (using 'Date')? Are there any seasonal trends? ***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 382,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x1qoJJiyhXeh",
        "outputId": "0bce1e94-be63-4a47-cfea-bd2a58f7d070"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "1/07/2017     9.392906e+05\n",
              "10/09/2016    1.133971e+06\n",
              "10/12/2016    1.132240e+06\n",
              "11/02/2017    9.086875e+05\n",
              "11/03/2017    1.152368e+06\n",
              "12/06/2016    1.121609e+06\n",
              "12/08/2017    1.179493e+06\n",
              "12/11/2016    1.102318e+06\n",
              "13/05/2017    1.244494e+06\n",
              "13/08/2016    1.079037e+06\n",
              "14/05/2016    9.858166e+05\n",
              "15/07/2017    8.448296e+05\n",
              "15/10/2016    1.141501e+06\n",
              "16/04/2016    1.038474e+06\n",
              "16/07/2016    9.166585e+05\n",
              "16/09/2017    1.208333e+06\n",
              "17/06/2017    1.103763e+06\n",
              "17/09/2016    1.174417e+06\n",
              "18/03/2017    1.150512e+06\n",
              "18/06/2016    1.093432e+06\n",
              "19/08/2017    1.208169e+06\n",
              "19/11/2016    1.138641e+06\n",
              "20/05/2017    1.187049e+06\n",
              "22/04/2017    9.530425e+05\n",
              "22/05/2016    9.925929e+05\n",
              "22/07/2017    8.672626e+05\n",
              "22/08/2016    1.056180e+06\n",
              "23/04/2016    9.048807e+05\n",
              "23/09/2017    1.104634e+06\n",
              "24/06/2017    1.094112e+06\n",
              "24/09/2016    9.532010e+05\n",
              "25/02/2017    1.169051e+06\n",
              "26/07/2016    9.668759e+05\n",
              "26/08/2017    1.218786e+06\n",
              "27/05/2017    1.057760e+06\n",
              "27/06/2016    9.543834e+05\n",
              "27/11/2016    1.198561e+06\n",
              "28/01/2016    1.009000e+06\n",
              "28/05/2016    1.102181e+06\n",
              "28/08/2016    1.115414e+06\n",
              "29/04/2017    1.061780e+06\n",
              "29/07/2017    9.303597e+05\n",
              "3/06/2017     1.087457e+06\n",
              "3/09/2016     1.141657e+06\n",
              "3/09/2017     1.165717e+06\n",
              "3/12/2016     1.213758e+06\n",
              "30/07/2016    9.417157e+05\n",
              "4/02/2016     9.081827e+05\n",
              "4/03/2017     1.131681e+06\n",
              "4/06/2016     1.070335e+06\n",
              "6/05/2017     1.091746e+06\n",
              "6/08/2016     1.025706e+06\n",
              "7/05/2016     1.078732e+06\n",
              "7/11/2016     9.601763e+05\n",
              "8/04/2017     1.040660e+06\n",
              "8/07/2017     8.548350e+05\n",
              "8/10/2016     9.743120e+05\n",
              "9/09/2017     1.196898e+06\n",
              "Name: Price, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 382
        }
      ],
      "source": [
        "average_price_by_year = melhous_data.groupby('Date')['Price'].mean()\n",
        "average_price_by_year"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 383,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 319
        },
        "id": "kB74OI0VhXh8",
        "outputId": "d91adc9d-9459-450a-e81a-e8d4c62e4116"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x300 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Plot the average price over time\n",
        "melhous_data_sorted = melhous_data.sort_values(by='Date')\n",
        "plt.figure(figsize=(15, 3))\n",
        "average_price_by_year.plot(marker='o',markeredgecolor='black',markerfacecolor='red',color='black')\n",
        "plt.title('Average Price Over Time')\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Average Price')\n",
        "plt.grid(True)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*The plot allows for an easy comparison of average prices across different years.There are specific years where there were significant increases or decreases in average prices like **higest peak** of average price of property is in **year 8**, however,**lowest** at **year 2** ,and fluctuating in all the rest years.*"
      ],
      "metadata": {
        "id": "WySDtbNcBBob"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9roqhCUwdS0i"
      },
      "source": [
        "***Is there any correlation between 'Landsize' and 'Price'? ***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 384,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DUgniDaffQxs",
        "outputId": "8692932c-9c8d-43da-dd2b-654316d000c5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.03750745010299715"
            ]
          },
          "metadata": {},
          "execution_count": 384
        }
      ],
      "source": [
        "#Is there any correlation between 'Landsize' and 'Price'?\n",
        "correlation = melhous_data['Landsize'].corr(melhous_data['Price'])\n",
        "correlation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 385,
      "metadata": {
        "id": "eXRDT-RbhfQC"
      },
      "outputs": [],
      "source": [
        "correlation_mel_data = pd.DataFrame(data=[[correlation]], columns=['Correlation'])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 386,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 367
        },
        "id": "oZYz5MJ-hR7P",
        "outputId": "57fa5b0a-c13c-4fb0-fbad-c65e3f9abdea"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(6, 4))\n",
        "sns.heatmap(correlation_mel_data, annot=True, cmap='coolwarm', fmt=\".2f\", linewidths=0.5, cbar=False)\n",
        "plt.title('Correlation between Landsize and Price')\n",
        "plt.xticks([])  # Hide x-axis ticks\n",
        "plt.yticks([])  # Hide y-axis ticks\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*from above , we are getting to know about the relationship between landsize and price ,0.04 is showing that, there is no linear relationship between them.*"
      ],
      "metadata": {
        "id": "ZE8MgmdsBQvK"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 387,
      "metadata": {
        "id": "Di8RQqVXi0h_"
      },
      "outputs": [],
      "source": [
        "cols=['Price', 'Landsize', 'Distance']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 388,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "wMOcqFKAi0eS",
        "outputId": "6a742c8d-e20c-40ed-95b8-57cf1d8766c2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Price  Landsize  Distance\n",
              "Price     1.000000  0.037507 -0.162522\n",
              "Landsize  0.037507  1.000000  0.025004\n",
              "Distance -0.162522  0.025004  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-032e2556-113b-4825-9193-1d56cc0acfd9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Landsize</th>\n",
              "      <th>Distance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.037507</td>\n",
              "      <td>-0.162522</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Landsize</th>\n",
              "      <td>0.037507</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.025004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Distance</th>\n",
              "      <td>-0.162522</td>\n",
              "      <td>0.025004</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-032e2556-113b-4825-9193-1d56cc0acfd9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-032e2556-113b-4825-9193-1d56cc0acfd9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-032e2556-113b-4825-9193-1d56cc0acfd9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-af4ad17b-a71a-4dab-8ace-fc6389646059\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-af4ad17b-a71a-4dab-8ace-fc6389646059')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-af4ad17b-a71a-4dab-8ace-fc6389646059 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_72a89c86-d153-4da8-94a2-523a468281a7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('corr_matrix')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_72a89c86-d153-4da8-94a2-523a468281a7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('corr_matrix');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "corr_matrix",
              "summary": "{\n  \"name\": \"corr_matrix\",\n  \"rows\": 3,\n  \"fields\": [\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6215385008404591,\n        \"min\": -0.16252183786382476,\n        \"max\": 1.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1.0,\n          0.03750745010299737,\n          -0.16252183786382476\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Landsize\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5593397779591007,\n        \"min\": 0.025003757794200925,\n        \"max\": 1.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0.03750745010299737,\n          1.0,\n          0.025003757794200925\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6241314691703733,\n        \"min\": -0.16252183786382476,\n        \"max\": 1.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          -0.16252183786382476,\n          0.025003757794200925,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 388
        }
      ],
      "source": [
        "corr_matrix= melhous_data[cols].corr()\n",
        "corr_matrix"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 389,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 549
        },
        "id": "eGbn3A6bhR-s",
        "outputId": "266ee28a-a3f7-4f00-8fbf-a682eef07c5b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(8,6))\n",
        "sns.heatmap(corr_matrix, annot=True, cmap='tab20c', fmt=\".2f\", linewidths=0.5)\n",
        "plt.title('Correlation Heatmap of the PRICE, LANDSIZE, DISTANCE')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*From this heatmap , the info we getting that the inverse relationship between the distance and price, one varible goes up other goes down, the darken blue squares shows highly correlated withneach other however, other the lighter with 0.03,0.04 etc are having a no relationship and correlation with 1 is perfect relationship as such price and landsize.*"
      ],
      "metadata": {
        "id": "EqeuU_2WB3sk"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "buDDj-Zeo6KQ"
      },
      "source": [
        "**How are property prices distributed spatially? Are there any geographical patterns? Are there any correlations between geographical features like 'Lattitude', 'Longtitude', and 'Distance' with 'Price'?**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 390,
      "metadata": {
        "id": "-Q35sEKspcC0"
      },
      "outputs": [],
      "source": [
        "cols=['Price', 'Lattitude', 'Longtitude', 'Distance']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 391,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "zAfv93IwpcFp",
        "outputId": "6d6f9482-ee1a-41b2-ed37-a89849475c2a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               Price  Lattitude  Longtitude  Distance\n",
              "Price       1.000000  -0.212934    0.203656 -0.162522\n",
              "Lattitude  -0.212934   1.000000   -0.357634 -0.130723\n",
              "Longtitude  0.203656  -0.357634    1.000000  0.239425\n",
              "Distance   -0.162522  -0.130723    0.239425  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f1386905-b81a-4237-8ff8-a2c476d55a2c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price</th>\n",
              "      <th>Lattitude</th>\n",
              "      <th>Longtitude</th>\n",
              "      <th>Distance</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Price</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.212934</td>\n",
              "      <td>0.203656</td>\n",
              "      <td>-0.162522</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Lattitude</th>\n",
              "      <td>-0.212934</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.357634</td>\n",
              "      <td>-0.130723</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Longtitude</th>\n",
              "      <td>0.203656</td>\n",
              "      <td>-0.357634</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.239425</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Distance</th>\n",
              "      <td>-0.162522</td>\n",
              "      <td>-0.130723</td>\n",
              "      <td>0.239425</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f1386905-b81a-4237-8ff8-a2c476d55a2c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f1386905-b81a-4237-8ff8-a2c476d55a2c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f1386905-b81a-4237-8ff8-a2c476d55a2c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-50dca634-1158-4c74-8f39-e427a4d47f57\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-50dca634-1158-4c74-8f39-e427a4d47f57')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-50dca634-1158-4c74-8f39-e427a4d47f57 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_9a001774-5b00-4d6c-a220-af1ac79dad4d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('cor_matrix')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_9a001774-5b00-4d6c-a220-af1ac79dad4d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('cor_matrix');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cor_matrix",
              "summary": "{\n  \"name\": \"cor_matrix\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5602829029410797,\n        \"min\": -0.21293360384763887,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -0.21293360384763887,\n          -0.16252183786382476,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lattitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6239722594251663,\n        \"min\": -0.35763365878852704,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.0,\n          -0.1307229077908857,\n          -0.21293360384763887\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Longtitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5574205466963963,\n        \"min\": -0.35763365878852704,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -0.35763365878852704,\n          0.2394246652860743,\n          0.2036557929666296\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Distance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.540682250085601,\n        \"min\": -0.16252183786382476,\n        \"max\": 1.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -0.1307229077908857,\n          1.0,\n          -0.16252183786382476\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 391
        }
      ],
      "source": [
        "cor_matrix= melhous_data[cols].corr()\n",
        "cor_matrix"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 392,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 549
        },
        "id": "a3oQUgD8pcIh",
        "outputId": "561d2b4d-bbe9-46c3-a284-6cfee9dc0b61"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(8,6))\n",
        "sns.heatmap(cor_matrix, annot=True, cmap='tab20c', fmt=\".2f\", linewidths=0.5)\n",
        "plt.title('Correlation Heatmap of the PRICE, DISTANCE, Lattitude,Longtitude')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Bythe heatmap, you can quickly identify which pairs of variables are strongly or weakly correlated and whether those relationships are positive or negative.*"
      ],
      "metadata": {
        "id": "07oXs32YD-kn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Calculate the average price per year?**"
      ],
      "metadata": {
        "id": "B5Ge1czNDyL5"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 393,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kBYbOWy2dJfy",
        "outputId": "2a19d3b5-8614-4796-ef02-0b2b5feb7c85"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Rooms\n",
              "10     313.000000\n",
              "1      384.681351\n",
              "2      421.164748\n",
              "3      597.700731\n",
              "4      639.727679\n",
              "5      798.505034\n",
              "6      841.462687\n",
              "8      843.875000\n",
              "7     1089.700000\n",
              "Name: Landsize, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 393
        }
      ],
      "source": [
        "average_price_by_year = melhous_data.groupby('Rooms')['Landsize'].mean().sort_values()\n",
        "average_price_by_year"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*by the number of rooms and then calculates the average land size for each group. This operation helps to understand how the average land size varies with the number of rooms in the properties.This means that properties with 2 rooms have an average land size of 326, properties with 3 rooms have an average land size of , 495 and properties with 4 rooms have an average land size of 573.*"
      ],
      "metadata": {
        "id": "NsZLELwAEzho"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bKK_ablDdwT9"
      },
      "source": [
        "***How do different 'Type' of properties vary in terms of 'Price', 'Rooms', 'Landsize', and 'BuildingArea'? Are there differences in property prices based on 'Method' of sale or 'Regionname'? ***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 394,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nn7iQDFBiKYy",
        "outputId": "71506e30-3671-4a0c-aad3-43c2d4f9f501"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0            0\n",
              "1         79.0\n",
              "2        150.0\n",
              "3            0\n",
              "4        142.0\n",
              "         ...  \n",
              "13575        0\n",
              "13576    133.0\n",
              "13577        0\n",
              "13578    157.0\n",
              "13579    112.0\n",
              "Name: Type, Length: 13580, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 394
        }
      ],
      "source": [
        "melhous_data['Type'] = melhous_data['BuildingArea'].astype(str)\n",
        "melhous_data['Type']\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "melhous_data.head(2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 167
        },
        "id": "vQMDL78dvzQF",
        "outputId": "a64bc2b4-c723-4894-d5a9-31e990c6dce4"
      },
      "execution_count": 395,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Suburb  Rooms  Type      Price Method SellerG       Date  Distance  \\\n",
              "0  Abbotsford      2     0  1480000.0      S  Biggin  3/12/2016       2.5   \n",
              "1  Abbotsford      2  79.0  1035000.0      S  Biggin  4/02/2016       2.5   \n",
              "\n",
              "   Bedroom2  Bathroom  Car  Landsize BuildingArea YearBuilt CouncilArea  \\\n",
              "0       2.0       1.0  1.0     202.0            0         0       Yarra   \n",
              "1       2.0       1.0  0.0     156.0         79.0    1900.0       Yarra   \n",
              "\n",
              "   Lattitude  Longtitude             Regionname  price_per_sqm  \n",
              "0   -37.7996    144.9984  Northern Metropolitan    7326.732673  \n",
              "1   -37.8079    144.9934  Northern Metropolitan    6634.615385  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-39002c8a-e72f-4b23-a538-fb92fb96050d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Suburb</th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Type</th>\n",
              "      <th>Price</th>\n",
              "      <th>Method</th>\n",
              "      <th>SellerG</th>\n",
              "      <th>Date</th>\n",
              "      <th>Distance</th>\n",
              "      <th>Bedroom2</th>\n",
              "      <th>Bathroom</th>\n",
              "      <th>Car</th>\n",
              "      <th>Landsize</th>\n",
              "      <th>BuildingArea</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>CouncilArea</th>\n",
              "      <th>Lattitude</th>\n",
              "      <th>Longtitude</th>\n",
              "      <th>Regionname</th>\n",
              "      <th>price_per_sqm</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1480000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>3/12/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>202.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.7996</td>\n",
              "      <td>144.9984</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>7326.732673</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>2</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1035000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>4/02/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1900.0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.8079</td>\n",
              "      <td>144.9934</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>6634.615385</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-39002c8a-e72f-4b23-a538-fb92fb96050d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-39002c8a-e72f-4b23-a538-fb92fb96050d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-39002c8a-e72f-4b23-a538-fb92fb96050d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2d0799a7-9063-44fa-92e6-f53e4f322122\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d0799a7-9063-44fa-92e6-f53e4f322122')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2d0799a7-9063-44fa-92e6-f53e4f322122 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "melhous_data",
              "repr_error": "Out of range float values are not JSON compliant: inf"
            }
          },
          "metadata": {},
          "execution_count": 395
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 396,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 475
        },
        "id": "Nve6Vmzbduja",
        "outputId": "e9d7b4b9-6f8b-4582-8512-c35bcb733979"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Type         Price                                                 \\\n",
              "                    mean     median       min        max            std   \n",
              "0        0  1.070999e+06   917000.0   85000.0  5800000.0  597784.427974   \n",
              "1      0.0  1.448853e+06  1205000.0  412500.0  3450000.0  909356.567935   \n",
              "2      1.0  1.057176e+06   815000.0  342000.0  3812000.0  948821.171661   \n",
              "3     10.0  5.700000e+05   570000.0  570000.0   570000.0            NaN   \n",
              "4    100.0  8.429909e+05   783500.0  378000.0  3120000.0  371010.151559   \n",
              "..     ...           ...        ...       ...        ...            ...   \n",
              "598   97.0  9.030976e+05   860000.0  400000.0  1682000.0  294988.288317   \n",
              "599   98.0  8.405227e+05   802500.0  400000.0  1450000.0  258318.240597   \n",
              "600   98.5  7.450000e+05   745000.0  745000.0   745000.0            NaN   \n",
              "601   99.0  8.007679e+05   773000.0  241000.0  1290000.0  287256.546911   \n",
              "602   99.5  8.850000e+05   885000.0  885000.0   885000.0            NaN   \n",
              "\n",
              "        Rooms                 ...     Landsize                          \\\n",
              "         mean median min max  ...         mean median    min       max   \n",
              "0    2.894419    3.0   1  10  ...   633.526202  478.0    0.0  433014.0   \n",
              "1    3.529412    3.0   2   5  ...   517.941176  542.0  120.0    1173.0   \n",
              "2    2.636364    2.0   1   5  ...   460.545455  319.0    0.0    1625.0   \n",
              "3    2.000000    2.0   2   2  ...     0.000000    0.0    0.0       0.0   \n",
              "4    2.568182    2.5   2   5  ...   365.715909  263.5    0.0    2835.0   \n",
              "..        ...    ...  ..  ..  ...          ...    ...    ...       ...   \n",
              "598  2.487805    2.0   2   4  ...   424.975610  421.0    0.0     941.0   \n",
              "599  2.500000    2.5   2   3  ...   698.977273  258.0    0.0   15900.0   \n",
              "600  2.000000    2.0   2   2  ...   359.000000  359.0  359.0     359.0   \n",
              "601  2.392857    2.0   1   3  ...  1053.714286  235.5    0.0   21715.0   \n",
              "602  2.000000    2.0   2   2  ...   267.000000  267.0  267.0     267.0   \n",
              "\n",
              "                 BuildingArea                            \n",
              "             std         mean median    min    max  std  \n",
              "0    5685.271415          0.0    0.0      0      0  0.0  \n",
              "1     288.063029          0.0    0.0    0.0    0.0  0.0  \n",
              "2     482.556601          1.0    1.0    1.0    1.0  0.0  \n",
              "3            NaN         10.0   10.0   10.0   10.0  NaN  \n",
              "4     401.818508        100.0  100.0  100.0  100.0  0.0  \n",
              "..           ...          ...    ...    ...    ...  ...  \n",
              "598   262.356102         97.0   97.0   97.0   97.0  0.0  \n",
              "599  2366.029030         98.0   98.0   98.0   98.0  0.0  \n",
              "600          NaN         98.5   98.5   98.5   98.5  NaN  \n",
              "601  4057.136792         99.0   99.0   99.0   99.0  0.0  \n",
              "602          NaN         99.5   99.5   99.5   99.5  NaN  \n",
              "\n",
              "[603 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-49e67036-3b21-4a63-8452-deb10dd9119e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead tr th {\n",
              "        text-align: left;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th>Type</th>\n",
              "      <th colspan=\"5\" halign=\"left\">Price</th>\n",
              "      <th colspan=\"4\" halign=\"left\">Rooms</th>\n",
              "      <th>...</th>\n",
              "      <th colspan=\"5\" halign=\"left\">Landsize</th>\n",
              "      <th colspan=\"5\" halign=\"left\">BuildingArea</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th>mean</th>\n",
              "      <th>median</th>\n",
              "      <th>min</th>\n",
              "      <th>max</th>\n",
              "      <th>std</th>\n",
              "      <th>mean</th>\n",
              "      <th>median</th>\n",
              "      <th>min</th>\n",
              "      <th>max</th>\n",
              "      <th>...</th>\n",
              "      <th>mean</th>\n",
              "      <th>median</th>\n",
              "      <th>min</th>\n",
              "      <th>max</th>\n",
              "      <th>std</th>\n",
              "      <th>mean</th>\n",
              "      <th>median</th>\n",
              "      <th>min</th>\n",
              "      <th>max</th>\n",
              "      <th>std</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>1.070999e+06</td>\n",
              "      <td>917000.0</td>\n",
              "      <td>85000.0</td>\n",
              "      <td>5800000.0</td>\n",
              "      <td>597784.427974</td>\n",
              "      <td>2.894419</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1</td>\n",
              "      <td>10</td>\n",
              "      <td>...</td>\n",
              "      <td>633.526202</td>\n",
              "      <td>478.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>433014.0</td>\n",
              "      <td>5685.271415</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.448853e+06</td>\n",
              "      <td>1205000.0</td>\n",
              "      <td>412500.0</td>\n",
              "      <td>3450000.0</td>\n",
              "      <td>909356.567935</td>\n",
              "      <td>3.529412</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>517.941176</td>\n",
              "      <td>542.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>1173.0</td>\n",
              "      <td>288.063029</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1.057176e+06</td>\n",
              "      <td>815000.0</td>\n",
              "      <td>342000.0</td>\n",
              "      <td>3812000.0</td>\n",
              "      <td>948821.171661</td>\n",
              "      <td>2.636364</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>460.545455</td>\n",
              "      <td>319.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1625.0</td>\n",
              "      <td>482.556601</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>10.0</td>\n",
              "      <td>5.700000e+05</td>\n",
              "      <td>570000.0</td>\n",
              "      <td>570000.0</td>\n",
              "      <td>570000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>100.0</td>\n",
              "      <td>8.429909e+05</td>\n",
              "      <td>783500.0</td>\n",
              "      <td>378000.0</td>\n",
              "      <td>3120000.0</td>\n",
              "      <td>371010.151559</td>\n",
              "      <td>2.568182</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>365.715909</td>\n",
              "      <td>263.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2835.0</td>\n",
              "      <td>401.818508</td>\n",
              "      <td>100.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598</th>\n",
              "      <td>97.0</td>\n",
              "      <td>9.030976e+05</td>\n",
              "      <td>860000.0</td>\n",
              "      <td>400000.0</td>\n",
              "      <td>1682000.0</td>\n",
              "      <td>294988.288317</td>\n",
              "      <td>2.487805</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>...</td>\n",
              "      <td>424.975610</td>\n",
              "      <td>421.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>941.0</td>\n",
              "      <td>262.356102</td>\n",
              "      <td>97.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599</th>\n",
              "      <td>98.0</td>\n",
              "      <td>8.405227e+05</td>\n",
              "      <td>802500.0</td>\n",
              "      <td>400000.0</td>\n",
              "      <td>1450000.0</td>\n",
              "      <td>258318.240597</td>\n",
              "      <td>2.500000</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>698.977273</td>\n",
              "      <td>258.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>15900.0</td>\n",
              "      <td>2366.029030</td>\n",
              "      <td>98.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>98.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>600</th>\n",
              "      <td>98.5</td>\n",
              "      <td>7.450000e+05</td>\n",
              "      <td>745000.0</td>\n",
              "      <td>745000.0</td>\n",
              "      <td>745000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>359.000000</td>\n",
              "      <td>359.0</td>\n",
              "      <td>359.0</td>\n",
              "      <td>359.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>98.5</td>\n",
              "      <td>98.5</td>\n",
              "      <td>98.5</td>\n",
              "      <td>98.5</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>601</th>\n",
              "      <td>99.0</td>\n",
              "      <td>8.007679e+05</td>\n",
              "      <td>773000.0</td>\n",
              "      <td>241000.0</td>\n",
              "      <td>1290000.0</td>\n",
              "      <td>287256.546911</td>\n",
              "      <td>2.392857</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>1053.714286</td>\n",
              "      <td>235.5</td>\n",
              "      <td>0.0</td>\n",
              "      <td>21715.0</td>\n",
              "      <td>4057.136792</td>\n",
              "      <td>99.0</td>\n",
              "      <td>99.0</td>\n",
              "      <td>99.0</td>\n",
              "      <td>99.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>602</th>\n",
              "      <td>99.5</td>\n",
              "      <td>8.850000e+05</td>\n",
              "      <td>885000.0</td>\n",
              "      <td>885000.0</td>\n",
              "      <td>885000.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>267.000000</td>\n",
              "      <td>267.0</td>\n",
              "      <td>267.0</td>\n",
              "      <td>267.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>99.5</td>\n",
              "      <td>99.5</td>\n",
              "      <td>99.5</td>\n",
              "      <td>99.5</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>603 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49e67036-3b21-4a63-8452-deb10dd9119e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-49e67036-3b21-4a63-8452-deb10dd9119e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-49e67036-3b21-4a63-8452-deb10dd9119e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5207a389-59ce-426c-b125-4e167ede93d9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5207a389-59ce-426c-b125-4e167ede93d9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5207a389-59ce-426c-b125-4e167ede93d9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_524ea1a0-407a-4152-ba3e-806c7f11bf09\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('grouped')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_524ea1a0-407a-4152-ba3e-806c7f11bf09 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('grouped');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "grouped"
            }
          },
          "metadata": {},
          "execution_count": 396
        }
      ],
      "source": [
        "grouped = melhous_data.groupby(\"Type\").agg({ 'Price':['mean','median','min','max','std'],\n",
        "                                     'Rooms':['mean','median','min','max','std'],\n",
        "                                     'Landsize':['mean','median','min','max','std'],\n",
        "                                     'BuildingArea':['mean','median','min','max','std']}).reset_index()\n",
        "grouped"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*There is statistics about the different variables like price,rooms, landsize and building area with the categorical variable 'type' which is now converted to integer column with 'astype', there is getting all the summary of statistics to do a gud comaparison and further analysis.*"
      ],
      "metadata": {
        "id": "a3lQThf2xPEg"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 397,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "tRENtDhVgD4I",
        "outputId": "bfb6c308-5b35-45e4-a561-6cdf6a7a2ab7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         count          mean            std       min       25%       50%  \\\n",
              "Method                                                                      \n",
              "PI      1564.0  1.133242e+06  730999.729516   85000.0  640000.0  932500.0   \n",
              "S       9022.0  1.087327e+06  613785.634739  185000.0  678000.0  925000.0   \n",
              "SA        92.0  1.025772e+06  547952.730240  240000.0  637375.0  872500.0   \n",
              "SP      1703.0  8.998924e+05  509987.899525  190000.0  550000.0  770000.0   \n",
              "VB      1199.0  1.166510e+06  805411.614931  160000.0  580000.0  940000.0   \n",
              "\n",
              "              75%        max  \n",
              "Method                        \n",
              "PI      1450000.0  9000000.0  \n",
              "S       1330000.0  7650000.0  \n",
              "SA      1283125.0  3225000.0  \n",
              "SP      1100000.0  5200000.0  \n",
              "VB      1550000.0  8000000.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d729e683-14b6-490b-ade9-fa2631c375ea\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Method</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>PI</th>\n",
              "      <td>1564.0</td>\n",
              "      <td>1.133242e+06</td>\n",
              "      <td>730999.729516</td>\n",
              "      <td>85000.0</td>\n",
              "      <td>640000.0</td>\n",
              "      <td>932500.0</td>\n",
              "      <td>1450000.0</td>\n",
              "      <td>9000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>S</th>\n",
              "      <td>9022.0</td>\n",
              "      <td>1.087327e+06</td>\n",
              "      <td>613785.634739</td>\n",
              "      <td>185000.0</td>\n",
              "      <td>678000.0</td>\n",
              "      <td>925000.0</td>\n",
              "      <td>1330000.0</td>\n",
              "      <td>7650000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SA</th>\n",
              "      <td>92.0</td>\n",
              "      <td>1.025772e+06</td>\n",
              "      <td>547952.730240</td>\n",
              "      <td>240000.0</td>\n",
              "      <td>637375.0</td>\n",
              "      <td>872500.0</td>\n",
              "      <td>1283125.0</td>\n",
              "      <td>3225000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SP</th>\n",
              "      <td>1703.0</td>\n",
              "      <td>8.998924e+05</td>\n",
              "      <td>509987.899525</td>\n",
              "      <td>190000.0</td>\n",
              "      <td>550000.0</td>\n",
              "      <td>770000.0</td>\n",
              "      <td>1100000.0</td>\n",
              "      <td>5200000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VB</th>\n",
              "      <td>1199.0</td>\n",
              "      <td>1.166510e+06</td>\n",
              "      <td>805411.614931</td>\n",
              "      <td>160000.0</td>\n",
              "      <td>580000.0</td>\n",
              "      <td>940000.0</td>\n",
              "      <td>1550000.0</td>\n",
              "      <td>8000000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d729e683-14b6-490b-ade9-fa2631c375ea')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d729e683-14b6-490b-ade9-fa2631c375ea button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d729e683-14b6-490b-ade9-fa2631c375ea');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-30973a8a-8234-49e7-b280-1b9ffd6c276f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-30973a8a-8234-49e7-b280-1b9ffd6c276f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-30973a8a-8234-49e7-b280-1b9ffd6c276f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_1293e20a-a193-4b4a-a8c7-faf4029ad77b\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('price_by_method')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1293e20a-a193-4b4a-a8c7-faf4029ad77b button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('price_by_method');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "price_by_method",
              "summary": "{\n  \"name\": \"price_by_method\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Method\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"S\",\n          \"VB\",\n          \"SA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3581.3954682497715,\n        \"min\": 92.0,\n        \"max\": 9022.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          9022.0,\n          1199.0,\n          92.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 105153.6550878192,\n        \"min\": 899892.4227833236,\n        \"max\": 1166510.4253544621,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1087327.1452006206,\n          1166510.4253544621,\n          1025771.7391304348\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 124189.11795779411,\n        \"min\": 509987.89952489355,\n        \"max\": 805411.614930845,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          613785.6347386796,\n          805411.614930845,\n          547952.7302397188\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56634.79495857648,\n        \"min\": 85000.0,\n        \"max\": 240000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          185000.0,\n          160000.0,\n          240000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51291.11155941154,\n        \"min\": 550000.0,\n        \"max\": 678000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          678000.0,\n          580000.0,\n          637375.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71094.1277462492,\n        \"min\": 770000.0,\n        \"max\": 940000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          925000.0,\n          940000.0,\n          872500.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 171099.61462551574,\n        \"min\": 1100000.0,\n        \"max\": 1550000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1330000.0,\n          1550000.0,\n          1283125.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2354357.6618687315,\n        \"min\": 3225000.0,\n        \"max\": 9000000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          7650000.0,\n          8000000.0,\n          3225000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 397
        }
      ],
      "source": [
        "#Are there differences in property prices based on 'Method' of sale or 'Regionname'? Grouping by Method of Sale or Region Name and Calculating Summary Statistics\n",
        "price_by_method= melhous_data.groupby(\"Method\")['Price'].describe()\n",
        "price_by_method"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 398,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 332
        },
        "id": "S2EcVyz8fufD",
        "outputId": "609bde3d-a12a-4349-e017-02f092b0f833"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                             count          mean            std       min  \\\n",
              "Regionname                                                                  \n",
              "Eastern Metropolitan        1471.0  1.104080e+06  467417.860272  288000.0   \n",
              "Eastern Victoria              53.0  6.999808e+05  165498.190135  400000.0   \n",
              "Northern Metropolitan       3890.0  8.981711e+05  443967.693818  145000.0   \n",
              "Northern Victoria             41.0  5.948293e+05  217761.670461  330000.0   \n",
              "South-Eastern Metropolitan   450.0  9.229438e+05  506525.336100  266000.0   \n",
              "Southern Metropolitan       4695.0  1.372963e+06  822529.158614  131000.0   \n",
              "Western Metropolitan        2948.0  8.664205e+05  394144.700287   85000.0   \n",
              "Western Victoria              32.0  3.975234e+05   86211.956532  280500.0   \n",
              "\n",
              "                                 25%        50%        75%        max  \n",
              "Regionname                                                             \n",
              "Eastern Metropolitan        775000.0  1010000.0  1329000.0  4000000.0  \n",
              "Eastern Victoria            608500.0   670000.0   780000.0  1085000.0  \n",
              "Northern Metropolitan       600000.0   806250.0  1100000.0  4525000.0  \n",
              "Northern Victoria           427500.0   540000.0   745000.0  1355000.0  \n",
              "South-Eastern Metropolitan  665000.0   850000.0  1067750.0  9000000.0  \n",
              "Southern Metropolitan       740000.0  1250000.0  1780000.0  8000000.0  \n",
              "Western Metropolitan        600000.0   793000.0  1030000.0  3900000.0  \n",
              "Western Victoria            339750.0   400000.0   427000.0   710000.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d6f2003a-cb31-48a4-94d6-f5a9e82afb21\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Regionname</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Eastern Metropolitan</th>\n",
              "      <td>1471.0</td>\n",
              "      <td>1.104080e+06</td>\n",
              "      <td>467417.860272</td>\n",
              "      <td>288000.0</td>\n",
              "      <td>775000.0</td>\n",
              "      <td>1010000.0</td>\n",
              "      <td>1329000.0</td>\n",
              "      <td>4000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Eastern Victoria</th>\n",
              "      <td>53.0</td>\n",
              "      <td>6.999808e+05</td>\n",
              "      <td>165498.190135</td>\n",
              "      <td>400000.0</td>\n",
              "      <td>608500.0</td>\n",
              "      <td>670000.0</td>\n",
              "      <td>780000.0</td>\n",
              "      <td>1085000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Northern Metropolitan</th>\n",
              "      <td>3890.0</td>\n",
              "      <td>8.981711e+05</td>\n",
              "      <td>443967.693818</td>\n",
              "      <td>145000.0</td>\n",
              "      <td>600000.0</td>\n",
              "      <td>806250.0</td>\n",
              "      <td>1100000.0</td>\n",
              "      <td>4525000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Northern Victoria</th>\n",
              "      <td>41.0</td>\n",
              "      <td>5.948293e+05</td>\n",
              "      <td>217761.670461</td>\n",
              "      <td>330000.0</td>\n",
              "      <td>427500.0</td>\n",
              "      <td>540000.0</td>\n",
              "      <td>745000.0</td>\n",
              "      <td>1355000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>South-Eastern Metropolitan</th>\n",
              "      <td>450.0</td>\n",
              "      <td>9.229438e+05</td>\n",
              "      <td>506525.336100</td>\n",
              "      <td>266000.0</td>\n",
              "      <td>665000.0</td>\n",
              "      <td>850000.0</td>\n",
              "      <td>1067750.0</td>\n",
              "      <td>9000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Southern Metropolitan</th>\n",
              "      <td>4695.0</td>\n",
              "      <td>1.372963e+06</td>\n",
              "      <td>822529.158614</td>\n",
              "      <td>131000.0</td>\n",
              "      <td>740000.0</td>\n",
              "      <td>1250000.0</td>\n",
              "      <td>1780000.0</td>\n",
              "      <td>8000000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Western Metropolitan</th>\n",
              "      <td>2948.0</td>\n",
              "      <td>8.664205e+05</td>\n",
              "      <td>394144.700287</td>\n",
              "      <td>85000.0</td>\n",
              "      <td>600000.0</td>\n",
              "      <td>793000.0</td>\n",
              "      <td>1030000.0</td>\n",
              "      <td>3900000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Western Victoria</th>\n",
              "      <td>32.0</td>\n",
              "      <td>3.975234e+05</td>\n",
              "      <td>86211.956532</td>\n",
              "      <td>280500.0</td>\n",
              "      <td>339750.0</td>\n",
              "      <td>400000.0</td>\n",
              "      <td>427000.0</td>\n",
              "      <td>710000.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6f2003a-cb31-48a4-94d6-f5a9e82afb21')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d6f2003a-cb31-48a4-94d6-f5a9e82afb21 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d6f2003a-cb31-48a4-94d6-f5a9e82afb21');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-af1170d4-c762-4f1d-915e-41b75eca1898\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-af1170d4-c762-4f1d-915e-41b75eca1898')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-af1170d4-c762-4f1d-915e-41b75eca1898 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_2fdd8eb1-8700-4c4b-9fe4-b6e1a61d58e9\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('price_by_region')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2fdd8eb1-8700-4c4b-9fe4-b6e1a61d58e9 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('price_by_region');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "price_by_region",
              "summary": "{\n  \"name\": \"price_by_region\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Regionname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Eastern Victoria\",\n          \"Southern Metropolitan\",\n          \"Eastern Metropolitan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1896.8256942285745,\n        \"min\": 32.0,\n        \"max\": 4695.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          53.0,\n          4695.0,\n          1471.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 301876.5269638737,\n        \"min\": 397523.4375,\n        \"max\": 1372963.3693290735,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          699980.7924528302,\n          1372963.3693290735,\n          1104079.6342624065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 233576.34072456224,\n        \"min\": 86211.95653210024,\n        \"max\": 822529.1586136597,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          165498.1901348121,\n          822529.1586136597,\n          467417.86027164815\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109052.71906612089,\n        \"min\": 85000.0,\n        \"max\": 400000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          400000.0,\n          131000.0,\n          288000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 147243.14424374982,\n        \"min\": 339750.0,\n        \"max\": 775000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          775000.0,\n          608500.0,\n          740000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 265349.6324763936,\n        \"min\": 400000.0,\n        \"max\": 1250000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          670000.0,\n          1250000.0,\n          1010000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 408046.93658371846,\n        \"min\": 427000.0,\n        \"max\": 1780000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          780000.0,\n          1780000.0,\n          1329000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3106712.7062677867,\n        \"min\": 710000.0,\n        \"max\": 9000000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1085000.0,\n          8000000.0,\n          4000000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 398
        }
      ],
      "source": [
        "price_by_region= melhous_data.groupby(\"Regionname\")['Price'].describe()\n",
        "price_by_region"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*There, we getting summary statistics about the 'method' with price and 'regionname' with price.The price_by_method DataFrame provides a comprehensive summary of the price distributions for different sales methods. For each method, it shows the count of observations, mean price, standard deviation, and percentiles (minimum, 25th, 50th, 75th, and maximum prices). This allows you to compare how prices vary depending on the sales method, providing insights into the effectiveness or characteristics of different selling strategies.The price_by_region DataFrame provides a comprehensive summary of the price distributions for different regions. For each region, it shows the count of observations, mean price, standard deviation, and percentiles (minimum, 25th, 50th, 75th, and maximum prices). This allows you to compare how prices vary depending on the region, providing insights into regional price trends and distributions. *italicized text* *italicized text* *italicized text*"
      ],
      "metadata": {
        "id": "O3CXlu4-y_VL"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j8XPMvIsmuAU"
      },
      "source": [
        "**Create histograms or box plots to visualize the distribution of numerical variables. Create bar plots or count plots to visualize the distribution of categorical variables. Plot scatter plots to visualize relationships between numerical variables like 'Price' and 'Rooms'. Comparative Analysis:**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 401,
      "metadata": {
        "id": "L6FDdfaWIrGW"
      },
      "outputs": [],
      "source": [
        "#melhous_data['Bin'] = pd.cut(melhous_data['Price'], bins=3)\n",
        "#melhous_data['Bin'] = pd.cut(melhous_data['Longtitude'], bins=3)\n",
        "#melhous_data['Bin'] = pd.cut(melhous_data['Lattitude'], bins=3)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 402,
      "metadata": {
        "id": "IpoGv7gccwQZ"
      },
      "outputs": [],
      "source": [
        "#fig, axis = plt.subplots(nrows=3, ncols=2, figsize=(20, 12))\n",
        "#fig.subplots_adjust(top=1.2)\n",
        "#sns.countplot(data=melhous_data, x=\"Price\", ax=axis[0,0])\n",
        "#sns.countplot(data=melhous_data, x=\"Longtitude\", ax=axis[2,0])\n",
        "#sns.countplot(data=melhous_data, x=\"Lattitude\", ax=axis[2,1])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 403,
      "metadata": {
        "id": "EXDie5yq7EcH"
      },
      "outputs": [],
      "source": [
        "#fig, axis = plt.subplots(nrows=3, ncols=2, figsize=(10, 10))\n",
        "#fig.subplots_adjust(top=1.2)\n",
        "\n",
        "#sns.distplot(melhous_data['Price'], kde=True, ax=axis[0,0])\n",
        "#sns.distplot(melhous_data['Distance'], kde=True, ax=axis[0,1])\n",
        "#sns.distplot(melhous_data['Rooms'], kde=True, ax=axis[1,0])\n",
        "#sns.distplot(melhous_data['Bedroom2'], kde=True, ax=axis[1,1])\n",
        "#sns.distplot(melhous_data['Bathroom'], kde=True, ax=axis[2,0])\n",
        "#sns.distplot(melhous_data['Car'], kde=True, ax=axis[2,1])\n",
        "#sns.distplot(melhous_data['Landsize'], kde=True, ax=axis[2,1])\n",
        "#sns.distplot(melhous_data['BuildingArea'], kde=True, ax=axis[2,1])\n",
        "#sns.distplot(melhous_data['YearBuilt'], kde=True, ax=axis[2,1])\n",
        "#sns.distplot(melhous_data['Lattitude'], kde=True, ax=axis[2,1])\n",
        "#sns.distplot(melhous_data['Longtitude'], kde=True, ax=axis[2,1])\n",
        "#plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 404,
      "metadata": {
        "id": "FJU5qIw0jCEh"
      },
      "outputs": [],
      "source": [
        "#import matplotlib.pyplot as plt\n",
        "\n",
        "#fig, axis = plt.subplots(nrows=3, ncols=2, figsize=(10, 10))\n",
        "#fig.subplots_adjust(top=1.2)\n",
        "\n",
        "#sns.distplot(melhous_data['Price'], kde=True, ax=axis[0,0],color='blue')\n",
        "#sns.distplot(melhous_data['Distance'], kde=True, ax=axis[0,1],color='blue')\n",
        "#sns.distplot(melhous_data['Rooms'], kde=True, ax=axis[1,0],color='red')\n",
        "#sns.distplot(melhous_data['Bedroom2'], kde=True, ax=axis[1,1],color='red')\n",
        "#sns.distplot(melhous_data['Bathroom'], kde=True, ax=axis[2,0],color='green')\n",
        "#sns.distplot(melhous_data['Car'], kde=True, ax=axis[2,1],color='green')\n",
        "#sns.distplot(melhous_data['Landsize'], kde=True, ax=axis[2,1],color='blue')\n",
        "#sns.distplot(melhous_data['BuildingArea'], kde=True, ax=axis[2,1],color='blue')\n",
        "#sns.distplot(melhous_data['YearBuilt'], kde=True, ax=axis[2,1],color='skyblue')\n",
        "#sns.distplot(melhous_data['Lattitude'], kde=True, ax=axis[2,1],color='purple')\n",
        "#sns.distplot(melhous_data['Longtitude'], kde=True, ax=axis[2,1],color='green')\n",
        "#plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "hD3S1Zem0xat"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "fig, axis = plt.subplots(nrows=3, ncols=2, figsize=(10, 10))\n",
        "fig.subplots_adjust(top=1.2)\n",
        "\n",
        "sns.distplot(melhous_data['Price'], kde=True, ax=axis[0,0],color='orange')\n",
        "sns.distplot(melhous_data['Distance'], kde=True, ax=axis[0,1],color='orange')\n",
        "sns.distplot(melhous_data['Rooms'], kde=True, ax=axis[1,0],color='red')\n",
        "sns.distplot(melhous_data['Bedroom2'], kde=True, ax=axis[1,1],color='red')\n",
        "sns.distplot(melhous_data['Bathroom'], kde=True, ax=axis[2,0],color='green')\n",
        "sns.distplot(melhous_data['Car'], kde=True, ax=axis[2,1],color='green')\n",
        "sns.distplot(melhous_data['Landsize'], kde=True, ax=axis[2,1],color='blue')\n",
        "sns.distplot(melhous_data['BuildingArea'], kde=True, ax=axis[2,1],color='blue')\n",
        "sns.distplot(melhous_data['YearBuilt'], kde=True, ax=axis[2,1],color='skyblue')\n",
        "sns.distplot(melhous_data['Lattitude'], kde=True, ax=axis[2,1],color='purple')\n",
        "sns.distplot(melhous_data['Longtitude'], kde=True, ax=axis[2,1],color='green')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "znubFpYmEQOH",
        "outputId": "cd4dcee9-6bf7-4bd2-a8e4-112f4eb95328"
      },
      "execution_count": 405,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UWiN1yXmswba"
      },
      "source": [
        "1.Each variable has its own subplot, preventing overlap.\n",
        "\n",
        "2.The grid now has 6 rows and 2 columns, accommodating all variables without overlap.\n",
        "\n",
        "3.An empty subplot is hidden to maintain a clean layout.\n",
        "4.All the variables with their maximum frequency and high density values in the data.\n",
        "Right-Skewed Distribution: Characterized by a long tail on the right side.\n",
        "Central Tendency: The mean is greater than the median.\n",
        "Interpretation: Indicates that while most data points are lower, there are a few high values extending the tail to the right.\n",
        "Data Distribution: In a right-skewed distribution, most data points are concentrated on the lower end, with fewer observations on the higher end.\n",
        "Mean vs. Median: Because the mean is influenced by the extreme values in the tail, it is higher than the median in a right-skewed distribution,which is price variable,however, distance variable plot has extra strech or bars or above the Kde line, so it defines there is outliers in the data.\n",
        "4.Price and Distance have longer tail to the right, so it defines extreme values in the tail, it is higher than the median in a right-skewed distribution..The median might be preferred over the mean as a measure of central tendency in right-skewed distributions.\n",
        "5.others some variables are normally distributed, some have outliers at well.\n",
        "6.The bulk of the data (most frequent values) is on the left.\n",
        "The tail extends to the right, indicating fewer higher-value observations. *italicized text*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 406,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        },
        "id": "CzSTBFdAsxFS",
        "outputId": "9ed5c707-d86b-4f4d-acb9-36aa6c4ab77d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(data=melhous_data['Car'], kde=True, color='lightskyblue')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*A histogram where the x-axis represents the number of cars (e.g., 0, 1, 2, 3, 4) and the y-axis represents the count of properties that have that many cars, a high peak at a specific number of cars (e.g., 2), it means that most properties have that many cars. The most common values between (14000 to 16000) somewhere , around above 15000 properties have 2 cars and how the values are spread across different counts.*"
      ],
      "metadata": {
        "id": "2ALY6neK1seH"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 407,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        },
        "id": "F5caVTBJlfw9",
        "outputId": "2b2cc533-8d64-468d-eae8-1fc8f5d267ba"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(data=melhous_data['Lattitude'], kde=True, color='orange')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*This plot is showing the peak of the KDE curve indicates the most common latitude value.It Shows the frequency distribution of the latitude values , the highest frequency is above 600 for -37 lattitude range,By analyzing this plot, we can understand how the latitude values are distributed there and identify the most common latitude ranges, and observe the overall spread and density of the data.*"
      ],
      "metadata": {
        "id": "OQr-q-2X2sWh"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 408,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        },
        "id": "vSiUeVCItTjs",
        "outputId": "360f398e-f673-44bf-b93b-bd43d6a84f9d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "sns.displot(data=melhous_data['Landsize'], kde=True, color='red')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I7M61Bi4ubbi"
      },
      "source": [
        "*From above the displot, where the x-axis represents the land size values and the y-axis represents the count of properties with those land sizes,bars show how many properties have specific land size values.The x-axis represents the values of the Landsize column in your melhous_data Data. Each tick on the x-axis corresponds to a range of land size values.If the x-axis starts at 0, it means that the smallest land size value represented in the plot is 0. This could be due to properties having zero land size recorded or the binning in the histogram starting at 0, so the minimum landsize starts from zero has high density of properties with that specific landsize.his plot helps you understand how land sizes are distributed among properties in your dataset, highlighting common sizes and the overall distribution shape.*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vibgo99Aui3f"
      },
      "source": [
        "#COUNTPLOT"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 409,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 938
        },
        "id": "ArBy7dHjtTmn",
        "outputId": "de18d13a-7a49-4e39-f45c-9a11468c50be"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1200 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "fig, axis = plt.subplots(nrows=3, ncols=2, figsize=(20, 12))\n",
        "fig.subplots_adjust(top=1.2)\n",
        "\n",
        "sns.countplot(data=melhous_data, x=\"Price\", ax=axis[0,0])\n",
        "sns.countplot(data=melhous_data, x=\"Distance\", ax=axis[0,1])\n",
        "sns.countplot(data=melhous_data, x=\"Bedroom2\", ax=axis[1,0])\n",
        "sns.countplot(data=melhous_data, x=\"Bathroom\", ax=axis[1,1])\n",
        "sns.countplot(data=melhous_data, x=\"Lattitude\", ax=axis[2,0])\n",
        "sns.countplot(data=melhous_data, x=\"Longtitude\", ax=axis[2,1])\n",
        "sns.countplot(data=melhous_data, x=\"Car\", ax=axis[0,0])\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oTKq8HRHucT8"
      },
      "source": [
        "*Above plots gives us count of each variables of data, this clears the vision about the data.*"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 410,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 167
        },
        "id": "ohpIxwU8s69I",
        "outputId": "b6b9abc6-a146-4c82-fcca-44af883868e0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Suburb  Rooms  Type      Price Method SellerG       Date  Distance  \\\n",
              "0  Abbotsford      2     0  1480000.0      S  Biggin  3/12/2016       2.5   \n",
              "1  Abbotsford      2  79.0  1035000.0      S  Biggin  4/02/2016       2.5   \n",
              "\n",
              "   Bedroom2  Bathroom  Car  Landsize BuildingArea YearBuilt CouncilArea  \\\n",
              "0       2.0       1.0  1.0     202.0            0         0       Yarra   \n",
              "1       2.0       1.0  0.0     156.0         79.0    1900.0       Yarra   \n",
              "\n",
              "   Lattitude  Longtitude             Regionname  price_per_sqm  \n",
              "0   -37.7996    144.9984  Northern Metropolitan    7326.732673  \n",
              "1   -37.8079    144.9934  Northern Metropolitan    6634.615385  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d2ee2e3f-d337-475c-8d4a-e2f213c562bb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Suburb</th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Type</th>\n",
              "      <th>Price</th>\n",
              "      <th>Method</th>\n",
              "      <th>SellerG</th>\n",
              "      <th>Date</th>\n",
              "      <th>Distance</th>\n",
              "      <th>Bedroom2</th>\n",
              "      <th>Bathroom</th>\n",
              "      <th>Car</th>\n",
              "      <th>Landsize</th>\n",
              "      <th>BuildingArea</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>CouncilArea</th>\n",
              "      <th>Lattitude</th>\n",
              "      <th>Longtitude</th>\n",
              "      <th>Regionname</th>\n",
              "      <th>price_per_sqm</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1480000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>3/12/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>202.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.7996</td>\n",
              "      <td>144.9984</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>7326.732673</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>2</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1035000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>4/02/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>156.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1900.0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.8079</td>\n",
              "      <td>144.9934</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>6634.615385</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d2ee2e3f-d337-475c-8d4a-e2f213c562bb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d2ee2e3f-d337-475c-8d4a-e2f213c562bb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d2ee2e3f-d337-475c-8d4a-e2f213c562bb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e7cab801-3ca0-4d89-8b13-5d303dfcdd33\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e7cab801-3ca0-4d89-8b13-5d303dfcdd33')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e7cab801-3ca0-4d89-8b13-5d303dfcdd33 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "melhous_data",
              "repr_error": "Out of range float values are not JSON compliant: inf"
            }
          },
          "metadata": {},
          "execution_count": 410
        }
      ],
      "source": [
        "melhous_data.head(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 411,
      "metadata": {
        "id": "VvfK58Zj9XJ1"
      },
      "outputs": [],
      "source": [
        "#fig, axis = plt.subplots(nrows=3, ncols=2, figsize=(20, 12))\n",
        "#fig.subplots_adjust(top=1.2)\n",
        "#sns.countplot(data=melhous_data, x=\"Price\", ax=axis[0,0])\n",
        "#sns.countplot(data=melhous_data, x=\"Distance\", ax=axis[0,1])\n",
        "#sns.countplot(data=melhous_data, x=\"Rooms\", ax=axis[1,0])\n",
        "#sns.countplot(data=melhous_data, x=\"Bathroom\", ax=axis[1,1])\n",
        "#sns.countplot(data=melhous_data, x=\"Longtitude\", ax=axis[2,0])\n",
        "#sns.countplot(data=melhous_data, x=\"Lattitude\", ax=axis[2,1])\n",
        "#sns.countplot(data=melhous_data, x=\"Bedroom2\", ax=axis[2,1])\n",
        "#sns.countplot(data=melhous_data, x=\"Car\", ax=axis[2,1])\n",
        "#plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 412,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 493
        },
        "id": "gi1atrx0E_NU",
        "outputId": "6360de43-1be1-47a5-efb6-6f030cd3631e"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 3000x1200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(30, 12))\n",
        "melhous_data['Price_bin'] = pd.cut(melhous_data['Price'], bins=10)\n",
        "sns.countplot(data=melhous_data, x='Price_bin', palette='pastel')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*It is the count plot of price , which is break down into bins and then make count on countplot with the particular given variable (Price).\n",
        "The count plot displays the frequency of observations in each price bin.\n",
        "Each bar represents the count of observations falling within the corresponding price range bin.\n",
        "The x-axis shows the price bins, and the y-axis represents the count of observations.\n",
        "This count plot is to visualize the distribution of prices in the melhous_data DataFrame after binning them into 10 equal-width bins. This plot allows for easy understanding of how prices are distributed across different price ranges. Adjusting the figure size ensures better visibility of the plot.* *italicized text*"
      ],
      "metadata": {
        "id": "le7uXZrtfi95"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 413,
      "metadata": {
        "id": "TUcqJKnsFMpf"
      },
      "outputs": [],
      "source": [
        "#plt.figure(figsize=(10, 6))  # Adjust the figure size\n",
        "#sns.countplot(data=melhous_data, x='Price_bin', palette='viridis')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 414,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 493
        },
        "id": "LHgKEbICFMsU",
        "outputId": "5367303e-8a75-4f86-8d12-0aefd817979d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 3000x1200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(30, 12))\n",
        "melhous_data['longi_bin'] = pd.cut(melhous_data['Longtitude'], bins=5)\n",
        "sns.countplot(data=melhous_data, x='Price_bin',palette='pastel')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*This code now creates a count plot based on the binned longitudes ('longi_bin').\n",
        "Each bar represents the count of observations falling within the corresponding longitude bin.\n",
        "The x-axis shows the longitude bins, and the y-axis represents the count of observations.\n",
        "This count plot to visualize the distribution of observations based on binned longitude values in the melhous_data Data,by using countplot we make it easy to understand how observations are distributed across different longitude ranges. *italicized text*"
      ],
      "metadata": {
        "id": "kbRUkrwXgj_h"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 415,
      "metadata": {
        "id": "LU4E_ZWaGRpi"
      },
      "outputs": [],
      "source": [
        "#plt.figure(figsize=(10, 6))  # Adjust the figure size\n",
        "#sns.countplot(data=melhous_data, x='longi_bin', palette='viridis')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 416,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 493
        },
        "id": "YZ0nNjCFE_QA",
        "outputId": "eb87fced-b6e1-4f7d-a89a-492c77fe3d93"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 3000x1200 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAACXQAAAPkCAYAAAADWSR8AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAClEklEQVR4nOzdfZTXdZ3//8dcMCwQHy48Shm6MngkUwjaVuA7OPtF2wgsa1vc0MIy1rTjRZC2JmlaeVb0aLpei1EnL/aYF22lzpqXJ7TIXY8cXdMkGUqsRDvgDAIGzMz3D398fk6jLQ6M81Jut3M8MO/38/36vN6e+fzF/bzfNV1dXV0BAAAAAAAAAACg39X29wYAAAAAAAAAAAB4haALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAAChEfX9v4O2oq6srnZ1d/b0NAAAAAAAAAACgALW1NampqdmuWUFXH+js7MratRv6exsAAAAAAAAAAEABRo4ckrq67Qu6vHIRAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBD1/b0B3rja2prU1tb09zagT3V2dqWzs6u/twEAAAAAAAAA8KYSdL3F1NbWZMSIIYIu3vY6O7uybt0GURcAAAAAAAAAsEsRdL3FbHs610Mr27N+U0d/bwf6xNBBdZk8tpLa2hpBFwAAAAAAAACwSxF0vUWt39SRFzdu7e9tAAAAAAAAAAAAO1Ftf28AAAAAAAAAAACAVwi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKUVTQNXfu3IwbN+41/7vjjjuqczfffHNmzJiR8ePH5/DDD8/999/fY63169dn4cKFOeiggzJp0qScfPLJef7553vMPfLII/nkJz+ZCRMmZPr06Vm8eHG6urr69D4BAAAAAAAAAABeS31/b+DVzjrrrLz00kvdjn3ve9/LXXfdlalTpyZJ7rjjjpx55pk5/vjjM2XKlLS0tOTEE0/MDTfckIkTJ1avmz9/fp5++umcffbZGThwYC6++OIce+yxufXWW1Nf/8pt//a3v828efPS1NSU+fPn56mnnsoFF1yQurq6zJs37027bwAAAAAAAAAAgKSwoGvfffftceyUU05JU1NTRo4cmSS55JJLcthhh2X+/PlJkilTpmTFihW5/PLLc8011yRJli9fngcffDBLlizJtGnTkiRjxozJrFmzctddd2XWrFlJkiVLlmTEiBH51re+lYaGhkydOjVr167NVVddlblz56ahoeFNuGsAAAAAAAAAAIBXFPXKxT/3yCOP5Nlnn81HP/rRJMnq1avzm9/8JjNnzuw2N2vWrCxbtiybN29OkixdujSVSiVNTU3VmcbGxuy///5ZunRp9djSpUtz6KGHdgu3Zs2alfb29ixfvrwvbw0AAAAAAAAAAKCHooOu22+/PYMHD86hhx6aJGltbU3yytO2Xm3s2LHZsmVLVq9eXZ0bM2ZMampqus01NjZW19i4cWP+8Ic/pLGxscdMTU1NdQ4AAAAAAAAAAODNUtQrF19t69at+c///M8ccsghGTx4cJKkra0tSVKpVLrNbvt52/n29vYMHTq0x5rDhg3L448/niRZv379a67V0NCQQYMGVdfqrfr6vmnl6uqKbvBgp/L7DgAAAAAAAADsaooNun72s59l7dq1+chHPtLfW3nDamtrMmLEkP7eBrzlVSqD+nsLAAAAAAAAAABvqmKDrttvvz3Dhw/PtGnTqseGDRuW5JWna+2+++7V4+3t7d3OVyqVPPfccz3WbGtrq85se4LXtid1bbN58+Zs2rSpOtcbnZ1daW/f2Ovr/5K6ulqRC7uM9vZN6ejo7O9tAAAAAAAAAADskEpl0Ha/qazIoOvll1/OPffck8MPPzwDBgyoHm9sbEyStLa2Vv++7ecBAwZkr732qs4tW7YsXV1dqampqc6tWrUq++23X5Jk8ODBede73pXW1tZun71q1ap0dXV1W783tm4VocCO6ujo9F0CAAAAAAAAAHYp25d9vcnuu+++bNy4MR/96Ee7Hd9rr72yzz775M477+x2vKWlJVOnTk1DQ0OSpLm5OW1tbVm2bFl1ZtWqVXniiSfS3NxcPdbc3Jx77703W7Zs6bZWpVLJpEmT+uLWAAAAAAAAAAAAXleRT+i67bbbsueee+Zv/uZvepw76aSTcuqpp2bvvffO5MmT09LSksceeyzXX399dWbSpEmZNm1aFi5cmNNOOy0DBw7MRRddlHHjxuVDH/pQdW7evHm57bbbcsopp+TII4/MihUrsmTJkixYsKAahwEAAAAAAAAAALxZarq6urr6exOv1tbWlqampnzmM5/Jl7/85decufnmm3PNNdfk97//fcaMGZMvfelLmT59ereZ9evX59xzz83dd9+drVu3Ztq0aTnjjDMyatSobnOPPPJIFi1alCeffDIjR47Mpz71qRx77LHdXtX4RnV0dGbt2g29vv4vqa+vzYgRQ3LP4+vy4satffIZ0N+GD67PBw8ckXXrNnjlIgAAAAAAAADwljdy5JDU1W3fyxSLC7reDgRdsGMEXQAAAAAAAADA28kbCbq2bwoAAAAAAAAAAIA+J+gCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBBFBl3/8R//kY9//OMZP358Jk+enH/+53/Oyy+/XD1/33335fDDD8/48eMzY8aM3HrrrT3W2Lx5c84777w0NTVl4sSJOeaYY9La2tpjbuXKlTnmmGMyceLENDU15fzzz8/mzZv79P4AAAAAAAAAAABeS31/b+DPXXnllbnmmmty/PHHZ+LEiVm3bl2WLVuWjo6OJMnDDz+cE088MbNnz87ChQvzi1/8Il/96lczZMiQfPjDH66uc84556SlpSVf+cpXMmrUqFx11VX57Gc/mzvuuCNDhw5NkrS1teUzn/lM9tlnn1x66aVZs2ZNFi1alJdffjlf+9rX+uX+AQAAAAAAAACAXVdRQVdra2suu+yyXHHFFfm7v/u76vEZM2ZU/37llVdmwoQJ+cY3vpEkmTJlSlavXp1LLrmkGnQ999xzueWWW3LWWWdl9uzZSZLx48dn+vTpufHGG3PssccmSW688cZs2LAhl112WYYPH54k6ejoyNe//vUcd9xxGTVq1Jtx2wAAAAAAAAAAAEkKe+XiD37wg4wePbpbzPVqmzdvzkMPPdTtSVxJMmvWrKxcuTLPPvtskuTBBx9MZ2dnt7nhw4enqakpS5curR5bunRppk6dWo25kmTmzJnp7OzMz372s514ZwAAAAAAAAAAAP+7ooKuRx99NPvtt1+uuOKKTJ06NQceeGDmzJmTRx99NEnyzDPPZMuWLWlsbOx23dixY5O88oSvbX/utttuGTZsWI+5bTPb5v58rUqlkt13373bHAAAAAAAAAAAwJuhqFcuvvDCC3n88cezYsWKnHXWWRk0aFCuuuqqfO5zn8tdd92Vtra2JK9EV6+27edt59vb2zN06NAe61cqlerMtrk/XytJhg0b1m2uN+rr+6aVq6srqsGDPuX3HQAAAAAAAADY1RQVdHV1dWXjxo35t3/7t7znPe9Jkrzvfe/LIYcckuuvvz7Tpk3r5x1un9ramowYMaS/twFveZXKoP7eAgAAAAAAAADAm6qooKtSqWT48OHVmCtJhg8fnve+9715+umnc9hhhyVJ1q9f3+269vb2JKm+YrFSqeSll17qsX57e3u31zBWKpUeayWvPOnrz1/X+EZ0dnalvX1jr6//S+rqakUu7DLa2zelo6Ozv7cBAAAAAAAAALBDKpVB2/2msqKCrn333TfPPPPMa57705/+lL333jsDBgxIa2trDj744Oq51tbWJEljY2P1zz/+8Y89wqzW1tbqzLa5bddus379+rzwwgvd5npj61YRCuyojo5O3yUAAAAAAAAAYJeyfdnXm2T69Ol58cUX8+STT1aPrVu3Lr/85S9zwAEHpKGhIZMnT85PfvKTbte1tLRk7NixGT16dJJk2rRpqa2tzV133VWdaWtry4MPPpjm5ubqsebm5vz85z+vPuErSe68887U1tamqampr24TAAAAAAAAAADgNRX1hK4PfvCDGT9+fE4++eQsWLAgAwcOzOLFi9PQ0JCjjjoqSfKFL3whRx99dM4+++zMnDkzDz30UG6//fZcdNFF1XXe+c53Zvbs2Tn//PNTW1ubUaNG5eqrr87QoUMzZ86c6tycOXNy3XXX5YQTTshxxx2XNWvW5Pzzz8+cOXMyatSoN/3+AQAAAAAAAACAXVtNV1dXV39v4tXWrl2bc889N/fff3+2bNmSD3zgAzn99NOz7777VmfuvffeXHzxxVm1alX23HPPfP7zn8/s2bO7rbN58+ZcdNFF+dGPfpQNGzbk/e9/f84444yMHTu229zKlSvzzW9+M8uXL8+QIUPysY99LAsWLEhDQ0Ov76GjozNr127o9fV/SX19bUaMGJJ7Hl+XFzdu7ZPPgP42fHB9PnjgiKxbt8ErFwEAAAAAAACAt7yRI4ekrm77XqZYXND1diDogh0j6AIAAAAAAAAA3k7eSNC1fVMAAAAAAAAAAAD0OUEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUQdAEAAAAAAAAAABRC0AUAAAAAAAAAAFAIQRcAAAAAAAAAAEAhBF0AAAAAAAAAAACFEHQBAAAAAAAAAAAUQtAFAAAAAAAAAABQCEEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUQdAEAAAAAAAAAABRC0AUAAAAAAAAAAFAIQRcAAAAAAAAAAEAhBF0AAAAAAAAAAACFEHQBAAAAAAAAAAAUQtAFAAAAAAAAAABQCEEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUQdAEAAAAAAAAAABRC0AUAAAAAAAAAAFAIQRcAAAAAAAAAAEAhBF0AAAAAAAAAAACFEHQBAAAAAAAAAAAUQtAFAAAAAAAAAABQCEEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUQdAEAAAAAAAAAABRC0AUAAAAAAAAAAFAIQRcAAAAAAAAAAEAhBF0AAAAAAAAAAACFEHQBAAAAAAAAAAAUQtAFAAAAAAAAAABQCEEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUQdAEAAAAAAAAAABRC0AUAAAAAAAAAAFAIQRcAAAAAAAAAAEAhBF0AAAAAAAAAAACFEHQBAAAAAAAAAAAUQtAFAAAAAAAAAABQCEEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUQdAEAAAAAAAAAABRC0AUAAAAAAAAAAFAIQRcAAAAAAAAAAEAhBF0AAAAAAAAAAACFEHQBAAAAAAAAAAAUQtAFAAAAAAAAAABQCEEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUQdAEAAAAAAAAAABRC0AUAAAAAAAAAAFAIQRcAAAAAAAAAAEAhBF0AAAAAAAAAAACFEHQBAAAAAAAAAAAUQtAFAAAAAAAAAABQCEEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUQdAEAAAAAAAAAABRC0AUAAAAAAAAAAFAIQRcAAAAAAAAAAEAhBF0AAAAAAAAAAACFEHQBAAAAAAAAAAAUQtAFAAAAAAAAAABQCEEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUoKuj6wQ9+kHHjxvX474ILLug2d/PNN2fGjBkZP358Dj/88Nx///091lq/fn0WLlyYgw46KJMmTcrJJ5+c559/vsfcI488kk9+8pOZMGFCpk+fnsWLF6erq6vP7hEAAAAAAAAAAOD11Pf3Bl7Lt7/97QwdOrT686hRo6p/v+OOO3LmmWfm+OOPz5QpU9LS0pITTzwxN9xwQyZOnFidmz9/fp5++umcffbZGThwYC6++OIce+yxufXWW1Nf/8pt//a3v828efPS1NSU+fPn56mnnsoFF1yQurq6zJs37027XwAAAAAAAAAAgKTQoOuAAw7IyJEjX/PcJZdcksMOOyzz589PkkyZMiUrVqzI5ZdfnmuuuSZJsnz58jz44INZsmRJpk2bliQZM2ZMZs2albvuuiuzZs1KkixZsiQjRozIt771rTQ0NGTq1KlZu3ZtrrrqqsydOzcNDQ19f7MAAAAAAAAAAAD/n6Jeufi/Wb16dX7zm99k5syZ3Y7PmjUry5Yty+bNm5MkS5cuTaVSSVNTU3WmsbEx+++/f5YuXVo9tnTp0hx66KHdwq1Zs2alvb09y5cv7+O7AQAAAAAAAAAA6K7IoOsjH/lI9t9//xx66KG5+uqr09HRkSRpbW1N8srTtl5t7Nix2bJlS1avXl2dGzNmTGpqarrNNTY2VtfYuHFj/vCHP6SxsbHHTE1NTXUOAAAAAAAAAADgzVLUKxd33333nHTSSXnf+96Xmpqa3Hfffbn44ouzZs2afO1rX0tbW1uSpFKpdLtu28/bzre3t2fo0KE91h82bFgef/zxJMn69etfc62GhoYMGjSoulZv1df3TStXV1dkgwd9wu87AAAAAAAAALCrKSroOvjgg3PwwQdXf542bVoGDhyY733vezn++OP7cWdvTG1tTUaMGNLf24C3vEplUH9vAQAAAAAAAADgTVVU0PVaZs6cme985zt58sknM2zYsCSvPF1r9913r860t7cnSfV8pVLJc88912Ottra26sy2J3hte1LXNps3b86mTZuqc73R2dmV9vaNvb7+L6mrqxW5sMtob9+Ujo7O/t4GAAAAAAAAAMAOqVQGbfebyooPul6tsbExSdLa2lr9+7afBwwYkL322qs6t2zZsnR1daWmpqY6t2rVquy3335JksGDB+dd73pXWltbu33GqlWr0tXV1W393ti6VYQCO6qjo9N3CQAAAAAAAADYpWxf9tWPWlpaUldXl/e+973Za6+9ss8+++TOO+/sMTN16tQ0NDQkSZqbm9PW1pZly5ZVZ1atWpUnnngizc3N1WPNzc259957s2XLlm5rVSqVTJo0qY/vDAAAAAAAAAAAoLuintA1b968TJ48OePGjUuS3Hvvvbnpppty9NFHV1+xeNJJJ+XUU0/N3nvvncmTJ6elpSWPPfZYrr/++uo6kyZNyrRp07Jw4cKcdtppGThwYC666KKMGzcuH/rQh7p93m233ZZTTjklRx55ZFasWJElS5ZkwYIF1TgMAAAAAAAAAADgzVLT1dXV1d+b2Oacc87JAw88kOeeey6dnZ3ZZ599csQRR2Tu3LndXp14880355prrsnvf//7jBkzJl/60pcyffr0bmutX78+5557bu6+++5s3bo106ZNyxlnnJFRo0Z1m3vkkUeyaNGiPPnkkxk5cmQ+9alP5dhjj+32eW9UR0dn1q7d0Ovr/5L6+tqMGDEk9zy+Li9u3NonnwH9bfjg+nzwwBFZt26DVy4CAAAAAAAAAG95I0cOSV3d9r1Msaig6+1C0AU7RtAFAAAAAAAAALydvJGga/umAAAAAAAAAAAA6HOCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAAChEfX9vAODtpLa2JrW1Nf29DehTnZ1d6ezs6u9tAAAAAAAAALwtCboAdpLa2pqMHDE4NbUefsjbW1dnZ9au2yjqAgAAAAAAAOgDgi6AnaS2tiY1tbXZ8OhP0rlhXX9vB/pE7ZARGfK+GamtrRF0AQAAAAAAAPQBQRfATta5YV062l/o720AAAAAAAAAAG9B3gsGAAAAAAAAAABQCEEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUQdAEAAAAAAAAAABRC0AUAAAAAAAAAAFAIQRcAAAAAAAAAAEAhBF0AAAAAAAAAAACFEHQBAAAAAAAAAAAUQtAFAAAAAAAAAABQCEEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUQdAEAAAAAAAAAABRC0AUAAAAAAAAAAFAIQRcAAAAAAAAAAEAhBF0AAAAAAAAAAACFEHQBAAAAAAAAAAAUQtAFAAAAAAAAAABQCEEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUQdAEAAAAAAAAAABRC0AUAAAAAAAAAAFAIQRcAAAAAAAAAAEAhBF0AAAAAAAAAAACFEHQBAAAAAAAAAAAUQtAFAAAAAAAAAABQCEEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUQdAEAAAAAAAAAABRC0AUAAAAAAAAAAFAIQRcAAAAAAAAAAEAhBF0AAAAAAAAAAACFEHQBAAAAAAAAAAAUQtAFAAAAAAAAAABQCEEXAAAAAAAAAABAIQRdAAAAAAAAAAAAhRB0AQAAAAAAAAAAFELQBQAAAAAAAAAAUAhBFwAAAAAAAAAAQCEEXQAAAAAAAAAAAIUQdAEAAAAAAAAAABRC0AUAAAAAAAAAAFAIQRcAAAAAAAAAAEAheh10/fCHP8yzzz77uuefffbZ/PCHP+zt8gAAAAAAAAAAALucXgddp59+epYvX/665x977LGcfvrpvV0eAAAAAAAAAABgl9ProKurq+svnt+4cWPq6up6uzwAAAAAAAAAAMAup/6NDP/qV7/Kr371q+rPDz/8cDo6OnrMtbe358Ybb8yYMWN2fIcAAAAAAAAAAAC7iDcUdN1zzz257LLLkiQ1NTX5/ve/n+9///uvOVupVHLeeeft+A4BAAAAAAAAAAB2EW8o6Pqnf/qn/N//+3/T1dWVI444IieffHKam5u7zdTU1GTQoEHZe++9U1//hpYHAAAAAAAAAADYpb2h4mqPPfbIHnvskSS59tprM3bs2Oy22259sjEAAAAAAAAAAIBdTa8foXXQQQftzH0AAAAAAAAAAADs8nbonYgPPPBAbrnllqxevTrt7e3p6urqdr6mpib33HPPDm0QAAAAAAAAAABgV9HroOvb3/52Lrzwwuy2226ZMGFCxo0btzP3BQAAAAAAAAAAsMvpddB17bXXZsqUKVm8eHEGDBiwM/cEAAAAAAAAAACwS6rt7YXt7e2ZMWOGmAsAAAAAAAAAAGAn6XXQNX78+KxatWpn7gUAAAAAAAAAAGCX1uug6+yzz87dd9+d2267bWfup2rDhg1pbm7OuHHj8j//8z/dzt18882ZMWNGxo8fn8MPPzz3339/j+vXr1+fhQsX5qCDDsqkSZNy8skn5/nnn+8x98gjj+STn/xkJkyYkOnTp2fx4sXp6urqk3sCAAAAAAAAAAD4S+p7e+H8+fOzdevW/Mu//EvOPvvsvPOd70xtbfc+rKamJj/+8Y97tf4VV1yRjo6OHsfvuOOOnHnmmTn++OMzZcqUtLS05MQTT8wNN9yQiRMndtvf008/nbPPPjsDBw7MxRdfnGOPPTa33npr6utfue3f/va3mTdvXpqamjJ//vw89dRTueCCC1JXV5d58+b1at8AAAAAAAAAAAC91euga/jw4Rk+fHj++q//emfuJ0mycuXK/Pu//3tOO+20nHXWWd3OXXLJJTnssMMyf/78JMmUKVOyYsWKXH755bnmmmuSJMuXL8+DDz6YJUuWZNq0aUmSMWPGZNasWbnrrrsya9asJMmSJUsyYsSIfOtb30pDQ0OmTp2atWvX5qqrrsrcuXPT0NCw0+8NAAAAAAAAAADg9fQ66Lruuut25j66OeecczJnzpyMGTOm2/HVq1fnN7/5Tb785S93Oz5r1qycf/752bx5cxoaGrJ06dJUKpU0NTVVZxobG7P//vtn6dKl1aBr6dKl+fu///tu4dasWbNy9dVXZ/ny5Zk8eXKf3SMAAAAAAAAAAMCfq/3fR95cd955Z1asWJETTjihx7nW1tYk6RF6jR07Nlu2bMnq1aurc2PGjElNTU23ucbGxuoaGzduzB/+8Ic0Njb2mKmpqanOAQAAAAAAAAAAvFl6/YSu//7v/96uub/927/d7jU3bdqURYsWZcGCBXnHO97R43xbW1uSpFKpdDu+7edt59vb2zN06NAe1w8bNiyPP/54kmT9+vWvuVZDQ0MGDRpUXau36uv7ppWrqyuuwYM+81b7fX+r7Rd2hN93AAAAAAAAgL7R66Br7ty5PZ6A9VqefPLJ7V7zyiuvzG677ZZ//Md/7O22ilBbW5MRI4b09zbgLa9SGdTfWwBeh+8nAAAAAAAAQN/oddB17bXX9jjW0dGR3/3ud7npppvS2dmZU045ZbvX+93vfpfvfOc7ufzyy6tPz9q4cWP1zw0bNmTYsGFJXnm61u677169tr29PUmq5yuVSp577rken9HW1lad2fYEr22ftc3mzZuzadOm6lxvdHZ2pb19Y6+v/0vq6mr9Izq7jPb2Teno6OzvbWw33092JW+17ycAAAAAAABAf6pUBm33m5B6HXQddNBBr3vuE5/4RI466qj813/9V6ZOnbpd6z377LPZsmVLPv/5z/c4d/TRR+d973tfLrzwwiRJa2trGhsbq+dbW1szYMCA7LXXXkmSxsbGLFu2LF1dXd2eIrZq1arst99+SZLBgwfnXe96V1pbW7t91qpVq9LV1dVt/d7YutU/csOO6ujo9F2CQvl+AgAAAAAAAPSN7cu+3uiitbU57LDDcvPNN2/3Nfvvv3+uvfbabv+dfvrpSZKvf/3rOeuss7LXXntln332yZ133tnt2paWlkydOjUNDQ1Jkubm5rS1tWXZsmXVmVWrVuWJJ55Ic3Nz9Vhzc3PuvffebNmypdtalUolkyZN6tW9AwAAAAAAAAAA9Favn9D1v2lra+vxOsO/pFKpZPLkya957oADDsgBBxyQJDnppJNy6qmnZu+9987kyZPT0tKSxx57LNdff311ftKkSZk2bVoWLlyY0047LQMHDsxFF12UcePG5UMf+lB1bt68ebnttttyyimn5Mgjj8yKFSuyZMmSLFiwoBqHAQAAAAAAAAAAvFl6HXT9/ve/f83j7e3tefjhh7NkyZJ84AMf6PXGXs9HPvKRbNq0Kddcc00WL16cMWPG5LLLLuvxRK2LL7445557br72ta9l69atmTZtWs4444zU1///t/zXf/3XWbJkSRYtWpTPf/7zGTlyZE4++eR87nOf2+n7BgAAAAAAAAAA+N/UdHV1dfXmwve85z2pqal5zXNdXV2ZOHFiLrjggowePXqHNvhW1NHRmbVrN/TJ2vX1tRkxYkjueXxdXty4tU8+A/rb8MH1+eCBI7Ju3YZs3drZ39vZbtu+n+t/fmM62l/o7+1An6ir7J6h/2fOW+77CQAAAAAAANCfRo4ckrq62u2a7fUTuv71X/+1R9BVU1OTSqWSvffeO/vuu29vlwYAAAAAAAAAANgl9Tro+sQnPrEz9wEAAAAAAAAAALDL63XQ9WpPP/10fve73yVJ3v3ud3s6FwAAAAAAAAAAQC/sUNB1zz33ZNGiRdWYa5vRo0fnK1/5Sg499NAd2hwAAAAAAAAAAMCupNdB109/+tOcfPLJ2XPPPbNgwYKMHTs2SbJy5crcdNNNOemkk3LVVVelubl5p20WAAAAAAAAAADg7azXQdcVV1yRcePG5YYbbsjgwYOrxw899NB8+tOfzlFHHZXLL79c0AUAAAAAAAAAALCdant74VNPPZWPf/zj3WKubQYPHpx/+Id/yFNPPbVDmwMAAAAAAAAAANiV9DroGjhwYNra2l73fFtbWwYOHNjb5QEAAAAAAAAAAHY5vQ66Jk+enGuvvTbLly/vce7RRx/Nddddl6lTp+7Q5gAAAAAAAAAAAHYl9b298Mtf/nLmzJmTo446KhMmTMiYMWOSJKtWrcpjjz2W3XbbLaeeeupO2ygAAAAAAAAAAMDbXa+f0LXXXnvlxz/+cebOnZu2tra0tLSkpaUlbW1tOfroo/OjH/0oo0eP3pl7BQAAAAAAAAAAeFvr9RO6tm7dmoEDB2bhwoVZuHBhj/MvvfRStm7dmvr6Xn8EAAAAAAAAAADALqXXT+g655xzMmfOnNc9f+SRR2bRokW9XR4AAAAAAAAAAGCX0+ug64EHHsiMGTNe9/yMGTOydOnS3i4PAAAAAAAAAACwy+l10PX8889n1KhRr3t+jz32yJo1a3q7PAAAAAAAAAAAwC6n10HX8OHDs2rVqtc9v3LlyrzjHe/o7fIAAAAAAAAAAAC7nF4HXQcffHBuvPHGPPHEEz3O/fKXv8xNN92U5ubmHdocAAAAAAAAAADArqS+txd+8YtfzAMPPJAjjjgihxxySPbdd98kya9//evcf//9GTlyZL74xS/utI0CAAAAAAAAAAC83fU66Bo1alRuvfXWXHjhhbn33ntz9913J0ne8Y535KMf/WgWLFiQUaNG7bSNAgAAAAAAAAAAvN31OuhKkj322CPnnXdeurq6snbt2iTJyJEjU1NTs1M2BwAAAAAAAAAAsCvZoaBrm5qamuy22247YykAAAAAAAAAAIBdVm1/bwAAAAAAAAAAAIBXCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAApRVND105/+NJ/+9KczZcqUHHjggTn00ENz7rnnZv369d3m7rvvvhx++OEZP358ZsyYkVtvvbXHWps3b855552XpqamTJw4Mcccc0xaW1t7zK1cuTLHHHNMJk6cmKamppx//vnZvHlzn90jAAAAAAAAAADA66nv7w282osvvpgJEyZk7ty5GT58eH7961/n0ksvza9//et85zvfSZI8/PDDOfHEEzN79uwsXLgwv/jFL/LVr341Q4YMyYc//OHqWuecc05aWlryla98JaNGjcpVV12Vz372s7njjjsydOjQJElbW1s+85nPZJ999smll16aNWvWZNGiRXn55Zfzta99rV/+HwAAAAAAAAAAALuuooKuj33sY91+njx5choaGnLmmWdmzZo1GTVqVK688spMmDAh3/jGN5IkU6ZMyerVq3PJJZdUg67nnnsut9xyS84666zMnj07STJ+/PhMnz49N954Y4499tgkyY033pgNGzbksssuy/Dhw5MkHR0d+frXv57jjjsuo0aNepPuHAAAAAAAAAAAoLBXLr6WbaHVli1bsnnz5jz00EPdnsSVJLNmzcrKlSvz7LPPJkkefPDBdHZ2dpsbPnx4mpqasnTp0uqxpUuXZurUqdXPSJKZM2ems7MzP/vZz/rupgAAAAAAAAAAAF5DkUFXR0dH/vSnP+WXv/xlLr/88hxyyCEZPXp0nnnmmWzZsiWNjY3d5seOHZskaW1trf652267ZdiwYT3mts1sm/vztSqVSnbfffducwAAAAAAAAAAAG+Gol65uM306dOzZs2aJMnBBx+cCy+8MEnS1taW5JXo6tW2/bztfHt7e4YOHdpj3UqlUp3ZNvfnayXJsGHDus31Rn1937RydXVFNnjQJ95qv+9vtf3CjvD7DgAAAAAAANA3igy6Fi9enE2bNuXpp5/OlVdemeOPPz7f/e53+3tb2622tiYjRgzp723AW16lMqi/twC8Dt9PAAAAAAAAgL5RZND1nve8J0kyadKkjB8/Ph/72Mdy9913Z999902SrF+/vtt8e3t7klRfsVipVPLSSy/1WLe9vb3baxgrlUqPtZJXnvT1569rfCM6O7vS3r6x19f/JXV1tf4RnV1Ge/umdHR09vc2tpvvJ7uSt9r3EwAAAAAAAKA/VSqDtvtNSEUGXa82bty4DBgwIM8880wOOeSQDBgwIK2trTn44IOrM62trUmSxsbG6p9//OMfe4RZra2t1Zltc9uu3Wb9+vV54YUXus31xtat/pEbdlRHR6fvEhTK9xMAAAAAAACgb2xf9tWPHn300WzZsiWjR49OQ0NDJk+enJ/85CfdZlpaWjJ27NiMHj06STJt2rTU1tbmrrvuqs60tbXlwQcfTHNzc/VYc3Nzfv7zn1ef8JUkd955Z2pra9PU1NTHdwYAAAAAAAAAANBdUU/oOvHEE3PggQdm3Lhx+au/+qv86le/ypIlSzJu3Lh88IMfTJJ84QtfyNFHH52zzz47M2fOzEMPPZTbb789F110UXWdd77znZk9e3bOP//81NbWZtSoUbn66qszdOjQzJkzpzo3Z86cXHfddTnhhBNy3HHHZc2aNTn//PMzZ86cjBo16k2/fwAAAAAAAAAAYNdWVNA1YcKEtLS0ZPHixenq6sq73/3uHHHEEZk3b14aGhqSJB/4wAdy6aWX5uKLL84tt9ySPffcM+ecc05mzpzZba0zzjgjQ4YMyYUXXpgNGzbk/e9/f7773e9m6NCh1Zlhw4ble9/7Xr75zW/mhBNOyJAhQzJ79uwsWLDgTb1vAAAAAAAAAACAJKnp6urq6u9NvN10dHRm7doNfbJ2fX1tRowYknseX5cXN27tk8+A/jZ8cH0+eOCIrFu3IVu3dvb3drbbtu/n+p/fmI72F/p7O9An6iq7Z+j/mfOW+34CAAAAAAAA9KeRI4ekrq52u2a3bwoAAAAAAAAAAIA+J+gCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAAAAAAAAACiEoAsAAAAAAAAAAKAQgi4AAAAAAAAAAIBCCLoAAAAAAAAAAAAKIegCAAAAAAAAAAAohKALAAAAAAAAAACgEIIuAAAAAAAAAACAQgi6AAAAAAAAAAAACiHoAgAAAAAAAAAAKISgCwAAAAAAAAAAoBCCLgAAAAAAAAAAgEIIugAAAAAAAAAAAAoh6AIAAADg/7V332FWVPfj+N+7FBUMWGM0agSTJbCAoFRBFKwg9hYNWMBesSTYS9SvqFEjakARa4zGFg2IxBIVFfQTRcUaFVBRbBFk6W3P7w9/e8NlCxdY3LvL6/U8+8Cde+7cM2dOm5n3nQEAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBP5FVA15NPPhknnXRS9OjRI9q1axf77bdfPPzww5FSykr30EMPxZ577hlt2rSJfffdN5577rly65o9e3acf/750alTp2jfvn2cfvrp8c0335RLN3HixDjssMOibdu20bNnz7jtttvKfR8AAAAAAAAAAMCPIa8Cuu66665Yb7314txzz41hw4ZFjx494qKLLopbbrklk+aJJ56Iiy66KHr37h0jRoyIdu3axamnnhpvvvlm1roGDRoUL7/8clx66aXxxz/+MaZOnRrHHXdcLFmyJJPm008/jYEDB8amm24at956axx11FExdOjQuOOOO36sTQYAAAAAAAAAAMioX9MZWNawYcNio402yrzu2rVrfP/993HnnXfGySefHIWFhTF06NDYe++9Y9CgQRER0aVLl/jwww/jlltuiREjRkRExBtvvBEvvfRSjBw5Mrp37x4REc2aNYs+ffrEU089FX369ImIiJEjR8aGG24Y119/fTRs2DC6du0aM2bMiOHDh0f//v2jYcOGP24BAAAAAAAAAAAAa7W8ukPXssFcZVq2bBlz5syJefPmxbRp0+KTTz6J3r17Z6Xp06dPTJgwIRYtWhQREePGjYsmTZpEt27dMmmaN28eLVu2jHHjxmWWjRs3LnbdddeswK0+ffpESUlJvPHGG9W9eQAAAAAAAAAAAFXKq4Cuirz++uux2Wabxfrrrx9TpkyJiB/utrWsbbfdNhYvXhzTpk2LiIgpU6ZEs2bNoqCgICtd8+bNM+uYN29efPnll9G8efNyaQoKCjLpAAAAAAAAAAAAfix59cjF5b322msxZsyYGDx4cEREzJo1KyIimjRpkpWu7HXZ+yUlJfGTn/yk3PqaNm0a77zzTkREzJ49u8J1NWzYMNZbb73MulZV/fprJlauXr28j8GDalPb6nttyy+sDvUdAAAAAAAAYM3I24Cur776Ks4888zo3LlzHHnkkTWdnZVSWFgQG27YuKazAbVekybr1XQWgEponwAAAAAAAABrRl4GdJWUlMRxxx0XG2ywQdx0001RWPjDXUCaNm0aET/cXWvTTTfNSr/s+02aNImvvvqq3HpnzZqVSVN2B6+yO3WVWbRoUcyfPz+TblWUlqYoKZm3yp+vSr16hS6is9YoKZkfS5eW1nQ2cqZ9sjapbe0TAAAAAAAAoCY1abJezk9CyruArgULFsQJJ5wQs2fPjr/97W9Zj05s3rx5RERMmTIl8/+y1w0aNIitttoqk27ChAmRUoqCgoJMuqlTp0ZRUVFERDRq1Cg233zzmDJlStb3T506NVJKWetfFUuWuMgNq2vp0lJtCfKU9gkAAAAAAACwZuQW9vUjWbJkSQwaNCimTJkSt99+e2y22WZZ72+11VaxzTbbxNixY7OWjxkzJrp27RoNGzaMiIgePXrErFmzYsKECZk0U6dOjffeey969OiRWdajR4949tlnY/HixVnratKkSbRv335NbCIAAAAAAAAAAECl8uoOXZdddlk899xzce6558acOXPizTffzLzXqlWraNiwYZx22mlxzjnnxNZbbx2dO3eOMWPGxKRJk+Ivf/lLJm379u2je/fucf7558fgwYNjnXXWiRtuuCFatGgRe+yxRybdwIEDY9SoUXH22WfH4YcfHh9++GGMHDkyzjzzzExwGAAAAAAAAAAAwI+lIKWUajoTZXr16hVffPFFhe89++yzseWWW0ZExEMPPRQjRoyI6dOnR7NmzeKss86Knj17ZqWfPXt2XHXVVfH000/HkiVLonv37nHhhReWu+vXxIkTY8iQIfH+++/HRhttFL/97W/juOOOy3pU48paurQ0ZsyYu8qfr0r9+oWx4YaN45l3Zsb385aske+AmrZBo/qxW+sNY+bMubXqkW5l7XP2+Adiacm3NZ0dWCPqNdk0frLjb2pd+wQAAAAAAACoSRtt1Djq1cvtYYp5FdBVVwjogtUjoAvyl4AuAAAAAAAAgJW3MgFduaUCAAAAAAAAAABgjRPQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOSJvAro+vTTT+Piiy+O/fbbL1q1ahV9+/atMN1DDz0Ue+65Z7Rp0yb23XffeO6558qlmT17dpx//vnRqVOnaN++fZx++unxzTfflEs3ceLEOOyww6Jt27bRs2fPuO222yKlVO3bBgAAAAAAAAAAsCJ5FdD10UcfxQsvvBC/+MUvYtttt60wzRNPPBEXXXRR9O7dO0aMGBHt2rWLU089Nd58882sdIMGDYqXX345Lr300vjjH/8YU6dOjeOOOy6WLFmSSfPpp5/GwIEDY9NNN41bb701jjrqqBg6dGjccccda3IzAQAAAAAAAAAAKlS/pjOwrF69esVuu+0WERHnnntuvPPOO+XSDB06NPbee+8YNGhQRER06dIlPvzww7jllltixIgRERHxxhtvxEsvvRQjR46M7t27R0REs2bNok+fPvHUU09Fnz59IiJi5MiRseGGG8b1118fDRs2jK5du8aMGTNi+PDh0b9//2jYsOGPsNUAAAAAAAAAAAA/yKs7dBUWVp2dadOmxSeffBK9e/fOWt6nT5+YMGFCLFq0KCIixo0bF02aNIlu3bpl0jRv3jxatmwZ48aNyywbN25c7LrrrlmBW3369ImSkpJ44403qmOTAAAAAAAAAAAAcpZXAV0rMmXKlIj44W5by9p2221j8eLFMW3atEy6Zs2aRUFBQVa65s2bZ9Yxb968+PLLL6N58+bl0hQUFGTSAQAAAAAAAAAA/Fjy6pGLKzJr1qyIiGjSpEnW8rLXZe+XlJTET37yk3Kfb9q0aeYxjrNnz65wXQ0bNoz11lsvs65VVb/+momVq1evVsXgwWqpbfW9tuUXVof6DgAAAAAAALBm1KqArtqisLAgNtywcU1nA2q9Jk3Wq+ksAJXQPgEAAAAAAADWjFoV0NW0adOI+OHuWptuumlmeUlJSdb7TZo0ia+++qrc52fNmpVJU3YHr7I7dZVZtGhRzJ8/P5NuVZSWpigpmbfKn69KvXqFLqKz1igpmR9Ll5bWdDZypn2yNqlt7bNMQUFBFBYWrDgh1GKlpSlSSjWdDQAAAAAAAJbRpMl6OT8JqVYFdDVv3jwiIqZMmZL5f9nrBg0axFZbbZVJN2HChEgpRUHB/y7aTp06NYqKiiIiolGjRrH55pvHlClTsr5j6tSpkVLKWv+qWLKk9l3khnyzdGmptgR5qja2zx/uoLleFBZ6XCR1W2lpacycOS9KSwV1AQAAAAAA1Ea1KqBrq622im222SbGjh0bu+22W2b5mDFjomvXrtGwYcOIiOjRo0f8+c9/jgkTJsSOO+4YET8Ear333ntx7LHHZj7Xo0ePePbZZ+N3v/tdNGjQILOuJk2aRPv27X/ELQMA1rTCwoIoLCyMZ7+aEN8vKqnp7MAasUHDJrHrz7pGYWGBgC4AAAAAAIBaKq8CuubPnx8vvPBCRER88cUXMWfOnBg7dmxERHTq1Ck22mijOO200+Kcc86JrbfeOjp37hxjxoyJSZMmxV/+8pfMetq3bx/du3eP888/PwYPHhzrrLNO3HDDDdGiRYvYY489MukGDhwYo0aNirPPPjsOP/zw+PDDD2PkyJFx5plnZoLDAIC65ftFJfHfhTNrOhsAAAAAAAAAFcqrgK7vvvsuzjjjjKxlZa/vueee6Ny5c/Tt2zfmz58fI0aMiNtuuy2aNWsWN998c7k7av3pT3+Kq666Ki6++OJYsmRJdO/ePS688MKoX/9/m/yLX/wiRo4cGUOGDInjjz8+Ntpoozj99NNjwIABa35jAQAAAAAAAAAAllOQUvIslmq2dGlpzJgxd42su379wthww8bxzDsz4/t5S9bId0BN26BR/dit9YYxc+bcWLKktKazk7Oy9jl7/AOxtOTbms4OrBH1mmwaP9nxN7WufUb8r40+8tk/3aGLOmuTdTaMg7bes1a2UQAAAAAAgLpso40aR716hTmlzS0VAAAAAAAAAAAAa5yALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIEwK6AAAAAAAAAAAA8oSALgAAAAAAAAAAgDwhoAsAAAAAAAAAACBPCOgCAAAAAAAAAADIE/VrOgMAAACFhQVRWFhQ09mANaq0NEVpaarpbAAAAAAAkOcEdAEAADWqsLAgNtqwURQUuoEwdVsqLY0ZM+cJ6gIAAAAAoEoCugAAgBpVWFgQBYWFseDVV6J0dklNZwfWiMKfNIl1O3eJwsICAV0AAAAAAFRJQBcAAJAXSmeXROn3M2s6GwAAAAAAADXKM00AAAAAAAAAAADyhIAuAAAAAAAAAACAPCGgCwAAAAAAAAAAIE8I6AIAAAAAAAAAAMgTAroAAAAAAAAAAADyhIAuAAAAAAAAAACAPCGgCwAAAAAAAAAAIE8I6AIAAAAAAAAAAMgTAroAAAAAAAAAAADyhIAuAAAAAAAAAACAPCGgCwAAAAAAAAAAIE8I6AIAAAAAAAAAAMgTAroAAAAAAAAAAADyhIAuAAAAAAAAAACAPCGgCwAAAAAAAAAAIE8I6AIAAAAAAAAAAMgTAroAAAAAAAAAAADyRP2azgAAAACQ3woLC6KwsKCmswFrVGlpitLSVNPZAAAAAAABXQAAAEDlCgsLYsMNGwvoos4rLU0xc+ZcQV0AAAAA1DgBXRExefLkuOKKK+KNN96Ixo0bx3777ReDBg2Khg0b1nTWAAAAoEaV3Z1r2n8WxcJ5Al2om9ZpVBBbtWgYhYUFAroAAAAAqHFrfUDXrFmz4qijjoptttkmbrrppvj6669jyJAhsWDBgrj44otrOnsAAACQFxbOS7FgrkAXAAAAAIA1ba0P6HrggQdi7ty5cfPNN8cGG2wQERFLly6Nyy67LE444YTYbLPNajaDAAAAAAAAAADAWmOtD+gaN25cdO3aNRPMFRHRu3fvuOSSS+Lll1+OAw88sOYyBwAAAABVKHssKtRlpaXJ41ABAABYq6z1AV1TpkyJgw46KGtZkyZNYtNNN40pU6bUUK4AAAAAoGqFhQWx4YaNorCwsKazAmtUaWlpzJw5r1YGdQm6ZG0g6BIAAKrfWh/QVVJSEk2aNCm3vGnTpjFr1qxVWmdhYUFstFHj1c1ahQr+/2P/7i2aRmlygETdVPj/V/SmTdeL2lTNy9pn4x32jUilNZsZWFMKfrhQVNvaZ8T/2mifLXaO0tBGqZsKo3a20bL2uW73HhGl2id1VGHtbJ8R/2uj2xQ3rHV5h1yV1fPa1kYLCiIKCwtj6eJFkRyHUkcVFBRGvQYNY8MNG9Wq9lmmsLAgCgoEdFG3pVR7A7o0T+q62jh2Lksbpa6rzW1U+6SuW1Ptc2V+8LPWB3StCQUFBVGv3prtwdZt4JeX1H219RfGhes0qukswBpXW9tnRMR69det6SzAGldb22jhutondV9tbZ8REfUbOlNH3Vdb22i9Bg1rOguwxtXW9glrgx/jmggAAKxt1vqj4CZNmsTs2bPLLZ81a1Y0bdq0BnIEAAAAAAAAAACsrdb6gK7mzZvHlClTspbNnj07vv3222jevHkN5QoAAAAAAAAAAFgbrfUBXT169Ijx48dHSUlJZtnYsWOjsLAwunXrVoM5AwAAAAAAAAAA1jYFKaVU05moSbNmzYq99947mjVrFieccEJ8/fXXMWTIkNhnn33i4osvrunsAQAAAAAAAAAAa5G1PqArImLy5Mlx+eWXxxtvvBGNGzeO/fbbL84888xo2LBhTWcNAAAAAAAAAABYiwjoAgAAAAAAAAAAyBOFNZ0BAAAAAAAAAAAAfiCgCwAAAAAAAAAAIE8I6AIAAAAAAAAAAMgTAroAAAAAAAAAAADyhIAuAAAAAAAAAACAPCGgCwAAAAAAAAAAIE8I6AIAAAAAAAAAAMgTArrWUgcffHDcd999mde9evWKFi1aVPj35ptvZn3266+/jsGDB0eXLl2ibdu20bt37/jHP/6RlWb27Nlx/vnnR6dOnaJ9+/Zx+umnxzfffFMuHw899FDss88+0a5du9h5553jwgsvjO+++y4rTWV5W7hw4Qq3c/LkyXHMMcdEu3btolu3bnHNNdfEokWLVqKksrd70KBBscMOO0T79u3jxBNPjGnTpmWlOffccystx9tuuy0r7cKFC+PGG2+MXr16RevWrWOXXXaJq6++epW2/euvv47TTjst2rdvH506dYoLLrgg5syZU24b/vWvf8W+++4bbdq0iT333DMeeeSRnLY9l/155plnZvL3hz/8Iaf1ro2Wb3sREY888kjstdde0bp169h9993j3nvvzXr/888/r7RetWnTptx3vPnmm3H00UdH+/btY/vtt49DDz003n///cz7jz76aIXr+uMf/1huXQ899FDsueee0aZNm9h3333jueeeK5cm1/ZekVWtk8ubMWNGXHHFFXHIIYdE69ato3379hWmW7p0aYwYMSL22muv2G677WLXXXeNq6++OubOnVsu7eTJk+OUU06Jjh07Rrt27WL//fePl19+OSvNa6+9Fv3794+OHTtG586d49hjj80q65XZzkWLFsXVV18d3bp1i3bt2sUxxxwTU6ZMqTBfq9KvpZTitttui1122SXatm0bhx12WLn+/f7778/Uh759+65wnbXd8u3x7bffjvPOOy969+4dv/71r+OEE06o8HMzZ86Miy++OHbZZZdo165d9O3bN+6///4K0z7//PPxm9/8Jtq1axcdO3aM/v37x1dffZWVJpexMJf9F5Ef40Eu5syZEzfddFMcfPDB0aFDh9hxxx3jxBNPjP/85z9Z6W666aZK+7+LL754hemW3y+zZ8+Oiy66KDp37hzbbbdd9O/fv1ybrazPPfTQQ8ttx8SJE+Owww6Ltm3bRs+ePeO2226LlFJWmlz3XUVyae/dunXL5HHs2LE5rbc2WL59PvDAAzFgwIDo1q1bZmx75plnsj7z6quvVlpf9tprrxWmO/PMM7PWl1KKESNGZOZqffv2jTFjxpTLa22ar+Xq6quvjr333jszlzjooIPiiSeeqDDtisbLXMv75ZdfjrPPPjt22223KueT1T1e5jLXqUgu+/PQQw/NbO/IkSNzWm9tsXwb/fvf/x6HHnpodOrUKVN3b7nllgrLvKSkJK644oro3r17tGnTJnbbbbe44447stJUVGe6deuWlebTTz+Niy++OPbbb79o1apVlXOX6pzT5tL3VyTXuruy3nnnnWjZsmWF899cynFZc+fOjR49ekSLFi3i7bffzizPddw2huaHio45y3z11VfRvn37aNGiRcyYMSPrvZU991JaWhoHHnhgufIrO+b67W9/G507d45OnTpF//7947XXXiu3jlzraD706bmqrnKMiLj99ttj//33jw4dOkS7du1in332ib/85S9V9jl33XVXtGjRosJjmeqci6xOn7ai9r9w4cKsslu2P6oLlm+juR7LLKuy/Txp0qQ45phjolu3bplzjeeff358/fXXla6rqn6hrh2HllnRXGT27Nlx2mmnRa9evaJt27bRpUuXOPbYY2PSpElZ6xk/fnyceeaZ0atXr9huu+2iT58+cfvtt8fixYuz0lV2vnjcuHFZ6WpTn1hX57kVjaGlpaVx1113Zc7dduvWLc4+++ysNLkcP02ZMiX+8Ic/RJ8+fWK77baLXr16xSWXXFKu3eV63rZ///4Vpps8eXJWuto0x63seL5FixaZPOdajrkcK6zMOffqLEdz3FW3Ktc1v/nmm7jmmmtiv/32i/bt20ePHj3i7LPPji+++CJr3bleX8ilnkbUrnMXucrlnHiu5RiR27zgiy++iLPOOiu6d+8e7du3j4MOOij++c9/ZqWpTde7Jk+enJXH5fuu2qyiMTSX6x733XdfnHDCCdGlS5cq+61c6nKu1/9q05wrV7lc9yhL92OPZ45DV1/9ms4AP76nn346vvjiizjooIMyy26++eZyndAf//jHmDx5crRu3Tqz7JtvvonDDjssmjVrFpdffnmsv/768dFHH5X77KBBg+Ljjz+OSy+9NNZZZ53405/+FMcdd1w88sgjUb/+D9XuscceiwsvvDAGDhwYO+20U0yfPj1uuOGG+Pjjj+OBBx7IWt+ee+4ZAwYMyFrWsGHDKrdz1qxZcdRRR8U222wTN910U3z99dcxZMiQWLBgQdZF4FwsXbo0jj322Jg/f35cfvnl0bBhw7j55pvjqKOOilGjRkXjxo0jIuLkk0+O3/zmN1mfHTNmTNx9993Ro0ePzLLS0tI4+eSTY9q0aXHqqafGlltuGdOnT4+pU6eW++4VbfvixYvj2GOPjYiI6667LhYsWBBXX311nH322XHrrbdm0r322mtx6qmnxsEHHxznn39+vPLKK3HBBRdE48aNsy5yViSX/Tlo0KA46qij4tRTT82lSNdKFbW9MWPGxPnnnx9HHnlk7LLLLvHaa6/FVVddFQUFBdGvX7+IiPjpT38af/vb37LWlVKKY489Nrp06ZK1fMKECXH88cfHQQcdFMcdd1wsWbIkJk2aFPPnzy+Xn9tvvz1+8pOfZF5vttlmWe8/8cQTcdFFF8WJJ54YXbp0iTFjxsSpp54a9913X7Rr1y6TLpf6UZHVqZPL+/rrr2PMmDHRtm3baN26dbmLS2WGDRsWw4YNizPOOCPatm0bH330UVx//fXxzTffxHXXXZdJ99FHH8Xhhx8e3bt3j2uvvTYaNGgQ7777blY5TpkyJQYOHBhdunSJ6667LhYtWhS33nprHH300TF69OjYdNNNV2o7r7jiihgzZkyce+65sdlmm8Xw4cPj6KOPjieeeCKzn1anXxsxYkQMHTo0zjnnnGjRokXcd999MWDAgHj88cdjq622ioiIPfbYI1q2bBl//vOfY/r06Su1D2qbitrjxIkT47XXXou2bdtWGTR8xhlnxJQpU+Kss86KzTffPMaNGxeXXnpp1KtXL+uC5eOPPx4XXHBBDBgwIAYNGhRz586N1157LWvduY6Fuey/fBkPcjF9+vT429/+FgcddFAMGjQoFi5cGHfccUccdthh8cgjj8S2224bERGHHHJI7LTTTlmf/fe//x1//OMfs8bViIh111037r777qxlZWVT5qyzzop33nknfve738Umm2wSd911Vxx11FHx+OOPx+abb14ubefOnTOvy8b6Mp9++mkMHDgwunXrFoMGDYr//Oc/8cc//jHq1asXAwcOzKTLZd9VJNf2ftttt8X06dPr1PhbUfscPnx4dO/ePQ4//PBo1KhRjB07Nk455ZQYMmRIHHDAARERUVxcXG68nDNnThx33HHl6ktExFVXXRXNmzfPvN5www2z3r/99tvjT3/6U5x00knRrl27+Ne//hVnnXVWrLvuutGrV6+stLVlvparuXPnxiGHHBLNmzePgoKC+Oc//xlnnXVWlJaWxj777JNJl8t4WWZF5f3iiy/GBx98EB07doxZs2ZVmrfqHC9znessL9f9eeWVV8bcuXPjsMMOq3RdtVFFbXTWrFmx0047xfHHHx/rr79+TJo0KW6++eb46quv4vLLL8+kmzdvXvTv3z/q1asX559/fmy88cbxySefVHgip3///lkXXho0aJD1/kcffRQvvPBCbLfddlFaWlrpBafqnNPm2vdXJJe6u7JSSnH55ZfHRhttFPPmzaswzYrKcVl//vOfY+nSpeWW5zpulzGG1pyK2ueyhgwZEo0aNaq0vqzMuZcHHnigwiCRBQsWxG233RYHHHBAHHfccVFYWBgPPvhgHHnkkTFy5Mjo2rVrVvoV1dF86dNXRnWUY8QPJ9v79OkTv/rVr2KdddaJCRMmxBVXXBFz5syJE088sVz6b7/9Nm655ZbYeOONy71X3XORVe3Tcmn/DRs2jL/97W/x7rvv1rkfDFbWRnM5lilT1X4uKSmJ5s2bxyGHHBIbb7xxTJs2Lf785z/H22+/HY888kiF9bCqfqGuHYdG5DYXWbRoUTRs2DBOOumk2HLLLWPOnDlx9913x1FHHRWPPvpoNGvWLCJ+aL8LFiyI008/PTbffPN466234qabborJkyfHVVddlfW9W221VbkLy8uPnxG1p0+si/PcytrnxRdfHM8991ycfPLJ8atf/Sq+/fbbeP3117PS5HL8NH78+HjttdfisMMOi1//+tcxffr0GDp0aPzf//1fPP744+Xa54rO20ZEbL/99jF48OCsZVtuuWXW69o0x13+eD4iYvDgwbHeeuvFT3/604jIvRxzOVZYmXPu1VmO5rirZlWva7777rvx9NNPx0EHHRTbbbddzJw5M4YNGxaHHHJIjB49OjbaaKOIyP36Qi71NKJ2nbvIVS7nxHMtx1zmBYsWLcrk//zzz4+mTZvG448/HmeccUaMGDGi3Dnj2nC9a8stt4y//e1v8fzzz8ewYcNyLPn8V1H7zPW6x+OPPx4RETvvvHM89thjFa4/17qc6/W/iNoz58pVrtc9fuzxzHFoNUmsdX7729+myy+/vMo0c+fOTe3atUuXXnpp1vJzzjknHXbYYWnJkiWVfnbixImpqKgovfjii5llkydPTi1atEhPPPFEZtmAAQNSv379sj778MMPp6KiojR9+vTMsp49e6bLLrssp21b1vDhw1O7du3SzJkzM8seeOCB1LJly/TVV1+t1LpGjx6dioqK0vvvv59Z9tVXX6XWrVunO++8s8rP9uvXL/Xp0ydr2YMPPph22GGH9PXXX1f52Vy2fdSoUalFixZp8uTJmWUvvvhiKioqSm+99VZm2YABA9Jhhx2W9dmzzjor9e7du8r157o/VybPa6uK2t6ee+6ZTj311Kxlf/jDH1KnTp3SokWLKl3XK6+8koqKitKYMWMyyxYvXpx69uyZrrnmmirz8cgjj6SioqL03XffVZlujz32SGeddVbWssMOOywde+yxmdcrWz+Wtap1siJLly7N/H/o0KGpXbt2Fabbc8890+DBg7OW3Xjjjal169Zp8eLFmWWHH354OuOMM6r8zltvvTW1adMmzZ8/P7Pss88+S0VFRenvf/97Zlku2/nll1+mli1bpgceeCCzbObMmaldu3bptttuyyxb1X5twYIFafvtt0/XXXddZtnChQtTz5490yWXXFIu/eDBg9Pee+9d5fbXdhW1x2XrUb9+/dLxxx9f7nPffPNNKioqSo888ki59R155JGZ1zNnzkzbb799uu+++6rMRy5jYa77L9/Gg6rMnTs3zZs3L2vZnDlzUqdOndIf/vCHKj87ePDg1LFjx7Rw4cLMsqrafZk33ngjFRUVpWeffTazbN68ealr165ZdWHatGmpqKgoPfnkk1Wu76KLLko9e/bMysd1112XOnTokFm2sm1vWSvT3nPNc21RUfusaMw65phjUt++fatcV9mYt2wbKBtDJ02aVOnnFi5cmNq3b5+uuuqqrOUnnHBC2meffbKW1cb52qo47LDD0jHHHJO1LJfxMpfyTim7D66sTKt7vMxlrlORXPdnmaKionT77bdXuc7aJJfjyZRSuv7661Pbtm2zjh1vuOGGtOuuu6a5c+dW+dlcymzZOlPV3KU657S59P0VybXurqyHHnoo7b777um6666rcBxcmbr38ccfp3bt2qX777+/XJvNddw2hta8qtrn+PHjU6dOndLIkSMrPB5cmWP57777LnXq1Ckzb122/JYsWZK+//77rPRLlixJe+21VzrhhBOyludSR/OtT1+R6irHypx11llpjz32qPC93/3ud+n3v/99hccy1TkXWZ0+bWX60VznELVJRW00l2OZZVW1nyvy0ksvpaKiovT666+Xe6+qfqEuHoemlPtcZHlz5sxJxcXFadiwYZllFR2jDBs2LLVo0SLrvVzPsdTGPrEuzXMrap/jx49PrVq1Sh988MFKr2/546cZM2ak0tLSrDSvv/56KioqSmPHjs0sy/W8bS59QG2d45Ypm6eNGDEisyzXcsz1WGF5FZ1zr85yNMdddat6XXPWrFlZ5/1T+qHutmjRIo0cOTKzLNfrC8urqJ7W1nMXVcn1nHiu5ZjLvKDsXO4rr7yStf6ePXum8847L7OsNl7vyjXPtUVF7TPXGICyOlNVv5VrXc71+l9tnHNVJdfrHjUxnjkOrR4eubiWmTZtWrz22msr/OXTs88+G/Pmzcv6Bf6cOXPiySefjCOOOCLq1atX6WfHjRsXTZo0ybo9YfPmzaNly5ZZt5JesmRJrL/++lmfLYueTDnczndFxo0bF127do0NNtggs6x3795RWlpa7rFpK/Lee+/FpptuGr/+9a8zyzbbbLP41a9+Ff/6178q/dzXX38dr732WlY5Rvxw+8W99torK2J/VY0bNy5atGiRdceDbt26xQYbbBAvvPBCRPwQyf7qq6+W2+99+vSJyZMnx+eff17l+nPZn1StorY3f/78+OSTT8rdyrN79+7x/fffV3mr5dGjR8f666+fdYeQ8ePHxxdffBFHHnlkteT3k08+id69e2ct79OnT0yYMCHzy5dVrR+rUycrUliY23BWWb+zbJ8zefLkeP3116N///5Vrmvx4sXRsGHDWGeddbLWtaxct/Oll16K0tLSrHQbbLBBdOvWLascV7VfmzhxYsyZMydrfzZs2DB23333tbIdVzYW5lKPlixZEhHl9/X666+fVY+efPLJKC0tjYMPPniF61vRWJjr/qtN40GjRo1ivfXWy1rWuHHj2Hrrrau8hfXChQvj6aefjj333HOFd+pc3nvvvRcFBQVZ+V9vvfWiQ4cOOd8GeVnjxo2LXXfdNSsfffr0iZKSknjjjTciYvXaXnXOY2qTytpn2S8ml9WyZcsV3vJ89OjRsc0220Tbtm1XOh9z586tcIz+z3/+s9J3MaxN7bMyG2ywQdbjY3IdL3OVSx9cneNlrnOdiuSyP+uqXI8nI37YN0uWLInS0tLMsocffjgOOuigaNSo0WrnJZc6U91z2lz6/orkWndXRklJSVx33XVx3nnnVXnXrVxdccUV8Zvf/CZz15Flreq4XRlj6JpRVftcvHhxXH755XHaaadllcuquv7666Nz585Zd2IrU69evWjatGm5Zcs/hiZXdblPr6ocK7PhhhuWe5xbxA+/aH7mmWfKPQasTHXORVanT1vVfrQuWJkxtDIr2s8VKWs7y9ebFfULdfE4NGLV5yKNGjWKddZZJ6scKztGSSnFt99+u9J5y0Vd7hNrUmXt88EHH4xOnTpFixYtVnqdyx8/bbjhhlFQUJCVplWrVhERq/UI0arUxjnuskaPHh0FBQVZd1DJtRxzPVdc0Xcuf869OsvRHHfVrM51zSZNmpS7q9LPfvaz2GijjaqtzixfT+viuYtcz4nnUo65zgsq+s7CwsJo3LjxSl9Drm3Xu2qTytpnrjEAudSZXOtyLtf/clWb2meu1z1qYjxzHFo9BHStZV555ZWoX7/+Ci9qjR49On7+85/H9ttvn1n27rvvxuLFi6N+/frRr1+/KC4ujm7dusW1116bdXAyZcqUaNasWbmJdfPmzbOeY3rwwQfHiy++GGPHjo05c+bERx99FMOHD4+ePXvGFltskfXZUaNGZZ63fNxxx1V6m85lTZkyJauDiPhh8rbpppuu9HPcFy5cWOGF44YNG1a5rtGjR0dpaWnsvffemWWLFy+O9957L7bYYov4/e9/H+3atYv27dvHGWecUeHB/oq2vaLtLCgoiGbNmmXy9tlnn8XixYvLpSu7tXdV25Dr/qRqFbW9RYsWRUqpXN0qez158uQK17V48eJ46qmnYvfdd88KJnrrrbdigw02iLfffjv23HPPaNWqVey5556V3qa0b9++0bJly9h1113j1ltvzXq8Stm+Xf6CzrbbbhuLFy+OadOmZdKtSv1YnTq5Og455JD4xz/+ERMmTIi5c+fGpEmT4t57743f/OY3mQO7t956KyJ+uA3/AQccEK1atYpddtklRo4cmbWuvffeO5YuXRp/+tOfYubMmfH111/HVVddFZtvvnnsuuuuK7WdU6ZMiY033rjchY9tt902qyxWtV8re6+ifEyfPj0WLFhQRanVPbmOhRXZfPPNo3v37jF8+PD4+OOPY86cOTFmzJh4+eWX47e//W0m3VtvvRXNmjWLxx57LHr27BmtWrWK/fbbr9xkPJexMNf9V9vHg5KSkvjoo4/K5W1Zzz33XMyZMyfrJEmZBQsWRJcuXaJVq1bRp0+fePDBB7PeX7RoURQWFpYLSm/QoEF88cUX5drBpZdeGi1btoyuXbvGhRdeGN9//33mvXnz5sWXX35ZLq9lj1dYtm2XLV9WLm2vOucxtcnKtM/XX3+9yvry3//+N1555ZUK60tExPHHHx8tW7aMHj16xNVXX521P8oejZrrGF0X52sppViyZEmUlJTEY489VmE/F7Hi8bJMVeWdq+ocL3Od61SWjxXtz7pqRW10yZIlMX/+/Hjttdfi7rvvjsMPPzwTbPT555/Ht99+GxtuuGGceOKJ0bp16+jUqVNceOGFMXfu3HLruu2226K4uDg6dOgQgwYNWqXHQVfnnDbXvr+yfORSd1fGn/70pyguLo6ePXtWmS6Xchw7dmx8+OGHccopp+T8/VWN28bQmlFV+7znnnuiXr16cfjhh1e5jlzOvUyaNClGjx4dv//973PO25IlS+Ktt96qsL6sqI7Wxj69ustxyZIlMWfOnHj++efjscceK/cjrqVLl8bll18eJ554YqU/HKzOuciq9mmr04/WBVW10RUdy0Tktp+XTbto0aKYPHlyXHvttVFcXBw77LBDVpoV9Qt18Th0ZecipaWlsWTJkvjmm29iyJAhUVhYGPvvv3+V3zFx4sRo2LBhucfeffrpp7HDDjtE69at48ADD4xnnnmmws/XxT6xNqisfZaNXVdeeWV06NAh2rZtGwMHDoypU6eWW8eKjp8qUvboxooev1nVedsy//d//xft2rWLNm3aRL9+/eLf//531vu1cY67rCeeeCI6duwYP/vZz6pMV1U5rozKzrlXZzma466a1bmuWZGpU6fGd999t9p1JqLieloXz13kek48F7nOC9q1axe/+tWv4oYbbohp06ZFSUlJ3HvvvfHJJ59kHvG4rLXxelc+qKx9rkwMwIrkWpdzuf5Xpi7NuXK97lET45nj0Oqxcg+Zp9Z7++23Y5tttqnyrhYzZ86Ml19+OQYMGJC1/L///W9ERFx44YVx6KGHxqmnnhqTJk2KoUOHRmFhYebXYSUlJRU+p7Rp06bxzjvvZF7vs88+MX/+/DjnnHMyAWE77rhj3HDDDVmf69WrV7Rt2za22GKLmDZtWgwfPjyOOOKIeOyxx6p8pnhJSUk0adKkwnzMmjWr0s9VZJtttomvvvoqvv7668xzl+fOnRsff/xxlZPs0aNHR/v27bPy+f3338fixYtjxIgR0bFjx7j55ptjxowZce2118Zpp52W9ezgXLa9qvIu286yf5cvj7LXVZVHrvuTqlXU9po2bRobbLBBTJo0KQ488MDM8rI7c1W2X8aNGxfff/99uQvU3377bcyfPz/OP//8OP3002PbbbeN0aNHx+DBg2PjjTfOPFN80003jdNOOy222267KCgoiH/961/xpz/9Kb7++uvMs59zrTOrWj9Wp06ujhNOOCEWLVoUxxxzTCYqf999943zzz8/k6asrzvnnHPi6KOPjsGDB8dLL70U1157bTRu3Dh+85vfRMQP/cJdd90VJ598cgwfPjwiIn7+85/HnXfemSmT1S3HJk2aZJXFqvZrJSUl5e4mVrb+lFLMmjUr1l133Uo/X9fkMhZW5aabboozzzwzE6xbr169uPDCC2PPPffMpPn2229j6tSpceONN8bvfve72HTTTeO+++6Lk08+OR577LH41a9+FRG5jYW57r/aPh5ce+21UVBQUOWFxtGjR8dmm20WHTt2zFq+9dZbxznnnBOtWrWKhQsXxqhRo+Kiiy6K2bNnZ56B/otf/CKWLl0a7733XuYAs7S0NN55551IKUVJSUmsu+660bBhwzj88MOje/fu0aRJk3jrrbdi+PDh8c4778RDDz0UDRo0iNmzZ0dE+XJs2LBhrLfeellte1XbXnXOY2qTXNvnqFGj4o033ohbbrml0jRjxoyJpUuXlhsvf/KTn8Sxxx4bHTt2jHXWWSdeeeWVuOOOO2LKlClx6623RsQPdaqgoCAmTZqUddeMisboujpfmzBhQhxzzDEREVG/fv246KKLsn4Blet4mUt556o6x8s1Vd51uX1GVN1GlyxZEsXFxZnXBxxwQIVzrKuvvjr22GOPGDFiRHzyySdx3XXXxbx58+L666/PpN1///1jl112iU022SQ+/PDDGDZsWBxxxBHx+OOPlztxU5XqnNPm2vdXJNe6m6v3338/Hn744fj73/9eZbpcynH+/PkxZMiQOPPMM8v9krUqFY3bxtCaVVn7/Prrr+OWW26JW265pcq7recynpWWlsZll10WxxxzTGy55ZY5/9L89ttvj6+//jqOPvrorOW51NHa1qdXdzl++umnsccee2Ren3TSSeXK8a9//WvMnz+/3PJlVedcZFX7tNXpR+uCytpoLscyEbnt5zL9+vWLiRMnRkRE69at47bbbsu6iJVLv1AXj0NXZi4SEXHjjTdmzvdsvPHGcdttt1V5LvqTTz6Je+65J37zm99E48aNM8tbtmwZbdq0iV/+8pcxe/bsuP/+++OUU06JG2+8MWt+XRf7xNqisvb57bffxqOPPhq//OUv449//GMsXrw4brjhhhg4cGA8+eSTWe1jRcdPy1u4cGFcffXV0apVq+jatWtmeS7nbSMiOnbsGPvtt19ss8028c0338TIkSPjmGOOiXvvvTfat28fEbVvjrusDz74ID788MP4wx/+UGW6yspxVVR2zr06y9Ecd9WsznXN5aWU4oorroif/vSnWTdiWBWV1dO6eu4il3Piuch1m+rXrx933313nHTSSbHbbrtFRMS6664bN9xwQ6afi1i7r3flg8raZ64xALnItS7ncv0vou7NuXK97lET45nj0OohoGst880338SGG25YZZonn3wyFi9eXG7iWvaojB133DHOPffciIjo0qVLzJ07N+6444445ZRTViog4KmnnoohQ4bESSedFB07dozp06fH0KFDY9CgQTF8+PBMhOiFF16Y+UyHDh2iW7du0bt37xg5cmRceumlOX/f6ujbt2/ceOONcf7558ell14aDRo0iKuvvjrmzZtX6YmPyZMnx3vvvRcXXXRR1vKycmzcuHHcfPPNmUFuk002iWOOOSYmTJiQOfjIh22nelTW9o444ogYOXJk7LDDDtGjR4+YOHFi3HPPPRER5aKky4waNSo22WSTcgepKaVYuHBhnHPOOdGvX7+IiOjatWtMmTIlhg8fngno2mmnnTL/j/jh8VHrrLNO3H333Tn90rM2+8tf/hL33HNPnHfeedGqVav46KOP4sYbb4zLL788Lrnkkoj4Xxvdf//946STToqIH/q6r776KoYPH565QD116tQ47bTTolu3brH//vvHwoUL44477ojjjjsuHnjggdhkk01qZiNZoVzGwsqklOK8887LnPTddNNNY/z48fH//t//i6ZNm2YOaFNKMW/evPjjH/+YuWNbp06dYs8994wRI0bENddcExG5j4V13SOPPBIPPvhgDBkypNJfXpaUlMQLL7wQ/fr1K3cr5v322y/r9S677BKLFy+OYcOGxZFHHhkNGjSIbt26xdZbbx2XXHJJXH311ZkT8mW/lCkr65/+9KdZY2ynTp3iV7/6VZxwwgnx9NNPR58+fapxy1leLu3zgw8+iEsuuSQOPPDAzAmdiowaNSqKi4vL/UqqVatWmUcyRPwwVv70pz+NP/zhDzFp0qRo27ZtrL/++rHvvvvG7bffHkVFRdGuXbt47rnn4oknnoiI7DG6rs7X2rZtGw8//HDMmTMnxo0bF1dccUXUq1cvDjnkkIjIfbzMpbypPapqo/Xr14+HH344Fi5cGO+8804MGzYszjvvvLj66qsj4n91plmzZpllXbt2jfr168eFF14YZ555ZuYiadn7ET9crNphhx3iwAMPjAcffDCOO+64NbmJeS+lFJdddlkcccQRK/xFeS7lOGzYsNh4443joIMOyjkPlY3bxtCaVVn7vOaaa6Jbt24rvMiZy3j20EMPxX//+984/vjjc87Xyy+/HDfddFOcfPLJ0bp166z36mJbr+5y3HzzzePhhx+OefPmxWuvvRYjRoyIwsLCOP300yMi4rvvvouhQ4fG1Vdfvco/WOHHUVkbzeVYZmX385VXXhmzZ8+OTz/9NEaMGBHHHHNM3H///ZnA3Vz7hbpmZeYiET+cs9ttt93i22+/jYceeiiOP/74uOuuu7IC2MvMmTMnTjvttNhyyy3jzDPPzHrvqKOOynrdq1ev+M1vfhNDhw7NCvipi31ibVFZ+0wpxdKlS2PYsGGZ83zbbrtt7L333jFq1Kg4+OCDM2lXdPy0vEsuuSQ+//zzeOCBB7KOL3M9b1s2DpTZZZddom/fvvHnP/85RowYseqFkSdGjRoVDRo0WGGgSGXluKrfWdE5d2re6lzXXN5NN90Ur7zyStx+++0r/fjd5eVaT+uCXM+JV6cFCxbE6aefHimluOWWW6Jx48YxduzYOPvss2PEiBHRqVOniFi7r3flg8raZ01c98jl+l9E3Ztz5Xrdg9rLIxfXMosWLVrhgf/o0aOjRYsWUVRUlLW8LHKxS5cuWcu7du0aixYtik8//TSTbs6cOeXWO2vWrExka0opLrnkkjj00EPjlFNOiU6dOsX+++8f1157bTz//PNVPvP7pz/9aeywww7x7rvvVrkdTZo0yURdVpaPXG2wwQZx/fXXx4cffhi77bZb7LzzzvHtt9/G/vvvH5tuummFnxk1alTUr1+/3EnrJk2aREFBQWy//fZZ+6JTp05Rr169+PjjjyvNR0Xbnkt5l/27fHmUlJRkvV+RXNbPilXW9k444YTYfffd43e/+1106tQpzjrrrMwBeUV1a+7cufHcc89F7969ywUTVtVGq6pXET88+3np0qXx/vvvR0TudWZV68fq1MlVNXPmzLj66qvj9NNPj6OOOio6duwYRxxxRFxwwQXx17/+NXO79KrK8csvv8xs7w033BCbbLJJXHPNNbHjjjtGz549Y/jw4VFSUpIJylvdciwpKckqi1Xt15o0aRKLFi3KPEJs2fUXFBSsdW05l7GwMs8//3yMHTs2hg4dGn379o3OnTvHmWeeGfvvv38MGTIkk66ietSgQYPo2LFjpj3mOhbmuv9q63jwwgsvxMUXXxwnn3xyHHDAAZWm++c//xmLFi2KffbZJ6f19u7dO2bPnh2fffZZRPzwi4sbbrgh5s2bF/vss0/suOOOMX78+DjqqKOiQYMGscEGG1S6rp133jkaNWqUGX/LfgmyfDkuWrQo5s+fn7VPVrXtVec8pjZZUfv84osv4rjjjou2bdtW+Uvdzz77LCZNmhT77rtvTt/bu3fviIisX9udd955UVxcHMcff3x06tQphgwZEmeccUZEVDxGl6kr87X1118/2rRpE127do3BgwfHEUccEUOGDMncsj7X8bIiFZV3LqpzvMy38q4tVtRG27RpEx06dIijjz46rrzyynjsscfi7bffjoj/lemyd72L+F8d+uijjypd769//eto1qzZCo8Bl1edc9pc+/6K5Fp3czFmzJiYMmVK9O/fP0pKSqKkpCQzziz7/4osX45ffPFF3HHHHXH66afH7Nmzo6SkJObNmxcRP9ySvqLHT+U6bpcxhv54Kmqfb7zxRvzzn/+Mk046KVNf5s+fHxE/HFuW/b8iy49nc+fOjeuvvz5OOumkWLx4cZSUlGTq9YIFCyqs4++++26cdtpp0bdv3zj11FNXuA0VtfXa3qevbjk2bNgw2rRpE507d45TTjklzjzzzBg+fHh8++23EfHDHYRatGgRHTp0yOzjJUuWZB77tWTJkpy3s7qPX5e3Ov1oXbAyx6HLH8vkup/LNG/ePLbbbrvYd999484774xPPvkk/va3v0VE7v1CXTwOXdm5yGabbRZt2rSJXr16xS233BJbbbVVDB06tNx6Fy1aFKecckrMmjUrbrvtthUGCBQWFsYee+wRkydPrvLJD3WxT8xXlbXPJk2axC9/+cusH202b948fvazn5U717qi46dl3XDDDTFq1Ki48cYby12Dqcjy520r0qhRo9h5551X+jg0X+a4y0opxZgxY2KnnXaq8lzNypZjVVZ0zr26ytEcd9WsznXNZT344INxyy23xGWXXbbagXtV1dO6eO4i13Piuch1mx5++OGYNGlS3HrrrbHbbrtF165d47LLLovtt9++3F01l7c2XO/KFxW1z9WJAahILvsl1+t/Fantc65cr3vUxHjmOLR6COhayzRt2rTCDqjM9OnTY+LEiRVGsf/yl7+sct1ljbZ58+YxderUzO0My0ydOjXzfNIZM2bEjBkz4te//nVWmrJf75edsFgdFT3TePbs2fHtt9+We05qLnbaaad4/vnnY8yYMfHMM8/EX/7yl/jvf/8b7dq1qzD9E088EV27do2NNtooa/l6660XP//5zyv9nqpOwFekou1MKWWV99Zbbx0NGjQol66yZ9wuv/4V7U9WrLK2t+6668Z1110X48ePj3/84x/x8ssvR5s2bSIiYrvttiuX/umnn44FCxZUGNBQ9gi3iqxKvYoo/2zvKVOmRIMGDTK/WFzV+rE6dXJVTZs2LRYtWhQtW7bMWr58v1NVOUb8MMhHRHz88cfl+rDGjRvH1ltvnVlXrtvZvHnz+O9//1vu1p7LP196Vfu1sveWn7ROmTIltthii7XqcYsRKx4Lq/Lxxx9HvXr1yp0caNmyZXzzzTeZk99VjZll7THXsTDX/Vcbx4M333wzzjjjjNh///0zgTKVGT16dDRv3jzrTj8rq3Xr1jF27Nj45z//GWPHjo1//OMfsWDBgiguLo4GDRrkvJ5GjRrF5ptvXq4cy8pn2bZdtnxZubS96p7H1BZVtc8ZM2bEwIEDY+ONN46bb765yn02atSoKCwsXK27wWy44YZxxx13xLhx42LUqFExbty42HzzzaNBgwYrXQ9rY/tcXnFxccyZMydmzJgREbmPl9WpOsfLXOc6leVjRfuzrlqZMbTsTjxl49lWW21V5Un4lZ2v5qI657S59v2V5SOXupuLKVOmxKxZs6JXr17RsWPH6NixY4wYMSLmzZsXHTt2jJtuuinndX3++eexePHiOP744zPrOvHEEyMi4sgjj8w8NqjMyozblTGGrjkVtc+pU6fG4sWL44ADDsjs47KA6N12263coyeqMnPmzPj+++/jkksuyayr7M5CgwcPLndngk8//TSOO+64aN++fVxxxRWrvF11rU9f2XJcXnFxcSxdujS++OKLiPhhH//73//OrKtjx44xceLEeOmll6Jjx44xfvz4nLezuo9fl7c6/WhdsDrHobnu54pssskm8bOf/SzzQ9xc+4W6eBy6OnORwsLCaNmyZaYcy5SWlsY555wT7777bowYMSI233zzlcrTyqprfWK+qKx95nJupzLLHz+Vuffee+PWW2+NK6+8MuuOMmtCbZrjLuv111+P6dOnV/mDvuoux6rOuVdnOZrjrprVua5Z5umnn45LL700Tj/99Ky7662qquppXTx3kes58VzkOi/4+OOPY7PNNit3jbVly5YrfQ25Ll7vyhcVtc/qjgHIpS7nev1vdb4zX9tnRG7XPWpiPHMcWj0EdK1lmjVrFp9//nml748ePToiosKJz89//vMoKioqd5Jg/Pjxse6662YOcHr06BGzZs2KCRMmZNJMnTo13nvvvejRo0dERGy00Uax3nrrxXvvvZe1rrLo16oCnr7++ut4/fXXM0EvlenRo0eMHz8+E8EZETF27NgoLCyMbt26VfnZytSrVy+23Xbb2GqrrWLy5Mkxfvz4Cm+b/NZbb8Vnn31W6QSyZ8+eMXHixKwDv1deeSWWLl1a4W27y1S07T169IgPPvggPvnkk8yyCRMmxPfffx8777xzRPwQndu5c+f45z//mbW+MWPGxLbbbhtbbrllpd+Zy/5kxVbU9jbaaKNo0aJFNGrUKO67777o0KFDhYPI6NGjY+utt64w2Kt79+7RoEGDCttoVfUq4oe6UK9evczkZquttoptttkmxo4dWy5d165dMyfAVrV+rE6dXFVbbLFFRES5OzuU3R2k7DvbtWsXG2ywQYXluMUWW2QOILbYYot4//33syY/c+bMiU8//TTTh+W6nd27d4/CwsJ46qmnMmlmzZoVL730UlY5rmq/tv3228f6668fTz75ZGbZ4sWL46mnnlor2/GK2mNVfv7zn8fSpUvjP//5T9byd999NzbeeONYb731IuKHfj4istrGokWL4t///nemPeY6Fua6/2rbePDxxx/HCSecEF26dInLLrusyrTffPNN/N///d8Kb5u+rDFjxkSTJk1i6623zlpeUFAQ22yzTTRr1ixmzpwZY8aMqfQRCGWee+65mDdvXrnx99lnn43FixeX+8727dtHxOq1vTUxj6kNKmufc+fOjeOOOy4WL14ct912W+ZxMZV54oknolOnTjnfVr3sUYoVzS8322yzKCoqinr16sX9998fffr0qfL76+p87fXXX4/1118/cxv1XMfLilRV3lWpzvEy17lORXLZn3XVyoyhr7/+ekRE5gRWw4YNo1u3bln1NCIydaiq+er7778fU6dOXek6U91z2lz6/orkWndzccABB8Q999yT9XfAAQfEOuusE/fcc08cdthhlX52+XJs2bJluXWdd955ERFx2WWXZT2SYGXG7WUZQ388FbXPnXbaqdw+LnuExC233BKnnHJKpetbfjzbdNNNy62r7Jfxp512WlYw4TfffBMDBgyIzTffPIYOHZpz4HxFbb229+mrU44VmThxYhQUFGTmBeeff3659f3617+Odu3axT333JN5tHF1zkVWp09b1X60LliZMXT5Y5lc93NFvvzyy5g+fXpmPM61X6iLx6GrMxdZsmRJTJo0qdyFucsuuyyee+65+POf/xwtWrTIKR+lpaUxduzY+NWvflVl8EZd7BPzVWXts2fPnvHxxx9n7ooYETF58uT46quvVniudfnjp4gfzuteeeWVcdZZZ8X++++fc/6WP29bkXnz5sXzzz9frr7UljnuskaNGhWNGjWKXr16Vfj+qpZjVao6516d5WiOu2pW57pmRMSrr74aZ511VhxyyCFVzn9XRlX1tC6eu8j1nHgucp0XbLHFFvHVV1+VC4x99913q7yGXLauun69K19U1D5XJwagIrnU5Vyv/1Wkrsy5VnTdoybGM8eh1SSxVnnxxRdTUVFR+vLLLyt8f5999kmHH354pZ9/9tlnU4sWLdIVV1yRXnrppTRs2LBUXFycrr/++qx0AwYMSDvvvHMaM2ZMevbZZ1Pfvn3TvvvumxYvXpxJc+WVV6bi4uJ04403pvHjx6eHH3447bLLLmnvvfdOCxcuTCmlNGrUqHTWWWelxx9/PE2YMCE9+OCDabfddksdO3ZMn332WWZdr776amrZsmX6+9//nln2/fffp27duqV+/fqlF198MT388MOpQ4cO6bLLLsvK6+DBg1NRUdEKy+6aa65JTz31VBo/fny68847U6dOndIFF1xQYdrLL788tW3bNs2ZM6fC96dPn546dOiQBgwYkJ5//vn06KOPpm7duqXDDz88lZaWrtS2L1q0KPXt2zf17ds3/etf/0pPPPFE2nnnndPxxx+f9Z3//ve/U8uWLdMll1ySXnnllXTjjTemFi1apDFjxmSla9myZTrvvPOyluWyP8v07NmzXBlTedt7/vnn0z333JPGjx+fnnzyyXTyySenHXbYIX344Yfl1vHdd9+lVq1apRtuuKHS7xkyZEhq165duuuuu9KLL76Yzj333NSiRYv04osvZtIMGDAg3Xrrren5559Pzz//fLroootSixYt0pVXXpm1rlGjRqUWLVqkG2+8Mb3yyivp4osvTq1atUoTJ07MSpdL/bjppptSy5Yt0+eff55Zlmud7NmzZ+rXr1/lhfv/e/LJJ9OTTz6ZTj/99NSmTZvM62W/8+STT07t27dPI0eOTBMmTEj33ntv6tSpUzr66KOz1nXvvfemVq1apZtuuim9/PLLaciQIalFixbpwQcfzKR5+umnU1FRUTrrrLPSCy+8kJ5++ul0+OGHp7Zt26apU6eu9HZedNFFqUOHDunhhx9OL774YurXr1/aaaedUklJSSZNrv3akUcemXbbbbesZbfeemtq3bp1uuuuu9L48ePTaaedltq3b5/Vn5QZPHhw2nvvvVdY5rVVZe3xu+++y9SbPn36pAMOOCDzet68eSmllGbPnp122WWXtPvuu6fHHnssjR8/Pl1zzTXp17/+dbrllluy1nfaaaelLl26pIceeig9//zz6fjjj09t2rRJH3zwQSZNLmNhSrntv3wZDx555JFUVFSUXnnllUr3wX//+9/Uo0ePtNNOO6Xx48enN954I/P30UcflUt/5513pqKiovTpp59WuL4DDjgg3X333enFF19MTz/9dDr99NNTUVFRuuuuu7LS/fnPf05PPPFEeuWVV9L999+fdtlllzRgwIC0dOnSTJqrrroqDRkyJI0dOzaNHz8+DR8+PLVv3z4deOCBWdv5ySefpHbt2qXTTjstjR8/Pt11112puLg43X777Vnfmcu+W515TEopTZs2LRUVFaUnn3yy0jKvLSprn8ccc0xq1apV+vvf/55VX954441y63j33XdTUVFRVp+9rLPPPjsNHTo0PfPMM+nFF19M1157bSouLk4nn3xyVrrHH388Pfjgg+mVV15J//jHP9Jvf/vbtPPOO6evv/46k6a2zddyaZ/vv/9+GjhwYHrooYfS+PHj0zPPPJMuvPDC1KJFi3Trrbdmpc1lvMy1vD///PNMn9ulS5c0cODAzOtlVed4mctc5/PPP08tW7ZMN910U2ZZrvuzTFFRUbm+obaqrI0eccQR6c4770wvvPBCevHFF9PNN9+ctt9++zRw4MCsdG+//XYqLi5OZ511VnrxxRfTX/7yl9S+fft09tlnZ9Lcfvvt6eKLL05PPPFEmjBhQrrnnnvSjjvumHr27JlmzZqVSTdv3rxMHenXr1/aeeedM6+/++67TLrqnNPm2vfvtttu6cgjj8xalkvdfeWVV1JRUVF65JFHct0lKaWUhg4dmtq1a5e1LNdyXF5ZHiZNmpRZluu4bQytWSs631OmbCxYvp3kMp4tr6Lymz9/ftp3331T+/bt07PPPptVX959991MulzraL706UOHDk1FRUVp2rRplZZHdZZjSUlJOuyww9J9992XXnrppfT888+nq6++OhUXF6eLL7640nWllFK/fv3K5b+65yK59Gl///vfU8uWLdOrr76aWZZr+0+p4v6oNqusjeZ6LLO8ivbzRRddlK6//vr09NNPpwkTJqS//vWvaffdd0877bRTmjFjRqXrqqhfSKnuHYemlNtc5IEHHkjnn39+Gj16dHr11VfTE088kfr375+Ki4vTv//970y6YcOGpaKionT11VeXO0aZPXt2SumHfqdfv37p/vvvz5z7O/LII1OLFi3SU089lVlXbesTy9SVeW5l7XP27NmpZ8+e6YADDkhPP/10GjNmTNpzzz3THnvskTlPlOvx06uvvpqKi4vTUUcdVa6+LPu9uZy3/fe//51OOOGE9PDDD6cJEyakxx9/PO2///6puLg4vfXWW1nbUNvmuIsXL06dO3dO55xzToXv51qOuR4rpJTbOffqLEdz3JW3Otc1P/7447TDDjukvn37ptdffz2rzix/njGX6wsprbieplS7zl3kMs9dmXPiuZRjLvOC6dOnp+233z4deOCBaezYsenFF19MF1xwQSoqKkqPPfZYJl1tu96VUuVzr9qosvaZ63WPSZMmpSeffDLdd999qaioKA0ZMiQ9+eSTWccQudblXK7/1bY5Vy7tM6Xcrnuk9OOPZ45Dq4eArrXMwoULU6dOndLf/va3cu999NFHqaioKN13331VruOJJ55Ie++9dyouLk49e/ZMw4cPzwQhlSkpKUnnnXde6tChQ2rXrl069dRT01dffVUuL8OGDUt77bVXatu2bdp5553T73//+6xO/4033kj9+vVLnTt3Tq1atUqdO3dOZ5xxRpo8eXLWuio7KPj444/TUUcdldq2bZu6du2ahgwZkjVQpPTDBfcdd9yxym1OKaWzzjor7bjjjqm4uDjtueee6Y477khLliwpl27JkiWpW7du6Ywzzqhyfe+9917q169fatOmTerUqVM677zzsgaLXLc9pZS++uqrdOqpp6Z27dqlDh06pPPOOy9z4mBZzzzzTOrbt28qLi5Ou+++e3rooYfKpSkqKkqDBw/OWpbL/iwjoKtilbW9l156Ke27775pu+22SzvssEM66aST0scff1zhOv7yl7+koqKiSt9P6YeDiaFDh6addtopFRcXp3333Tc988wzWWkuv/zytMcee6S2bdum1q1bp759+6a77767XDtOKaUHH3ww7b777qm4uDgz4C4vl/pR2aQjlzrZuXPnNGjQoEq3uUxRUVGFf8v2C7Nnz05DhgxJu+22W2rTpk3q1atXuvzyy9P3339fbn333HNP2nXXXVNxcXHaY489KgwMGDNmTDrooIPS9ttvnzp37pyOOeaY9Oabb5ZLl8t2Lly4MA0ZMiR17do1tW3bNh199NEV7utc+rV+/fqlnj17Zi0rLS1Nw4cPTz169EitW7dOhxxySLmDlTJ1PaCrsvZYNpZU9Lds3f3kk0/SGWeckbp375622267tPfee6e77rqr3Jgwd+7cdPnll6cuXbqk1q1bp8MOOyy99tpr5fKyorEwpdz3Xz6MB7n0VVWVdUUBnAceeGA6+OCDK13fGWeckXr27JnatGmT2rZtmw4++OD0+OOPl0s3ZMiQ1KNHj8wc5vrrr08LFizISvPggw+mAw44IG2//fapVatWqWfPnunKK6+ssBxff/31dMghh6TWrVunHj16pFtvvbVcX5rLvludeUxKdetEXWXts7L6UlFQ/pAhQ1Lr1q0rDVgYPnx42nvvvVO7du0yffxNN91Urmwfe+yxtNdee6XWrVunTp06pd/97nfl2mZtm6/l0j6//fbbdOaZZ6aePXum1q1bp65du6bf/va36emnn64w/YrGy1zLu+xk1or2cXWOlymteK5T1r6GDh2atTzX/ZlS3bnQlVLlbfT//b//l3r37p2Z0+63337pzjvvrLDMx48fnw488MDUunXr1K1bt3L75tlnn02HHnpo6tixY2rVqlXq1q1bOu+887KCKVP6376p6G/5i7nVNadNKbe+v6IfJORSd5977rlUVFSUXnjhhXLfW5WKArpyLcflVXTiKtdx2xhas6o637Osii4erMx4tqyKyq+qtrnsMcrK1NF86NNXNL+o7nJcuHBhOvfcc9Puu++e2rZtmzp16pQOPvjg9PDDD1d4LmpZFQX65LqdKVXf8WtlATa5tP+U8vNE+uqorI3meiyzvIr280MPPZQOOeSQ1KFDh9S2bdu05557pssvvzx9++23Va6rsouKde04tMyK5iKvvfZaGjBgQOratWsqLi5Ou+yySzrttNPS+++/n7Wefv36rXAuMnPmzHTiiSdmjkPbtWuX+vXrl8aNG5e1rtrWJ5apK/PcqsbQzz77LJ1wwgmpXbt2qX379um0007LOi7M9fip7NxoRX/L7oNcztt+8sknacCAAalbt26puLg4dejQIR133HHlgrlSqn1z3LK0zz//fIXv51qOK3OskEv/UZ3laI678lbnumZV5xqWH29yub6Q0orraVmea8u5i1zmuSnlfk4813LMZV7wzjvvpGOPPTZ17do1tW/fPh1wwAFZwVwp1b7rXSnVrYCuytpnrtc9ym66sqJrBLnU5Vyu/9W2OVeu7TOX6x4p/fjjWa7bmZLj0KoUpLTcgzKp84YMGRLvvfde3HPPPTWdlbywyy67xG9/+9vM7cVZNaWlpVFaWhp77LFH7LLLLnHxxRfXdJbyjra38j777LPYfffd46GHHqryEQJUj5RSLF26NC644IJ49913M7errou0xzXnd7/7XXz//fcxYsSIms7KWmHp0qXxxRdfxO677x433nhj7LXXXjWdpdWmfa452uePa+nSpZFSiuLi4vj9738fAwcOrOksVQttdM3505/+FM8880yMGjUqCgoKajo7dZ4xlJVxxBFHRFFRUVx66aU1nZW1wpIlS+Lf//53HH300fHwww+v9CN385U2uuaY5/646uI8V/tcc8xxf1x1cY4boY2uSea5P64lS5bEY489FhdccEFMmDAhNtpoo5rO0mrTPtcc7fPHla/HoYU1nQF+fAMGDIhJkybFBx98UNNZqXHTp0+P+fPnxxFHHFHTWan1zj777CguLo4vvviiprOSt7S9lTdx4sTo1q2bYK4fyQMPPBDFxcXx2GOP1XRW1jjtcc2ZOHFinHTSSTWdjbVGjx49Yvfdd6/pbFQr7XPN0T5/XIcffngUFxfXdDaqnTa65kycODFOOOEEF7p+JMZQcrVo0aL44IMP/BDwR7Jw4cIoLi6Oo48+uqazUu200TXHPPfHVRfnudrnmmOO++Oqi3PcCG10TTHP/XFNnjw5iouL44ILLqjprFQr7XPN0D5/XPl8HOoOXWupJ598Mpo2bRo77rhjTWeFOmLatGnx/fffR0TExhtvHFtssUXNZihPaXvksxkzZmSCMtddd9341a9+VcM5WrO0R+qCDz74IBYvXhwREVtvvXU0bdq0hnNUPbRP6oLJkyfHvHnzIiJi8803j0022aSGc1R9tFHqAmMo5KeUUrzzzjuZ17/85S9jvfXWq8EcVS9tlLqgrs5ztU/qgro6x43QRqn9Fi5cGB9++GHmdcuWLaN+/fo1mKPqo31S2+XzcaiALgAAAAAAAAAAgDzhkYsAAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAsIxzzz03evXqVWPf/+ijj0aLFi3i7bffXmHa/v37R//+/X+EXAEAAADwY6lf0xkAAAAAgOr06KOPxnnnnZd53bBhw9hiiy2iW7ducfLJJ8cmm2xSg7kDAAAAgKoJ6AIAAACgTjr99NNjyy23jEWLFsXrr78e999/f7zwwgsxevToWG+99Sr93OWXXx4ppR8xp6tu5MiRNZ0FAAAAAKqZgC4AAAAA6qQePXpEmzZtIiLikEMOiQ022CDuvPPOePbZZ6Nv377l0s+bNy8aNWoUDRo0+LGzusoaNmxY01kAAAAAoJoV1nQGAAAAAODH0KVLl4iI+Pzzz+Pcc8+N9u3bx2effRbHHXdctG/fPs4555yIiDj33HOjV69eWZ8tLS2Nu+++O/bZZ59o06ZNdOnSJQYOHBhvv/12VrrHH388DjzwwGjbtm106tQpzjzzzPjyyy9XKb8LFiyIiy++ODp37hzbb799/P73v49Zs2Zlpenfv3/0798/8/rVV1+NFi1axJgxY2LYsGGZoLajjjoqPv3001XKBwAAAAA/LnfoAgAAAGCt8Nlnn0VExAYbbBAREUuWLImBAwfGDjvsEIMHD45111230s9ecMEF8eijj0aPHj3i4IMPjqVLl8Zrr70Wb731VuYuYMOGDYsbb7wxevfuHQcffHDMmDEj/vKXv8Rvf/vbeOyxx6JJkyYrld8//OEP0aRJkzj11FNj6tSpcf/998f06dPj3nvvjYKCgio/O2LEiCgoKIgBAwbEnDlz4vbbb49zzjknHnrooZXKAwAAAAA/PgFdAAAAANRJc+bMiRkzZsSiRYti4sSJccstt8S6664bPXv2jDfffDMWLVoUe+21V5x99tlVrueVV16JRx99NPr37x8XXnhhZvmAAQMipRQREV988UXcdNNNMWjQoDjxxBMzafbYY4844IAD4q9//WvW8lw0aNAg7rrrrswjILfYYou49tpr41//+lfsuuuuVX524cKF8dhjj2UeydikSZO48sor48MPP4yioqKVygcAAAAAPy6PXAQAAACgTjr66KOja9eusfPOO8eZZ54ZjRs3jptvvjk222yzTJrDDz98het56qmnoqCgIE499dRy75XdKevpp5+O0tLS6N27d8yYMSPzt8kmm8QvfvGLePXVV1c6/4cddlgmmKssr/Xr148XXnhhhZ898MADM8FcEREdOnSIiIhp06atdD4AAAAA+HG5QxcAAAAAddLFF18czZo1i3r16sUmm2wSzZo1i8LC//2+sX79+vGzn/1shev57LPP4qc//WnmUY0V+eSTTyKlFHvssUeF79evv/Kn4X7xi19kvW7cuHFsuumm8cUXX6zws1tssUXW67LHPZaUlKx0PgAAAAD4cQnoAgAAAKBOatu2bbRp06bS9xs2bJgV4LU6SktLo6CgIEaMGBH16tUr936jRo2q5XtyVdl2lT0iEgAAAID8JaALAAAAAKqw9dZbx0svvRTff/99pXfp2nrrrSOlFFtuuWU0a9asWr73008/jS5dumRez507N7799tvo0aNHtawfAAAAgPxUPT9BBAAAAIA6ao899oiUUtx8883l3iu749Uee+wR9erVi5tvvrncXbBSSjFz5syV/t6//e1vsXjx4szr+++/P5YsWSKgCwAAAKCOc4cuAAAAAKhCly5dYr/99ot77703Pv3009hpp52itLQ0Xn/99ejcuXP069cvtt566xg0aFBcd9118cUXX8Ruu+0WjRs3js8//zyeeeaZOPTQQ2PgwIEr9b2LFy+Oo48+Onr37h1Tp06Nv/71r7HDDjvErrvuuoa2FAAAAIB8IKALAAAAAFbgqquuihYtWsTDDz8c11xzTfzkJz+J1q1bR/v27TNpjj/++Nhmm23irrvuiltuuSUiIn72s59Ft27dolevXiv9nRdffHGMGjUqhg4dGosXL4699947LrzwwigoKKi27QIAAAAg/xSk5e8BDwAAAAAAAAAAQI0orOkMAAAAAAAAAAAA8AOPXAQAAACAH8GCBQti9uzZVaZp2rRpNGzY8EfKEQAAAAD5SEAXAAAAAPwIxowZE+edd16Vae65557o3Lnzj5QjAAAAAPJRQUop1XQmAAAAAKCu++abb+Ljjz+uMk1xcXE0bdr0R8oRAAAAAPlIQBcAAAAAAAAAAECeKKzpDAAAAAAAAAAAAPADAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCcEdAEAAAAAAAAAAOQJAV0AAAAAAAAAAAB5QkAXAAAAAAAAAABAnhDQBQAAAAAAAAAAkCf+Pzfe5bM9ZZRnAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.figure(figsize=(30, 12))\n",
        "melhous_data['lati_bin'] = pd.cut(melhous_data['Lattitude'], bins=5)\n",
        "sns.countplot(data=melhous_data, x='Price_bin', palette='pastel')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*This count plot based on the binned latitudes ('lati_bin').\n",
        "Each bar represents the count of observations falling within the corresponding latitude bin.\n",
        "The x-axis shows the latitude bins, and the y-axis represents the count of observations. This count plot to visualize the distribution of observations based on binned longitude values in the melhous_data Data,by using countplot we make it easy to understand how observations are distributed across different lattitude ranges. *italicized text* *italicized text*"
      ],
      "metadata": {
        "id": "iKJ0LvEihegZ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 417,
      "metadata": {
        "id": "6IEuefsvGXOi"
      },
      "outputs": [],
      "source": [
        "#plt.figure(figsize=(10, 6))  # Adjust the figure size\n",
        "#sns.countplot(data=melhous_data, x='lati_bin', palette='viridis')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 418,
      "metadata": {
        "id": "DYKEO0Kg9XNH"
      },
      "outputs": [],
      "source": [
        "#sns.countplot(data=melhous_data, x='Price')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**OUTLIERS DETECTION**"
      ],
      "metadata": {
        "id": "0u5Otj_d3-rQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axis = plt.subplots(nrows=3, ncols=2, figsize=(12, 8))\n",
        "fig.subplots_adjust(top=1.2)\n",
        "\n",
        "sns.boxplot(data=melhous_data, x=\"Price\", orient='h', ax=axis[0,0],color='pink')\n",
        "sns.boxplot(data=melhous_data, x=\"Distance\", orient='h', ax=axis[0,1],color='pink')\n",
        "sns.boxplot(data=melhous_data, x=\"Bedroom2\", orient='h', ax=axis[1,0],color='pink')\n",
        "sns.boxplot(data=melhous_data, x=\"Bathroom\", orient='h', ax=axis[1,1],color='pink')\n",
        "sns.boxplot(data=melhous_data, x=\"Lattitude\", orient='h', ax=axis[2,0],color='pink')\n",
        "sns.boxplot(data=melhous_data, x=\"Longtitude\", orient='h', ax=axis[2,1],color='pink')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 960
        },
        "id": "pJPFXnvS2RTs",
        "outputId": "3b157592-1a84-4e6b-d81c-9dd11400fc8c"
      },
      "execution_count": 419,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*1.Each subplot displays a horizontal boxplot for a different numerical variable.\n",
        "2.The boxplot summarizes the distribution of each variable, showing the median, quartiles, and potential outliers.\n",
        "3.The x-axis of each plot represents the values of the respective numerical variable.\n",
        "4.a grid of subplots containing horizontal boxplots for six numerical variables from the melhous_data DataFrame. This boxplots helps in understanding the distribution and central tendency of each variable, as well as identifying potential outliers. The use of horizontal boxplots allows for clear comparison between variables.\n",
        "5.There is outliers present in the data, some variables are highly effected by the outliers like price ,distance, longtitude and the others variables also conatins outliers but not that much to treatment is required.Treatment is required fro some of them.some outliers in varibles are very less.so , it will not impact the data.\n",
        "*italicized text* *italicized text*"
      ],
      "metadata": {
        "id": "zttNts2CiWLc"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 420,
      "metadata": {
        "id": "2Puj3rANnt50"
      },
      "outputs": [],
      "source": [
        "#sns.set(style=\"whitegrid\")\n",
        "#for column in melhous_data.columns:\n",
        "    #plt.figure(figsize=(8, 5))\n",
        "    #sns.histplot(melhous_data[column], bins=10, kde=True, color='skyblue', edgecolor='black')\n",
        "    #plt.title(f'Histogram of {column}')\n",
        "    #plt.xlabel(column)\n",
        "    #plt.ylabel('Frequency')\n",
        "    #plt.tight_layout()\n",
        "    #plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Univariate Analysis - Categorical Variables**\n"
      ],
      "metadata": {
        "id": "c33bjI1-DROa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "COUNTPLOT of melhousedata"
      ],
      "metadata": {
        "id": "OhcHHCkCDaN5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axs = plt.subplots(nrows=1, ncols=4, figsize=(20, 6))\n",
        "sns.countplot(data=melhous_data, x='Type', ax=axs[0])\n",
        "sns.countplot(data=melhous_data, x='Suburb', ax=axs[1])\n",
        "sns.countplot(data=melhous_data, x='Method', ax=axs[2])\n",
        "sns.countplot(data=melhous_data, x='Method', ax=axs[3])\n",
        "\n",
        "axs[0].set_title(\"Type - counts\", pad=10, fontsize=14)\n",
        "axs[1].set_title(\"Suburb- counts\", pad=10, fontsize=14)\n",
        "axs[2].set_title(\"Method - counts\", pad=10, fontsize=14)\n",
        "axs[3].set_title(\"SellerG - counts\", pad=10, fontsize=14)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 412
        },
        "id": "QRiw8fVoBvSk",
        "outputId": "9d1f31be-ec9f-46b1-da26-9a375df44167"
      },
      "execution_count": 421,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x600 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Each subplot displays a count plot for a different categorical variable.\n",
        "The x-axis of each plot represents the categories of the respective variable, and the y-axis represents the count of occurrences for each category.\n",
        "The titles of the subplots provide information about the variable being analyzed.\n",
        "a univariate analysis by visualizing the counts of different categories for four categorical variables ('Type', 'Suburb', 'Method', and 'SellerG') from the melhous_data DataFrame. This analysis helps in understanding the distribution and frequency of each category within the dataset. *italicized text*"
      ],
      "metadata": {
        "id": "eA5qBFGxi36G"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 422,
      "metadata": {
        "id": "u7UzB-zLdJjB"
      },
      "outputs": [],
      "source": [
        "#import seaborn as sns\n",
        "#melhous_data.hist(figsize=(10, 6), bins=10, color='purple', edgecolor='black')\n",
        "#plt.tight_layout()\n",
        "#plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "3ySB_tOLj1gb"
      },
      "outputs": [],
      "source": [
        "#melhous_data.plot(kind='box', figsize=(20, 10), color='skyblue')\n",
        "#plt.tight_layout()\n",
        "#plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**OUTLIERS TREATMENT**"
      ],
      "metadata": {
        "id": "2FHDMpcWDu5P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Outlier Treatment: Removing top 5% & bottom 1% of the Column Outlier values\n",
        "Q3 = melhous_data['Price'].quantile(0.75)\n",
        "Q1 = melhous_data['Price'].quantile(0.25)\n",
        "IQR = Q3-Q1\n",
        "melhous_data = melhous_data[(melhous_data['Price'] > Q1 - 1.5*IQR) & (melhous_data['Price'] < Q3 + 1.5*IQR)]\n",
        "\n",
        "sns.boxplot(data=melhous_data, x=\"Price\", orient='h',color='pink')\n",
        "plt.show()\n",
        "#Outlier Handling for Miles Feature\n",
        "#Outlier Treatment: Removing top 5% & bottom 1% of the Column Outlier values\n",
        "Q3 = melhous_data['Distance'].quantile(0.75)\n",
        "Q1 = melhous_data['Distance'].quantile(0.25)\n",
        "IQR = Q3-Q1\n",
        "melhous_data= melhous_data[(melhous_data['Distance'] > Q1 - 1.5*IQR) & (melhous_data['Distance'] < Q3 + 1.5*IQR)]\n",
        "\n",
        "sns.boxplot(data=melhous_data, x=\"Distance\", orient='h',color='pink')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 899
        },
        "id": "XOxBA_PW6lmh",
        "outputId": "f3083487-4ad9-4b52-a278-a02edd3d1dc0"
      },
      "execution_count": 424,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAgQAAAG5CAYAAADxviygAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAWfklEQVR4nO3deWzXhR3/8VcPKWc55pWBDDFpB5FLpsBUcKg4nBNmmMc8Fn84UYdEzTJxU7NN45XpJuIVnbeLUyFzyRg7vEWCw21otsUZiU5w4MFREIqj/f7+2I/+VgsTlPZT28cjIeFz9Pt9tx8+/T75fj/9tqxUKpUCAHRq5UUPAAAUTxAAAIIAABAEAEAEAQAQQQAARBAAABEEAEAEAQCQpHJndyyVSmlsbJ03NSwvL2u122bnOQ7tg+PQPjgO7YPj8MmUl5elrKxsp/bd6SBobCxlzZr3P/ZQOxygsjx9+/ZIXd2mbN3auNtvn53jOLQPjkP74Di0D47DJ9evX49UVOxcEHjJAAAQBACAIAAAIggAgAgCACCCAACIIAAAIggAgAgCACCCAACIIAAAIggAgAgCACCCAACIIAAAIggAgAgCACCCAACIIAAAIggAgAgCACCCAACIIAAAIggAgAgCACCCAACIIAAAIggAgAgCACCCAACIIAAAIggAgAgCACCCAABIUln0AHRsGzduSH395qLH+NSoqCjPli3dUle3OQ0NjUWPs1t17dotPXv2KnoMYAcEAa1m48YNefSRB7O1YWvRo9AOVFZUZtrXTxUF0E4JAlpNff3mbG3Ymi8PHZF+PXoWPU6bWPP+xiz827JO9TnvjG1fl/r6zYIA2ilBQKvr16Nn9unVu+gx2lRn/JyBTzcXFQIAggAAEAQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAaSdBsGnTpqJHAIA2UV+/uegRtqvwIKirW585c+akrm590aMAQKuqq1ufBx+8q10+5hUeBFu2bEmpVMqWLVuKHgUAWtUHH/znMe+DD9rfY17hQQAAFE8QAACCAAAQBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAACSpLHoAAOis/vjHxVm27MWm5REjRufgg8cVMotnCACgAHfeObdZDCTJsmUv5s475xYyjyAAgDb2y18+3Gy5rKyi2XIRUeAlAwAoyJgxEzJs2LCm5ZdffjlLljyd5D8vJ7TlywftJgjWrl2ThobGosfotCoqyrNlS7fU1W3ebcdh3bq1u+V26Dg+Lf8mWuN8YNd1xOPw4XPgv2Ng2/K2IFi27MXOGQRPPPG7okcAWtlTT/2+6BGg3fjwywRFazdBMHHipFRX9yl6jE6roqI81dW7/xkCDwD8tyOOODp9+vQteoyP1BrnA7uuIx6H//6+WCo1FDxNc+0mCPr27Ze+ffcseoxOq7KyPH379khV1fvZurVjnHi0P3369M2ee+5d9BgfyfnQPnSG4/Dyyy+3uIZgmxEjRrfpLO0mCACgs1my5OmmawY+rK3fj8CPHQJAG5s69cT/uf2ss2a20ST/nyAAgAKcddbMFi8LjBgxupAYSLxkAACFOfjgcYW9VfGHeYYAABAEAIAgAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAADSDoKgqqoqZWVlqaqqKnoUAGhVXbr85zGvS5f295hXWfQA1dW9M2vWrGzZUsrWrY1FjwMAraa6undOPfX/pGvXbkWP0kLhzxAkSffu3YseAQDaRHuMgaSdBAEAUCxBAAAIAgBAEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBABBBAABEEAAAEQQAQAQBAJCksugB6PjWvL+x6BHazLbPtTN9zjvD1wPaP0FAq+natVsqKyqz8G/Lih6lzXXGz/mjVFZUpmvXbkWPAeyAIKDV9OzZK9O+fmrq6zcXPcqnRkVFeaqru6WubnMaGhqLHme36tq1W3r27FX0GMAOCAJaVc+evTwI7ILKyvL07dsjVVXvZ+vWjhUEQPvmokIAQBAAAIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACAJGWlUqm0MzuWSqU0Nu7UrrusoqI8DQ2NrXLb7DzHoX1wHNoHx6F9cBw+mfLyspSVle3UvjsdBABAx+UlAwBAEAAAggAAiCAAACIIAIAIAgAgggAAiCAAACIIAIAIAgAgggAAiCAAACIIAIAUGASvvfZazjzzzIwcOTKHHnporrvuunzwwQdFjdMpzZ8/P7W1tS3+/PjHPy56tA7tjTfeyOWXX54pU6Zk6NChOe6447a73yOPPJJjjjkmw4YNy/HHH58nn3yyjSft2HbmOJx++unbPUdee+21AibueH7zm9/k3HPPzfjx4zNy5MhMmTIljz76aD78S3idC22jsog7Xb9+fb75zW9m0KBBuemmm7J69epcc801qa+vz+WXX17ESJ3anXfemV69ejUt77PPPgVO0/G9+uqrefrppzNixIg0Nja2+OaXJL/+9a9z2WWX5ZxzzsnYsWOzYMGCzJw5Mw8++GBGjhzZ9kN3QDtzHJLkoIMOysUXX9xs3YABA9pixA7vnnvuSf/+/TN79uz07ds3zz//fC677LKsWrUqM2fOTOJcaFOlAtx2222lkSNHltauXdu07qGHHioNGTKktGrVqiJG6pTmzZtXqqmpKb333ntFj9KpNDQ0NP394osvLn3lK19psc+kSZNKF110UbN1J510Uumss85q9fk6i505Dqeddlrp7LPPbsuxOpXtfe+59NJLSwcddFDT8XEutJ1CXjJ45plnMm7cuPTp06dp3eTJk9PY2JhFixYVMRK0mfLy/33avfnmm3n99dczefLkZuuPPfbYLF682Etru8lHHQdaX79+/VqsGzJkSDZu3JhNmzY5F9pYIWfE8uXLM3jw4Gbrqqurs9dee2X58uVFjNSpHXfccRkyZEiOPPLI3H777WloaCh6pE5t2zmw//77N1t/wAEH5N///nfefPPNIsbqtF544YWMHDkyw4YNy2mnnZY//vGPRY/Uob344ovZZ5990rNnT+dCGyvkGoK6urpUV1e3WN+7d++sX7++gIk6p7322ivnn39+RowYkbKysjzxxBP56U9/mtWrV7uWo0DbzoEPnyPblp0jbefggw/OlClTMmjQoLz99tv52c9+ljPPPDP3339/Ro0aVfR4Hc7SpUuzYMGCpms2nAttq5AgoH04/PDDc/jhhzctH3bYYamqqsq9996bc845J3vvvXeB00HxZs2a1Wz5iCOOyHHHHZdbbrkld9xxR0FTdUyrVq3KhRdemDFjxuSMM84oepxOqZCXDKqrq7Nhw4YW69evX5/evXsXMBHbTJ48OQ0NDfn73/9e9Cid1rZz4MPnSF1dXbPttL3u3btnwoQJ+etf/1r0KB1KXV1dvvWtb6VPnz656aabmq7vcC60rUKCYPDgwS2uFdiwYUPeeeedFtcWQGez7Rz48DmyfPny7LHHHtlvv/2KGAtaRX19fWbMmJENGza0+BFo50LbKiQIxo8fn+eff76p8pJk4cKFKS8vz6GHHlrESPw/CxYsSEVFRYYOHVr0KJ3Wfvvtl0GDBmXhwoXN1i9YsCDjxo1Lly5dCpqMTZs25amnnsqwYcOKHqVD2Lp1ay644IIsX748d955Z4v3QHEutK1CriE4+eSTc//99+fb3/52ZsyYkdWrV+e6667LySef7E1x2tD06dMzZsyY1NbWJkkef/zxPPzwwznjjDOy1157FTxdx7V58+Y8/fTTSZKVK1dm48aNTd/wDjnkkPTr1y/nn39+vvOd72TgwIEZM2ZMFixYkJdeeikPPPBAkaN3KB91HLY9SB199NHp379/3n777dx999155513cuONNxY5eofxwx/+ME8++WRmz56djRs35i9/+UvTtqFDh6ZLly7OhTZUVirt4O25Wtlrr72WK664In/+85/To0ePTJkyJRdeeKHia0NXXnllnn322axatSqNjY0ZNGhQvv71r+f0009PWVlZ0eN1WCtWrMiRRx653W333XdfxowZk+Q/b9d6xx135K233sr++++fiy66KF/60pfactQO7aOOw7777psf/ehHeeWVV7Ju3bp069Yto0aNysyZMzN8+PA2nrZjmjhxYlauXLndbY8//njTO0I6F9pGYUEAALQf3qoLABAEAIAgAAAiCACACAIAIIIAAIggAAAiCOBT46abbmp6V0mA3c2vP4aCzJ8/P5dccknTcpcuXdK7d+/U1tZmwoQJOeGEE9KzZ89PdB+rV6/Oww8/nKOOOipDhgz5pCMDHZgggILNmjUrAwYMyNatW/Puu+/mhRdeyFVXXZV77rknt9xySz7/+c8nSc4999ycffbZu3Tbb7/9dubOnZv+/fsLAuB/EgRQsPHjxzf77XkzZszI4sWLc8455+S8887LggUL0rVr11RWVqay0ikLtA7XEEA7NG7cuJx33nlZuXJlfvWrXyXZ/jUEixYtyimnnJIvfOELGTVqVI455pjccMMNSZIlS5Zk2rRpSZJLLrkktbW1qa2tzfz585MkS5cuzaxZs3LEEUfkwAMPzIQJE3LVVVelvr6+2X3Mnj07o0aNyurVq3Peeedl1KhRGTt2bK699to0NDQ027exsTH33ntvvvrVr2bYsGEZO3Zspk+fnpdffrnZfo899lhOOOGEDB8+PIccckguvPDC/Otf/9p9X0Bgl/nvBrRTU6ZMyQ033JDnnnsuJ554Yovtr776ambMmJHa2trMmjUrXbp0yRtvvJE//elPSZIDDjggs2bNypw5c3LSSSdl9OjRSZKDDjooSbJw4cLU19fnlFNOSZ8+fZp+peyqVasyZ86cZvfV0NCQ6dOnZ/jw4fnud7+bxYsX56677sp+++2Xb3zjG037ff/738/8+fMzfvz4TJs2LQ0NDVm6dGmWLVvW9CzIrbfemhtvvDGTJ0/OtGnTsmbNmjzwwAM59dRT88tf/jLV1dWt8vUEPkIJKMS8efNKNTU1pZdeemmH+4wePbo0derUUqlUKs2ZM6dUU1PTtO3uu+8u1dTUlN57770dfvxLL71UqqmpKc2bN6/Fts2bN7dYd/vtt5dqa2tLK1eubFp38cUXl2pqakpz585ttu/UqVNLX/va15qWFy9eXKqpqSldccUVLW63sbGxVCqVSitWrCgNGTKkdOuttzbb/sorr5SGDh3aYj3QdrxkAO1Y9+7d8/77729327b/ST/++ONpbGzc5dvu2rVr0983bdqUNWvWZNSoUSmVSvnb3/7WYv9TTjml2fLo0aOzYsWKpuXf/e53KSsry8yZM1t8bFlZWZLk97//fRobGzN58uSsWbOm6c+ee+6Zz33uc1myZMkufx7A7uElA2jHNm3alM985jPb3XbsscfmkUceyaWXXprrr78+48aNy9FHH50vf/nLKS//6NZ/6623MmfOnDzxxBNZv359s20bN25stlxVVZV+/fo1W9e7d+9mH/fPf/4ze++9d/r06bPD+3z99ddTKpUyadKk7W530SQUx9kH7dSqVauyYcOGDBw4cLvbu3btmgcffDBLlizJU089lWeffTYLFizIL37xi9x1112pqKjY4W03NDTkzDPPzPr163PWWWdl8ODB6d69e1avXp3Zs2e3eMbhf93WrmhsbExZWVnuuOOO7d5m9+7dd8v9ALtOEEA79dhjjyVJDjvssB3uU15ennHjxmXcuHG55JJLctttt+UnP/lJlixZki9+8YtNT9V/2D/+8Y+8/vrrufbaazN16tSm9YsWLfrY8w4cODDPPfdc1q1bt8NnCQYOHJhSqZQBAwZk//33/9j3Bex+riGAdmjx4sW55ZZbMmDAgBx//PHb3WfdunUt1m1786EPPvggSdKtW7ckSV1dXbP9tr2kUCqVmtaVSqXcd999H3vmSZMmpVQqZe7cuS22bbufSZMmpaKiInPnzm1239v2Wbt27ce+f+CT8QwBFOyZZ57J8uXL09DQkHfffTdLlizJokWL8tnPfja33nprqqqqtvtxN998c5YuXZoJEyakf//+ee+99/Lzn/88++67b9OPGA4cODDV1dV56KGH0qNHj3Tv3j3Dhw/P4MGDM3DgwFx77bVZvXp1evbsmd/+9rctwmFXjB07NlOmTMn999+fN954I4cffngaGxvz4osvZsyYMTnttNMycODAXHDBBbn++uuzcuXKHHXUUenRo0dWrFiRP/zhDznxxBMzffr0jz0D8PEJAijYtp/532OPPdKnT5/U1NTke9/73kf+LoOJEydm5cqVmTdvXtauXZu+ffvmkEMOyfnnn59evXo13eY111yTG264IT/4wQ+ydevWXH311TnhhBNy22235corr8ztt9+eqqqqHH300Tn11FMzZcqUj/25XH311amtrc2jjz6a6667Lr169cqBBx6YUaNGNe1z9tlnZ9CgQbnnnnty8803J0n23XffHHrooZk4ceLHvm/gkykrffh5OwCg03ENAQAgCAAAQQAARBAAABEEAEAEAQAQQQAARBAAABEEAEAEAQAQQQAARBAAABEEAECS/wuJCjhFOt0lWgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*above this scatter plot we removed all the outliers present in the variables price and distance.*"
      ],
      "metadata": {
        "id": "ZDfSBY0CD-xq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**SCATTERPLOT**"
      ],
      "metadata": {
        "id": "92710ZI5D_5W"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(melhous_data['Rooms'], melhous_data['Price'], color='lightblue',s=50)\n",
        "plt.xlabel(\"Number of Rooms\")\n",
        "plt.ylabel(\"Price\")\n",
        "plt.title(\"SCATTER OF PRICE VS NUMBER OF ROOMS\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 480
        },
        "id": "IWpgX7lZ_NHC",
        "outputId": "774d0e0d-7e53-44b7-be4d-c24be6c3f07e"
      },
      "execution_count": 425,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Each point in the scatter plot represents a data point, with the x-coordinate indicating the number of rooms and the y-coordinate indicating the price.\n",
        "The plot helps visualize the relationship between the number of rooms and the price.\n",
        "A general trend or pattern in the relationship between the two variables can be observed from the scatter plot.\n",
        "The scatter plot visualizes the relationship between the number of rooms and the price in the melhous_data Data. It provides insight into how these variables are related and helps in understanding any patterns or trends present in the data.\n",
        "Number of rooms=2 is the highest price value with 1.2 however,\n",
        "number of rooms=1 is the good a good price value between 0.6 to 0.8,\n",
        "Number of rooms= 3 goes same as room of 2 price value.\n",
        "number of rooms 4 5 and others have individual relationship. *italicized text*"
      ],
      "metadata": {
        "id": "f6DrmsG0b4Dg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**How old are the properties on average, based on the 'YearBuilt' column?**"
      ],
      "metadata": {
        "id": "vpuhOpPkb5Mc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# first import datetime lib n convert the time into current time:\n",
        "from datetime import datetime\n",
        "current_year = datetime.now().year"
      ],
      "metadata": {
        "id": "6Z_iIZyDb-g7"
      },
      "execution_count": 426,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop rows where 'YearBuilt' is NaN\n",
        "melhous_data.dropna(subset=['YearBuilt'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 635
        },
        "id": "mI6LrbPbec-d",
        "outputId": "a266ee77-195e-428c-fd57-4f690ea3772c"
      },
      "execution_count": 427,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Suburb  Rooms   Type      Price Method   SellerG        Date  \\\n",
              "0         Abbotsford      2      0  1480000.0      S    Biggin   3/12/2016   \n",
              "1         Abbotsford      2   79.0  1035000.0      S    Biggin   4/02/2016   \n",
              "2         Abbotsford      3  150.0  1465000.0     SP    Biggin   4/03/2017   \n",
              "3         Abbotsford      3      0   850000.0     PI    Biggin   4/03/2017   \n",
              "4         Abbotsford      4  142.0  1600000.0     VB    Nelson   4/06/2016   \n",
              "...              ...    ...    ...        ...    ...       ...         ...   \n",
              "13574    Westmeadows      3      0   582000.0      S       Red  26/08/2017   \n",
              "13575  Wheelers Hill      4      0  1245000.0      S     Barry  26/08/2017   \n",
              "13576   Williamstown      3  133.0  1031000.0     SP  Williams  26/08/2017   \n",
              "13577   Williamstown      3      0  1170000.0      S     Raine  26/08/2017   \n",
              "13579     Yarraville      4  112.0  1285000.0     SP   Village  26/08/2017   \n",
              "\n",
              "       Distance  Bedroom2  Bathroom  ... BuildingArea  YearBuilt CouncilArea  \\\n",
              "0           2.5       2.0       1.0  ...            0          0       Yarra   \n",
              "1           2.5       2.0       1.0  ...         79.0     1900.0       Yarra   \n",
              "2           2.5       3.0       2.0  ...        150.0     1900.0       Yarra   \n",
              "3           2.5       3.0       2.0  ...            0          0       Yarra   \n",
              "4           2.5       3.0       1.0  ...        142.0     2014.0       Yarra   \n",
              "...         ...       ...       ...  ...          ...        ...         ...   \n",
              "13574      16.5       3.0       2.0  ...            0          0        zero   \n",
              "13575      16.7       4.0       2.0  ...            0     1981.0        zero   \n",
              "13576       6.8       3.0       2.0  ...        133.0     1995.0        zero   \n",
              "13577       6.8       3.0       2.0  ...            0     1997.0        zero   \n",
              "13579       6.3       4.0       1.0  ...        112.0     1920.0        zero   \n",
              "\n",
              "      Lattitude Longtitude                  Regionname  price_per_sqm  \\\n",
              "0     -37.79960  144.99840       Northern Metropolitan    7326.732673   \n",
              "1     -37.80790  144.99340       Northern Metropolitan    6634.615385   \n",
              "2     -37.80930  144.99440       Northern Metropolitan   10932.835821   \n",
              "3     -37.79690  144.99690       Northern Metropolitan    9042.553191   \n",
              "4     -37.80720  144.99410       Northern Metropolitan   13333.333333   \n",
              "...         ...        ...                         ...            ...   \n",
              "13574 -37.67917  144.89390       Northern Metropolitan    2273.437500   \n",
              "13575 -37.90562  145.16761  South-Eastern Metropolitan    1909.509202   \n",
              "13576 -37.85927  144.87904        Western Metropolitan    3096.096096   \n",
              "13577 -37.85274  144.88738        Western Metropolitan    2683.486239   \n",
              "13579 -37.81188  144.88449        Western Metropolitan    3549.723757   \n",
              "\n",
              "                   Price_bin           longi_bin            lati_bin  \n",
              "0      (976500.0, 1868000.0]   (144.87, 145.089]  (-37.873, -37.718]  \n",
              "1      (976500.0, 1868000.0]   (144.87, 145.089]  (-37.873, -37.718]  \n",
              "2      (976500.0, 1868000.0]   (144.87, 145.089]  (-37.873, -37.718]  \n",
              "3        (76085.0, 976500.0]   (144.87, 145.089]  (-37.873, -37.718]  \n",
              "4      (976500.0, 1868000.0]   (144.87, 145.089]  (-37.873, -37.718]  \n",
              "...                      ...                 ...                 ...  \n",
              "13574    (76085.0, 976500.0]   (144.87, 145.089]  (-37.718, -37.563]  \n",
              "13575  (976500.0, 1868000.0]  (145.089, 145.307]  (-38.028, -37.873]  \n",
              "13576  (976500.0, 1868000.0]   (144.87, 145.089]  (-37.873, -37.718]  \n",
              "13577  (976500.0, 1868000.0]   (144.87, 145.089]  (-37.873, -37.718]  \n",
              "13579  (976500.0, 1868000.0]   (144.87, 145.089]  (-37.873, -37.718]  \n",
              "\n",
              "[12519 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f744b652-6aa9-4f0b-8c1e-b467ef7dbbd7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Suburb</th>\n",
              "      <th>Rooms</th>\n",
              "      <th>Type</th>\n",
              "      <th>Price</th>\n",
              "      <th>Method</th>\n",
              "      <th>SellerG</th>\n",
              "      <th>Date</th>\n",
              "      <th>Distance</th>\n",
              "      <th>Bedroom2</th>\n",
              "      <th>Bathroom</th>\n",
              "      <th>...</th>\n",
              "      <th>BuildingArea</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>CouncilArea</th>\n",
              "      <th>Lattitude</th>\n",
              "      <th>Longtitude</th>\n",
              "      <th>Regionname</th>\n",
              "      <th>price_per_sqm</th>\n",
              "      <th>Price_bin</th>\n",
              "      <th>longi_bin</th>\n",
              "      <th>lati_bin</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1480000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>3/12/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.79960</td>\n",
              "      <td>144.99840</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>7326.732673</td>\n",
              "      <td>(976500.0, 1868000.0]</td>\n",
              "      <td>(144.87, 145.089]</td>\n",
              "      <td>(-37.873, -37.718]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>2</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1035000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>4/02/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>79.0</td>\n",
              "      <td>1900.0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.80790</td>\n",
              "      <td>144.99340</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>6634.615385</td>\n",
              "      <td>(976500.0, 1868000.0]</td>\n",
              "      <td>(144.87, 145.089]</td>\n",
              "      <td>(-37.873, -37.718]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>3</td>\n",
              "      <td>150.0</td>\n",
              "      <td>1465000.0</td>\n",
              "      <td>SP</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>4/03/2017</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>...</td>\n",
              "      <td>150.0</td>\n",
              "      <td>1900.0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.80930</td>\n",
              "      <td>144.99440</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>10932.835821</td>\n",
              "      <td>(976500.0, 1868000.0]</td>\n",
              "      <td>(144.87, 145.089]</td>\n",
              "      <td>(-37.873, -37.718]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>850000.0</td>\n",
              "      <td>PI</td>\n",
              "      <td>Biggin</td>\n",
              "      <td>4/03/2017</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.79690</td>\n",
              "      <td>144.99690</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>9042.553191</td>\n",
              "      <td>(76085.0, 976500.0]</td>\n",
              "      <td>(144.87, 145.089]</td>\n",
              "      <td>(-37.873, -37.718]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Abbotsford</td>\n",
              "      <td>4</td>\n",
              "      <td>142.0</td>\n",
              "      <td>1600000.0</td>\n",
              "      <td>VB</td>\n",
              "      <td>Nelson</td>\n",
              "      <td>4/06/2016</td>\n",
              "      <td>2.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>142.0</td>\n",
              "      <td>2014.0</td>\n",
              "      <td>Yarra</td>\n",
              "      <td>-37.80720</td>\n",
              "      <td>144.99410</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>13333.333333</td>\n",
              "      <td>(976500.0, 1868000.0]</td>\n",
              "      <td>(144.87, 145.089]</td>\n",
              "      <td>(-37.873, -37.718]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13574</th>\n",
              "      <td>Westmeadows</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>582000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Red</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>16.5</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>zero</td>\n",
              "      <td>-37.67917</td>\n",
              "      <td>144.89390</td>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>2273.437500</td>\n",
              "      <td>(76085.0, 976500.0]</td>\n",
              "      <td>(144.87, 145.089]</td>\n",
              "      <td>(-37.718, -37.563]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13575</th>\n",
              "      <td>Wheelers Hill</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1245000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Barry</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>16.7</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1981.0</td>\n",
              "      <td>zero</td>\n",
              "      <td>-37.90562</td>\n",
              "      <td>145.16761</td>\n",
              "      <td>South-Eastern Metropolitan</td>\n",
              "      <td>1909.509202</td>\n",
              "      <td>(976500.0, 1868000.0]</td>\n",
              "      <td>(145.089, 145.307]</td>\n",
              "      <td>(-38.028, -37.873]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13576</th>\n",
              "      <td>Williamstown</td>\n",
              "      <td>3</td>\n",
              "      <td>133.0</td>\n",
              "      <td>1031000.0</td>\n",
              "      <td>SP</td>\n",
              "      <td>Williams</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>6.8</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>...</td>\n",
              "      <td>133.0</td>\n",
              "      <td>1995.0</td>\n",
              "      <td>zero</td>\n",
              "      <td>-37.85927</td>\n",
              "      <td>144.87904</td>\n",
              "      <td>Western Metropolitan</td>\n",
              "      <td>3096.096096</td>\n",
              "      <td>(976500.0, 1868000.0]</td>\n",
              "      <td>(144.87, 145.089]</td>\n",
              "      <td>(-37.873, -37.718]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13577</th>\n",
              "      <td>Williamstown</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>1170000.0</td>\n",
              "      <td>S</td>\n",
              "      <td>Raine</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>6.8</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1997.0</td>\n",
              "      <td>zero</td>\n",
              "      <td>-37.85274</td>\n",
              "      <td>144.88738</td>\n",
              "      <td>Western Metropolitan</td>\n",
              "      <td>2683.486239</td>\n",
              "      <td>(976500.0, 1868000.0]</td>\n",
              "      <td>(144.87, 145.089]</td>\n",
              "      <td>(-37.873, -37.718]</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13579</th>\n",
              "      <td>Yarraville</td>\n",
              "      <td>4</td>\n",
              "      <td>112.0</td>\n",
              "      <td>1285000.0</td>\n",
              "      <td>SP</td>\n",
              "      <td>Village</td>\n",
              "      <td>26/08/2017</td>\n",
              "      <td>6.3</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>112.0</td>\n",
              "      <td>1920.0</td>\n",
              "      <td>zero</td>\n",
              "      <td>-37.81188</td>\n",
              "      <td>144.88449</td>\n",
              "      <td>Western Metropolitan</td>\n",
              "      <td>3549.723757</td>\n",
              "      <td>(976500.0, 1868000.0]</td>\n",
              "      <td>(144.87, 145.089]</td>\n",
              "      <td>(-37.873, -37.718]</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>12519 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f744b652-6aa9-4f0b-8c1e-b467ef7dbbd7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f744b652-6aa9-4f0b-8c1e-b467ef7dbbd7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f744b652-6aa9-4f0b-8c1e-b467ef7dbbd7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-695c6b6a-2295-437d-a900-ff7ceebd5416\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-695c6b6a-2295-437d-a900-ff7ceebd5416')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-695c6b6a-2295-437d-a900-ff7ceebd5416 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 427
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert 'YearBuilt' to numeric..\n",
        "melhous_data['YearBuilt'] = pd.to_numeric(melhous_data['YearBuilt'], errors='coerce')\n"
      ],
      "metadata": {
        "id": "mn09i5tsewi0"
      },
      "execution_count": 428,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# convert yearbuilt column into integer column,Ensure 'YearBuilt' is an integer\n",
        "melhous_data['YearBuilt'] = melhous_data['YearBuilt'].astype(int)"
      ],
      "metadata": {
        "id": "gjL-m8xlewx3"
      },
      "execution_count": 429,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the age of each property\n",
        "melhous_data['PropertyAge'] = current_year - melhous_data['YearBuilt']"
      ],
      "metadata": {
        "id": "xXk4qgPtfDpx"
      },
      "execution_count": 430,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the average age of property...which is 841.8013 here...\n",
        "average_age = melhous_data['PropertyAge'].mean()\n",
        "average_age"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ndh6ADyWfDtJ",
        "outputId": "2ebbf92d-04a0-4343-cafb-9d719b7cb56e"
      },
      "execution_count": 431,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "841.8013419602205"
            ]
          },
          "metadata": {},
          "execution_count": 431
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*above scenario , we have to calculate the mean age of property , how much old are these, so we converted the yearbuilt column into integer with all removed nan values and , deduct the yearbuilt age from current year age, then got the mean age of property, which is 842.8013...*"
      ],
      "metadata": {
        "id": "HTDsCvlC0y-l"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**What is the range of latitudes and longitudes in the dataset?**"
      ],
      "metadata": {
        "id": "2U3XugJOhWnm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lat_min = melhous_data['Lattitude'].min()\n",
        "lat_min"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bbOMaFTBb-jh",
        "outputId": "83da1efb-030b-445e-b501-22df43472878"
      },
      "execution_count": 432,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-38.02848"
            ]
          },
          "metadata": {},
          "execution_count": 432
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lat_max = melhous_data['Lattitude'].max()\n",
        "lat_max"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AVa-kwUIiL1X",
        "outputId": "b077d252-8cc1-42bb-a26a-e2c15f1e93a7"
      },
      "execution_count": 433,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-37.56857"
            ]
          },
          "metadata": {},
          "execution_count": 433
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "long_min = melhous_data['Longtitude'].min()\n",
        "long_min"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ocK7YYDziL52",
        "outputId": "d2710a40-b9e8-4a59-cba4-b20936231aa5"
      },
      "execution_count": 434,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "144.63302"
            ]
          },
          "metadata": {},
          "execution_count": 434
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "long_max = melhous_data['Longtitude'].max()\n",
        "long_max"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "t4FhdSI6b-mp",
        "outputId": "2fed7c61-a63d-456b-9d51-081ab6bf494f"
      },
      "execution_count": 435,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "145.30267"
            ]
          },
          "metadata": {},
          "execution_count": 435
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lat_range = lat_max - lat_min\n",
        "lat_range"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p7r6KvOTZXqS",
        "outputId": "2b246f80-ed3c-4633-edfd-99d93b466224"
      },
      "execution_count": 436,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.4599100000000007"
            ]
          },
          "metadata": {},
          "execution_count": 436
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "long_range = long_max - long_min\n",
        "long_range"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vd4uXXkrZXtu",
        "outputId": "339d2b7e-d6b3-4c9c-a8cb-277e9428ecdc"
      },
      "execution_count": 437,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.6696500000000185"
            ]
          },
          "metadata": {},
          "execution_count": 437
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*range = max - min , so here we calculated the lattitude range by using lat(min) & lat(max), and getting lattitude range same is doing for longtitude range by using long(max) minus long(min).lattitude range is 0.4599.. and longitude range is 0.6696..*"
      ],
      "metadata": {
        "id": "NRbsDyoajoUF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**How does the price vary with the number of bathrooms?**"
      ],
      "metadata": {
        "id": "m6O2FlUDjpmQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "average_price_per_bathroom = melhous_data.groupby('Bathroom')['Price'].mean().sort_values()\n",
        "average_price_per_bathroom"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZXyJfvlVisQ_",
        "outputId": "5e182637-e518-47d4-bbfb-35a9f0f63470"
      },
      "execution_count": 438,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Bathroom\n",
              "1.0    8.488965e+05\n",
              "0.0    8.945588e+05\n",
              "2.0    1.154183e+06\n",
              "6.0    1.385500e+06\n",
              "3.0    1.412533e+06\n",
              "8.0    1.480000e+06\n",
              "4.0    1.551403e+06\n",
              "5.0    1.581682e+06\n",
              "Name: Price, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 438
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(x='Bathroom', y='Price', data=melhous_data, color= 'lightgreen')\n",
        "plt.title('Scatter Plot of Price vs. Number of Bathrooms')\n",
        "plt.xlabel('Number of Bathrooms')\n",
        "plt.ylabel('Price')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "g6PxwUoHkNKE",
        "outputId": "eaa52a40-47ca-45ed-d2f0-3ab23d5cc9f7"
      },
      "execution_count": 439,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*from above scatterplot we getting the information about the price and the bathroom and how they are varying, how number of bathrooms increase or decrease as per the price of property.most of them having a linear relationship, some of them have no correlation between the variables.\n",
        "\n",
        "Linear Relationship: If points roughly form a straight line, there is a linear relationship.\n",
        "Positive Correlation: If the line slopes upward (from bottom-left to top-right), there is a positive correlation. As x increases, y also increases.\n",
        "Negative Correlation: If the line slopes downward (from top-left to bottom-right), there is a negative correlation. As x increases, y decreases.\n",
        "No Correlation: If the points are scattered without any discernible pattern, there is no correlation between the variables.\n",
        "Points that are far from the main cluster of data points are outliers. These may indicate anomalies, errors, or unique cases that differ from the rest of the data.* *italicized text*"
      ],
      "metadata": {
        "id": "eSMbUfjoLaD_"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 440,
      "metadata": {
        "id": "-7CDk13TkM39"
      },
      "outputs": [],
      "source": [
        "#df_filled_a=melhous_data['Car'].fillna(melhous_data['Car'].mean(), inplace=True)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**How does the average price compare across different property types (e.g., house, unit, townhouse)?**"
      ],
      "metadata": {
        "id": "t2uIEseu3mck"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "average_price_by_type = melhous_data.groupby(\"Type\")['Price'].mean().sort_values()\n",
        "average_price_by_type"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UZFcmASy3pTE",
        "outputId": "02657884-aac5-436e-fb50-c6120f0f0701"
      },
      "execution_count": 441,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Type\n",
              "29.0      222000.0\n",
              "42.2      286000.0\n",
              "66.32     300000.0\n",
              "32.0      328500.0\n",
              "43.7      330000.0\n",
              "           ...    \n",
              "435.0    2250000.0\n",
              "450.0    2260000.0\n",
              "263.5    2300000.0\n",
              "314.0    2325000.0\n",
              "372.0    2340000.0\n",
              "Name: Price, Length: 528, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 441
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*The different types of properties, and the values represent the average prices for each type, sorted in ascending order. How the average price varies by property type, allowing for easier comparison and analysis of pricing trends across different property categories.*"
      ],
      "metadata": {
        "id": "s34eqQTgNpYE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Geospatial Analysis:\n",
        "\n",
        "How does location (latitude and longitude) affect 'Price'? (Use scatter plots, heatmaps)\n",
        "Are there clusters of high or low prices in specific areas?"
      ],
      "metadata": {
        "id": "nZub4oIYPKOM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.scatterplot(x='Longtitude', y='Lattitude', hue='Price', data=melhous_data, palette='viridis')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 475
        },
        "id": "4_aAWeV73pWI",
        "outputId": "3bc29c5d-97e0-4339-be04-f36254c3a16c"
      },
      "execution_count": 442,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Longtitude', ylabel='Lattitude'>"
            ]
          },
          "metadata": {},
          "execution_count": 442
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*1.This scatter plot allows you to visualize the geographical distribution of property prices based on their latitude and longitude. Each point on the scatter plot represents a property, with its geographical location determined by its longitude (x-axis) and latitude (y-axis). The color of each point corresponds to the price of the property, with a gradient provided by the \"viridis\" palette.\n",
        "\n",
        "2.From above scatter plot we are getting an information about the longi and latti at meet at a point and check the price there, purple dots have a huge cluster and high density of property which selling most with 1500000, however, blue color dots are very less as compare to purple dots means less spread and less density with 3000000.The points which are far from the clusters are outliers.Purple points having a high density with figure 1500000 and spread and blue color points is very less with figure 3000000.\n",
        "\n",
        "3.With price 1500000 property are selling most at the given longi and latti.\n",
        "4.With price 3000000 property are second most selling one with the mentioned long and latti on x and y axis.\n",
        "5.Points Far from clusters are outliers.\n",
        "\n",
        "Spread: How far apart the points are can give an idea about the variability or spread of the data.\n",
        "Density: Areas where points are densely packed indicate regions with higher data concentration.\n",
        "\n",
        "Points that are far from the main cluster of data points are outliers. These may indicate anomalies, errors, or unique cases that differ from the rest of the data*. *italicized text*"
      ],
      "metadata": {
        "id": "TXy1n7nBOoKI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "melhous_data['Date'] = pd.to_datetime(melhous_data['Date'], format='%d/%m/%Y')\n",
        "melhous_data['Date'] = pd.to_datetime(melhous_data['Date'])\n",
        "melhous_data.set_index('Date', inplace=True)\n",
        "melhous_data['Price'].plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "ohCuElB26v0P",
        "outputId": "e9fb32dc-8990-40ee-e800-df3dc43aee25"
      },
      "execution_count": 443,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Date'>"
            ]
          },
          "metadata": {},
          "execution_count": 443
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tnz6gv2riG9I"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 444,
      "metadata": {
        "id": "iTfdhuLjo5Xh"
      },
      "outputs": [],
      "source": [
        "#df_filled_c=melhous_data['YearBuilt'].fillna(melhous_data['YearBuilt'].mean())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 445,
      "metadata": {
        "id": "lF4TXWJMo5a9"
      },
      "outputs": [],
      "source": [
        "#df_filled_d=melhous_data['CouncilArea'].fillna(melhous_data['CouncilArea'].mode().iloc[0])\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**What is the average price of properties in different regions?**"
      ],
      "metadata": {
        "id": "9VVUGFryt8m-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "melhous_data.groupby('Regionname')['Price'].mean().reset_index().sort_values(by= 'Price')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        },
        "id": "MM_0wlaauAz5",
        "outputId": "7c0e7d8d-ce5a-484f-9e1e-e6ac90c764ac"
      },
      "execution_count": 446,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   Regionname         Price\n",
              "2           Northern Victoria  8.365000e+05\n",
              "5        Western Metropolitan  8.570344e+05\n",
              "1       Northern Metropolitan  8.758732e+05\n",
              "3  South-Eastern Metropolitan  1.013544e+06\n",
              "0        Eastern Metropolitan  1.076609e+06\n",
              "4       Southern Metropolitan  1.163322e+06"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0cec33b8-a986-41de-997a-9a8822e11638\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Regionname</th>\n",
              "      <th>Price</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Northern Victoria</td>\n",
              "      <td>8.365000e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Western Metropolitan</td>\n",
              "      <td>8.570344e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Northern Metropolitan</td>\n",
              "      <td>8.758732e+05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>South-Eastern Metropolitan</td>\n",
              "      <td>1.013544e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Eastern Metropolitan</td>\n",
              "      <td>1.076609e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Southern Metropolitan</td>\n",
              "      <td>1.163322e+06</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0cec33b8-a986-41de-997a-9a8822e11638')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0cec33b8-a986-41de-997a-9a8822e11638 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0cec33b8-a986-41de-997a-9a8822e11638');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5afb3b6c-ce9d-4f9d-af93-56feee2f934c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5afb3b6c-ce9d-4f9d-af93-56feee2f934c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5afb3b6c-ce9d-4f9d-af93-56feee2f934c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"melhous_data\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"Regionname\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Northern Victoria\",\n          \"Western Metropolitan\",\n          \"Southern Metropolitan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 134221.5622006551,\n        \"min\": 836500.0,\n        \"max\": 1163322.2722049318,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          836500.0,\n          857034.3671413686,\n          1163322.2722049318\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 446
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Average price of properties as given above table which is retreving by using groupby.*\n",
        "1.**Western Victoria** *is the lowest price value is 3.975234e+05*\n",
        "2.**Southern Metropolitan** *is the highest price value is 1.372963e+06.*"
      ],
      "metadata": {
        "id": "brpxjb9PTSqu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#sns.pairplot(melhous_data, x_vars=['Rooms', 'Distance', 'Landsize', 'BuildingArea'], y_vars='Price', hue='Type')\n"
      ],
      "metadata": {
        "id": "hW-j-5O-uA3R"
      },
      "execution_count": 447,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP2MfM7+GpUiBjhdQs7ZpTq",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}